{
    "docs": [
        {
            "location": "/",
            "text": "What's OpenVeo ?\n\n\nOpenVeo is a \nNode.js\n and \nAngularJS\n CMS. It embeds an HTTP server based on Express framework (\nExpress\n), a Socket server based on \nsocket.io\n framework and a plugin loader mechanism.\n\n\nThe core of the system (i.e. without any plugin) offers a simple connection form to the administration interface.\n\n\nThis interface gives access to a limited set of default features:\n\n\n\n\nUsers management\n\n\nPermissions, roles and groups management\n\n\nWeb service management\n\n\nA profile page\n\n\n\n\nEach plugin brings zero to many additive administration pages and zero to many additive public pages.\n\n\nAuthentication\n\n\nOpenVeo supports the following SSO (Single Sign On) providers:\n\n\n\n\nLDAP\n\n\nCAS\n\n\n\n\nCompatibility\n\n\nOpenVeo is tested on the following operating systems:\n\n\n\n\nUbuntu 16.04\n\n\n\n\nOpenVeo is tested on the following browsers:\n\n\n\n\nGoogle Chrome 54\n\n\nMozilla Firefox 47\n\n\nOpera 42\n\n\nInternet Explorer Edge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScreenshots\n\n\nLogin page\n\n\n\n\nBack end home page\n\n\n\n\nBack end roles management page\n\n\n\n\nBack end users management page\n\n\n\n\nBack end groups management page\n\n\n\n\nBack end applications management page\n\n\n\n\nBack end settings page",
            "title": "INTRODUCTION"
        },
        {
            "location": "/#whats-openveo",
            "text": "OpenVeo is a  Node.js  and  AngularJS  CMS. It embeds an HTTP server based on Express framework ( Express ), a Socket server based on  socket.io  framework and a plugin loader mechanism.  The core of the system (i.e. without any plugin) offers a simple connection form to the administration interface.  This interface gives access to a limited set of default features:   Users management  Permissions, roles and groups management  Web service management  A profile page   Each plugin brings zero to many additive administration pages and zero to many additive public pages.",
            "title": "What's OpenVeo ?"
        },
        {
            "location": "/#authentication",
            "text": "OpenVeo supports the following SSO (Single Sign On) providers:   LDAP  CAS",
            "title": "Authentication"
        },
        {
            "location": "/#compatibility",
            "text": "OpenVeo is tested on the following operating systems:   Ubuntu 16.04   OpenVeo is tested on the following browsers:   Google Chrome 54  Mozilla Firefox 47  Opera 42  Internet Explorer Edge",
            "title": "Compatibility"
        },
        {
            "location": "/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/#login-page",
            "text": "",
            "title": "Login page"
        },
        {
            "location": "/#back-end-home-page",
            "text": "",
            "title": "Back end home page"
        },
        {
            "location": "/#back-end-roles-management-page",
            "text": "",
            "title": "Back end roles management page"
        },
        {
            "location": "/#back-end-users-management-page",
            "text": "",
            "title": "Back end users management page"
        },
        {
            "location": "/#back-end-groups-management-page",
            "text": "",
            "title": "Back end groups management page"
        },
        {
            "location": "/#back-end-applications-management-page",
            "text": "",
            "title": "Back end applications management page"
        },
        {
            "location": "/#back-end-settings-page",
            "text": "",
            "title": "Back end settings page"
        },
        {
            "location": "/prerequisites/",
            "text": "OpenVeo requires and is tested on:\n\n\n\n\nNode.js\n (\n>8.9.4\n) - The server side of OpenVeo is written in Node.js\n\n\nNpm\n (\n>=5.6.0\n) - Npm will help you install all OpenVeo server dependencies\n\n\nMongoDB\n (\n>=3.0.0\n) - OpenVeo stores all its datas inside a MongoDB database (users, roles, taxonomies etc.)\n\n\nBower\n (\n>=1.5.2\n) - Bower will help you install all OpenVeo client dependencies, such as AngularJS and Bootstrap massively used in client side.\n\n\n\n\nNB:\n Moreover, for a Windows installation, Visual Studio Express is required as some OpenVeo dependencies are written in C and need to be compiled. For Linux you may have to install the package libkrb5-dev.",
            "title": "Prerequisites"
        },
        {
            "location": "/getting-started/",
            "text": "Download OpenVeo\n\n\nActually OpenVeo can be downloaded directly from \ngithub\n:\n\n\n\n\nSelect the tag you want to download (\nfrom version >=4.0.0\n)\n\n\nThen download the associated archive\n\n\nDeploy the archive on your server\n\n\n\n\nInstallation\n\n\nFrom OpenVeo root directory:\n\n\nnpm install --production\n\n\n\nNb :\n You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using \nadvanced configuration\n.\n\n\nLaunch the application\n\n\nOpenVeo is now installed. Launch it:\n\n\nnode server.js\n\n\n\nVerify that OpenVeo is working\n\n\nOpenVeo does not have any public pages. Consequently navigating to \nhttp://localhost:PORT\n will lead you to a 404 error page (it's a good sign if it does). To check that OpenVeo is working, try to log to the back end.\n\n\nLog to the back end\n\n\nYou can now access the back end at \nhttp://localhost:PORT/be/login\n (replace \nPORT\n by the port specified in \n~/.openveo/core/serverConf.json\n) using the super admin email and password.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#download-openveo",
            "text": "Actually OpenVeo can be downloaded directly from  github :   Select the tag you want to download ( from version >=4.0.0 )  Then download the associated archive  Deploy the archive on your server",
            "title": "Download OpenVeo"
        },
        {
            "location": "/getting-started/#installation",
            "text": "From OpenVeo root directory:  npm install --production  Nb :  You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using  advanced configuration .",
            "title": "Installation"
        },
        {
            "location": "/getting-started/#launch-the-application",
            "text": "OpenVeo is now installed. Launch it:  node server.js",
            "title": "Launch the application"
        },
        {
            "location": "/getting-started/#verify-that-openveo-is-working",
            "text": "OpenVeo does not have any public pages. Consequently navigating to  http://localhost:PORT  will lead you to a 404 error page (it's a good sign if it does). To check that OpenVeo is working, try to log to the back end.",
            "title": "Verify that OpenVeo is working"
        },
        {
            "location": "/getting-started/#log-to-the-back-end",
            "text": "You can now access the back end at  http://localhost:PORT/be/login  (replace  PORT  by the port specified in  ~/.openveo/core/serverConf.json ) using the super admin email and password.",
            "title": "Log to the back end"
        },
        {
            "location": "/web-service/",
            "text": "Introduction\n\n\nOpenVeo offers a Web Service which must be started as a different process and needs some extra configuration.\n\n\nConfigure the Web Service\n\n\nOpen \n~openveo/core/serverConf.json\n\n\n{\n  \"ws\" : {\n    \"port\" : PORT // Replace PORT by the HTTP server port to use (e.g. 3002)\n  }\n}\n\n\n\n\nConfigure the Web Service logger\n\n\nOpen \n~openveo/core/loggerConf.json\n\n\n{\n  \"ws\" : {\n    \"fileName\" : \"/var/log/openveo/openveo-ws.log\", // Path to web service log file\n    \"level\" : \"info\", // Log level\n    \"maxFileSize\" : 104857600, // Maximum log file size (in Bytes)\n    \"maxFiles\" : 2 // Maximum number of files archived\n  }\n}\n\n\n\n\nLaunch the Web Service\n\n\nIf you want to interact with OpenVeo through the Web Service, you need to start it.\nTo start the OpenVeo Web Service, just use the \n-ws\n option:\n\n\nnode server.js -ws\n\n\n\nAuthenticate to the Web Service\n\n\nThe Web Service uses \nOAuth2\n for authentication.\n\n\nGet a client id and client secret\n\n\nYou can create a new application with a client id and a client secret through the back end (\nhttp://localhost:PORT/be/applications-list\n).\n\n\nGet an access token\n\n\nTo make Web Service requests you will need an Access token. To get an Access token, you must make an HTTP POST request on \n/token\n.\n\n\nExpected headers :\n\n\n\n\n'Authorization: Basic CREDENTIALS'\n (Replace CREDENTIALS by \"CLIENT_ID:CLIENT_SECRET\" encoded in base 64)\n\n\n\n\nExpected POST parameters :\n\n\n\n\n'grant_type' => 'client_credentials'\n\n\n\n\nYou will receive an Access token to authenticate each Web Service requests.\n\n\nPHP example\n\n\n$curlCookieJar = tempnam(sys_get_temp_dir(), \"cookies_\");\n\n// Initialize a curl session\n$curlHandle = curl_init();\n\n// Default curl options for all future requests\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($curlHandle, CURLOPT_COOKIESESSION, false);\ncurl_setopt($curlHandle, CURLOPT_COOKIEJAR, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_COOKIEFILE, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_HEADER, false);\ncurl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 1);\ncurl_setopt($curlHandle, CURLOPT_TIMEOUT, 30);\n\n// Retrieve an oauth token\n// Use HTTP POST method\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'POST');\n\n// Replace {OPENVEO_URL} by the openveo server url\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/token');\n\n// Replace {CLIENT_ID} and {CLIENT_SECRET} by your credentials\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Basic ' . base64_encode('{CLIENT_ID}:{CLIENT_SECRET}'),\n  'Content-Type: application/json'\n));\n\n// Set oauth grant type to client_credentials\ncurl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode(array(\n    'grant_type' => 'client_credentials'\n  )\n));\n\n$resultWithToken = json_decode(curl_exec($curlHandle));\n\n\n\n\nAuthenticate a request\n\n\nAll requests to the Web Service must be authenticated using the HTTP header:\n\n\n\n\n'Authorization: Bearer TOKEN'\n (Replace TOKEN by your access token)\n\n\n\n\nPHP example\n\n\n// Get the list of videos\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/taxonomies');\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Bearer ' . $resultWithToken->access_token\n));\n\n// Got the list of videos\n$videos = json_decode(curl_exec($curlHandle));\n\n\n\n\nEndpoints\n\n\nTaxonomies\n\n\nGet taxonomies.\n\n\nGET WEB_SERVICE_URL/taxonomies\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on taxonomy names\n\n\n\n\n\n\nuseSmartSearch\n\n\nNumber\n\n\nNo\n\n\n1\n\n\n1\n to use a more advanced search mechanism, \n0\n to use a simple search based on a regular expression\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nThe field to use to sort taxonomies. Only \nname\n is available right now\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nThe sort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nThe limit the number of taxonomies per page\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned taxonomies\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned taxonomies. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of taxonomies\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"1443533344313\",\n      \"name\": \"Taxonomy 1\",\n      \"tree\": [\n        {\n          \"id\": \"1445433239636\",\n          \"items\": [],\n          \"title\": \"Term 1\"\n        }\n      ]\n    },\n    {\n      \"id\": \"1333443134453\",\n      \"name\": \"Taxonomy 2\",\n      \"tree\": [\n        {\n          \"id\": \"3239636144543\",\n          \"items\": [],\n          \"title\": \"Term 1\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet a taxonomy.\n\n\nGET WEB_SERVICE_URL/taxonomies/{taxonomy_id}\n\n\n\nWith \n{taxonomy_id}\n the id of the taxonomy to retrieve.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned taxonomy\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned taxonomy. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the taxonomy\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nTaxonomy not found\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"name\": \"My taxonomy\",\n    \"id\": \"{taxonomy_id}\",\n    \"tree\": []\n  }\n}\n\n\n\n\n\n\nGet the list of terms of a taxonomy.\n\n\nGET WEB_SERVICE_URL/taxonomies/{taxonomy_id}/terms\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the taxonomy terms\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"terms\": [\n    {\n      \"id\": \"1445433239636\",\n      \"title\": \"Term 1\",\n      \"items\": [\n        {\n          \"id\": \"1445433239637\",\n          \"items\": [],\n          \"title\": \"Sub term 1\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Term 2\",\n      \"id\": \"1333443134453\",\n      \"items\": []\n    }\n  ]\n}\n\n\n\n\n\n\nAdd taxonomies.\n\n\nPUT WEB_SERVICE_URL/taxonomies\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe taxonomy name\n\n\n\n\n\n\ntree\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of terms for the taxonomy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe taxonomies have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"name\": \"My taxonomy\",\n      \"id\": \"41U3sYipg\",\n      \"tree\": []\n    },\n    ...\n  ],\n  \"total\": 42\n}\n\n\n\n\n\n\nUpdate a taxonomy.\n\n\nPOST WEB_SERVICE_URL/taxonomies/{taxonomy_id}\n\n\n\nWith \n{taxonomy_id}\n the id of the taxonomy to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe taxonomy name\n\n\n\n\n\n\ntree\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of terms for this taxonomy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe taxonomy has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id or body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete taxonomies.\n\n\nDELETE WEB_SERVICE_URL/taxonomies/{taxonomy_id}\n\n\n\nWith \n{taxonomy_id}\n a comma separated list of taxonomy ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe taxonomies have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nGroups\n\n\nGet groups.\n\n\nGET WEB_SERVICE_URL/groups\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on both group names and descriptions\n\n\n\n\n\n\nuseSmartSearch\n\n\nNumber\n\n\nNo\n\n\n1\n\n\n1\n to use a more advanced search mechanism, \n0\n to use a simple search based on a regular expression\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nThe field to use to sort groups (either \nname\n or \ndescription\n)\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nThe sort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nThe limit the number of groups per page\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned groups\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned groups. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of groups\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"Nk0fPIulZ\",\n      \"name\": \"Group name\",\n      \"description\": \"Group description\"\n    },\n    {\n      \"id\": \"VJfQDIul-\",\n      \"name\": \"Group name\",\n      \"description\": \"Group description\"\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet a group.\n\n\nGET WEB_SERVICE_URL/groups/{group_id}\n\n\n\nWith \n{group_id}\n the id of the group to retrieve.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned group\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned group. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the group\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the group\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nGroup not found\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"id\": \"{group_id}\",\n    \"name\": \"Group name\",\n    \"description\": \"Group description\"\n  }\n}\n\n\n\n\n\n\nAdd groups.\n\n\nPUT WEB_SERVICE_URL/groups\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe group name\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe group description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe groups have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"Group name\",\n      \"description\": \"Group description\"\n    },\n    ...\n  ],\n  \"total\": 42\n}\n\n\n\n\n\n\nUpdate a group.\n\n\nPOST WEB_SERVICE_URL/groups/{group_id}\n\n\n\nWith \n{group_id}\n the id of the group to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe group name\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe group description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe group has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the group id or the body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete groups.\n\n\nDELETE WEB_SERVICE_URL/groups/{group_id}\n\n\n\nWith \n{group_id}\n a comma separated list of group ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe groups have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the group ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nRoles\n\n\nGet roles.\n\n\nGET WEB_SERVICE_URL/roles\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on role names\n\n\n\n\n\n\nuseSmartSearch\n\n\nNumber\n\n\nNo\n\n\n1\n\n\n1\n to use a more advanced search mechanism, \n0\n to use a simple search based on a regular expression\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nThe field to use to sort results, only \nname\n is available right now\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nThe sort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nThe limit the number of roles per page\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned roles\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned roles. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of roles\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"4J5KIL_lb\",\n      \"name\": \"Role name\",\n      \"permissions\" : [...]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet a role.\n\n\nGET WEB_SERVICE_URL/roles/{role_id}\n\n\n\nWith \n{role_id}\n the id of the role to retrieve.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned role\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned role. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the role\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the role\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nRole not found\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"id\": \"{role_id}\",\n    \"name\": \"Role name\",\n    \"permissions\" : [...]\n  }\n}\n\n\n\n\n\n\nAdd roles.\n\n\nPUT WEB_SERVICE_URL/roles\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe role name\n\n\n\n\n\n\npermissions\n\n\nArray\n\n\nYes\n\n\n-\n\n\nThe role permssions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe roles have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"Role name\",\n      \"permissions\" : [...]\n    },\n    ...\n  ],\n  \"total\": 42\n}\n\n\n\n\n\n\nUpdate a role.\n\n\nPOST WEB_SERVICE_URL/roles/{role_id}\n\n\n\nWith \n{role_id}\n the id of the role to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe role name\n\n\n\n\n\n\npermissions\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe role permssions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe role has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the role id or the body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete roles.\n\n\nDELETE WEB_SERVICE_URL/roles/{role_id}\n\n\n\nWith \n{role_id}\n a comma separated list of role ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe roles have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the role ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nUsers\n\n\nGet users.\n\n\nGET WEB_SERVICE_URL/users\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on user names\n\n\n\n\n\n\nuseSmartSearch\n\n\nNumber\n\n\nNo\n\n\n1\n\n\n1\n to use a more advanced search mechanism, \n0\n to use a simple search based on a regular expression\n\n\n\n\n\n\norigin\n\n\nString\n\n\nNo\n\n\nall\n\n\nThe users origin (either \ncas\n, \nldap\n, \nlocal\n or \nall\n)\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nThe field to use to sort users. Only \nname\n is available right now\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nThe sort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nThe limit the number of users per page\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned users\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned users. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of users\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"42\",\n      \"name\": \"User name\",\n      \"email\": \"user.mail@company.com\",\n      \"origin\": \"local\",\n      \"locked\": false,\n      \"roles\": [\"role1\"]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet a user.\n\n\nGET WEB_SERVICE_URL/users/{user_id}\n\n\n\nWith \n{user_id}\n the id of the user to retrieve.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned user\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned user. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the user\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the user\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nUser not found\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"id\": \"{user_id}\",\n    \"name\": \"User name\",\n    \"password\": \"38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\",\n    \"email\": \"user.mail@company.com\",\n    \"origin\": \"local\",\n    \"locked\": false,\n    \"roles\": [\"role1\"]\n  }\n}\n\n\n\n\n\n\nAdd users.\n\n\nPUT WEB_SERVICE_URL/users\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe user name\n\n\n\n\n\n\nemail\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe user email\n\n\n\n\n\n\npassword\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe user password\n\n\n\n\n\n\npasswordValidate\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe user password validation\n\n\n\n\n\n\nroles\n\n\nArray\n\n\nNo\n\n\n-\n\n\nTo user roles\n\n\n\n\n\n\nlocked\n\n\nBoolean\n\n\nNo\n\n\n-\n\n\nTo lock the user from edition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe users have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"User name\",\n      \"password\": \"38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\",\n      \"email\": \"user.mail@company.com\",\n      \"origin\": \"local\",\n      \"locked\": false,\n      \"roles\": [\"role1\"]\n    },\n    ...\n  ],\n  \"total\": 42\n}\n\n\n\n\n\n\nUpdate a user.\n\n\nPOST WEB_SERVICE_URL/users/{user_id}\n\n\n\nWith \n{user_id}\n the id of the user to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe user name\n\n\n\n\n\n\nemail\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe user email\n\n\n\n\n\n\npassword\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe user password\n\n\n\n\n\n\npasswordValidate\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe user password validation\n\n\n\n\n\n\nroles\n\n\nArray\n\n\nNo\n\n\n-\n\n\nTo user roles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe user has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the user id or the body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete users.\n\n\nDELETE WEB_SERVICE_URL/users/{user_id}\n\n\n\nWith \n{user_id}\n a comma separated list of user ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe users have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the user ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nApplications\n\n\nGet applications.\n\n\nGET WEB_SERVICE_URL/applications\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on application names\n\n\n\n\n\n\nuseSmartSearch\n\n\nNumber\n\n\nNo\n\n\n1\n\n\n1\n to use a more advanced search mechanism, \n0\n to use a simple search based on a regular expression\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nThe field to use to sort applications. Only \nname\n is available right now\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nThe sort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nThe limit the number of applications per page\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned applications\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned applications. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of applications\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"4J6CUL_gZ\",\n      \"name\": \"Application name\",\n      \"scopes\": [...],\n      \"secret\" : \"179a905785d4258bba255ffb812a25f2225f7d4c\"\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet an application.\n\n\nGET WEB_SERVICE_URL/applications/{application_id}\n\n\n\nWith \n{application_id}\n the id of the application to retrieve.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned application\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned application. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the application\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the application\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nApplication not found\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"id\": \"{application_id}\",\n    \"name\": \"Application name\",\n    \"scopes\": [...],\n    \"secret\" : \"179a905785d4258bba255ffb812a25f2225f7d4c\"\n  }\n}\n\n\n\n\n\n\nAdd applications.\n\n\nPUT WEB_SERVICE_URL/applications\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe application name\n\n\n\n\n\n\nscopes\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe application scopes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe applications have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"Application name\",\n      \"scopes\": [...],\n      \"secret\": \"179a905785d4258bba255ffb812a25f2225f7d4c\"\n    },\n    ...\n  ],\n  \"total\": 42\n}\n\n\n\n\n\n\nUpdate an application.\n\n\nPOST WEB_SERVICE_URL/applications/{application_id}\n\n\n\nWith \n{application_id}\n the id of the application to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe application name\n\n\n\n\n\n\nscopes\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe application scopes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe application has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the application id or the body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete applications.\n\n\nDELETE WEB_SERVICE_URL/applications/{application_id}\n\n\n\nWith \n{application_id}\n a comma separated list of application ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe applications have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the application ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nSettings\n\n\nGet settings.\n\n\nGET WEB_SERVICE_URL/settings\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nThe sort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nThe limit the number of settings per page\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of settings\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"my-setting\",\n      \"value\": \"Mixed value\"\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet a setting.\n\n\nGET WEB_SERVICE_URL/settings/{setting_id}\n\n\n\nWith \n{setting_id}\n the id of the setting to retrieve.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the setting\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the setting\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"id\": \"my-setting\",\n    \"value\": \"Mixed value\"\n  }\n}\n\n\n\n\n\n\nAdd settings.\n\n\nIf a setting already exists it will be updated.\n\n\nPUT WEB_SERVICE_URL/settings\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe setting id\n\n\n\n\n\n\nvalue\n\n\nMixed\n\n\nYes\n\n\n-\n\n\nThe setting value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe settings have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing setting ids in body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"my-setting\",\n      \"value\": \"Mixed value\"\n    },\n    ...\n  ],\n  \"total\": 42\n}\n\n\n\n\n\n\nUpdate a setting.\n\n\nPOST WEB_SERVICE_URL/settings/{setting_id}\n\n\n\nWith \n{setting_id}\n the id of the setting to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nMixed\n\n\nNo\n\n\n-\n\n\nThe setting value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe setting has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the setting id or the body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete settings.\n\n\nDELETE WEB_SERVICE_URL/settings/{setting_id}\n\n\n\nWith \n{setting_id}\n a comma separated list of setting ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe settings have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the setting id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nClient libraries\n\n\nPHP client\n\n\nA \nPHP client\n is also available on Github to help interface with OpenVeo Web Service.\n\n\nNodeJS client\n\n\nA \nNodeJS client\n is also available on Github to help interface with OpenVeo Web Service.",
            "title": "Web Service"
        },
        {
            "location": "/web-service/#introduction",
            "text": "OpenVeo offers a Web Service which must be started as a different process and needs some extra configuration.",
            "title": "Introduction"
        },
        {
            "location": "/web-service/#configure-the-web-service",
            "text": "Open  ~openveo/core/serverConf.json  {\n  \"ws\" : {\n    \"port\" : PORT // Replace PORT by the HTTP server port to use (e.g. 3002)\n  }\n}",
            "title": "Configure the Web Service"
        },
        {
            "location": "/web-service/#configure-the-web-service-logger",
            "text": "Open  ~openveo/core/loggerConf.json  {\n  \"ws\" : {\n    \"fileName\" : \"/var/log/openveo/openveo-ws.log\", // Path to web service log file\n    \"level\" : \"info\", // Log level\n    \"maxFileSize\" : 104857600, // Maximum log file size (in Bytes)\n    \"maxFiles\" : 2 // Maximum number of files archived\n  }\n}",
            "title": "Configure the Web Service logger"
        },
        {
            "location": "/web-service/#launch-the-web-service",
            "text": "If you want to interact with OpenVeo through the Web Service, you need to start it.\nTo start the OpenVeo Web Service, just use the  -ws  option:  node server.js -ws",
            "title": "Launch the Web Service"
        },
        {
            "location": "/web-service/#authenticate-to-the-web-service",
            "text": "The Web Service uses  OAuth2  for authentication.",
            "title": "Authenticate to the Web Service"
        },
        {
            "location": "/web-service/#get-a-client-id-and-client-secret",
            "text": "You can create a new application with a client id and a client secret through the back end ( http://localhost:PORT/be/applications-list ).",
            "title": "Get a client id and client secret"
        },
        {
            "location": "/web-service/#get-an-access-token",
            "text": "To make Web Service requests you will need an Access token. To get an Access token, you must make an HTTP POST request on  /token .  Expected headers :   'Authorization: Basic CREDENTIALS'  (Replace CREDENTIALS by \"CLIENT_ID:CLIENT_SECRET\" encoded in base 64)   Expected POST parameters :   'grant_type' => 'client_credentials'   You will receive an Access token to authenticate each Web Service requests.",
            "title": "Get an access token"
        },
        {
            "location": "/web-service/#php-example",
            "text": "$curlCookieJar = tempnam(sys_get_temp_dir(), \"cookies_\");\n\n// Initialize a curl session\n$curlHandle = curl_init();\n\n// Default curl options for all future requests\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($curlHandle, CURLOPT_COOKIESESSION, false);\ncurl_setopt($curlHandle, CURLOPT_COOKIEJAR, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_COOKIEFILE, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_HEADER, false);\ncurl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 1);\ncurl_setopt($curlHandle, CURLOPT_TIMEOUT, 30);\n\n// Retrieve an oauth token\n// Use HTTP POST method\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'POST');\n\n// Replace {OPENVEO_URL} by the openveo server url\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/token');\n\n// Replace {CLIENT_ID} and {CLIENT_SECRET} by your credentials\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Basic ' . base64_encode('{CLIENT_ID}:{CLIENT_SECRET}'),\n  'Content-Type: application/json'\n));\n\n// Set oauth grant type to client_credentials\ncurl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode(array(\n    'grant_type' => 'client_credentials'\n  )\n));\n\n$resultWithToken = json_decode(curl_exec($curlHandle));",
            "title": "PHP example"
        },
        {
            "location": "/web-service/#authenticate-a-request",
            "text": "All requests to the Web Service must be authenticated using the HTTP header:   'Authorization: Bearer TOKEN'  (Replace TOKEN by your access token)",
            "title": "Authenticate a request"
        },
        {
            "location": "/web-service/#php-example_1",
            "text": "// Get the list of videos\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/taxonomies');\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Bearer ' . $resultWithToken->access_token\n));\n\n// Got the list of videos\n$videos = json_decode(curl_exec($curlHandle));",
            "title": "PHP example"
        },
        {
            "location": "/web-service/#endpoints",
            "text": "",
            "title": "Endpoints"
        },
        {
            "location": "/web-service/#taxonomies",
            "text": "Get taxonomies.  GET WEB_SERVICE_URL/taxonomies     Name  Type  Required  Default  Details      query  String  No  -  To search on taxonomy names    useSmartSearch  Number  No  1  1  to use a more advanced search mechanism,  0  to use a simple search based on a regular expression    sortBy  String  No  name  The field to use to sort taxonomies. Only  name  is available right now    sortOrder  String  No  desc  The sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  The limit the number of taxonomies per page    include  Array  No  -  The list of fields to include from returned taxonomies    exclude  Array  No  -  The list of fields to exclude from returned taxonomies. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of taxonomies    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"1443533344313\",\n      \"name\": \"Taxonomy 1\",\n      \"tree\": [\n        {\n          \"id\": \"1445433239636\",\n          \"items\": [],\n          \"title\": \"Term 1\"\n        }\n      ]\n    },\n    {\n      \"id\": \"1333443134453\",\n      \"name\": \"Taxonomy 2\",\n      \"tree\": [\n        {\n          \"id\": \"3239636144543\",\n          \"items\": [],\n          \"title\": \"Term 1\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get a taxonomy.  GET WEB_SERVICE_URL/taxonomies/{taxonomy_id}  With  {taxonomy_id}  the id of the taxonomy to retrieve.     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned taxonomy    exclude  Array  No  -  The list of fields to exclude from returned taxonomy. Ignored if include is also specified        HTTP Status Code  Details      200  Got the taxonomy    500  An error occured on the server side    400  Missing the taxonomy id    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  Taxonomy not found     {\n  \"entity\": {\n    \"name\": \"My taxonomy\",\n    \"id\": \"{taxonomy_id}\",\n    \"tree\": []\n  }\n}   Get the list of terms of a taxonomy.  GET WEB_SERVICE_URL/taxonomies/{taxonomy_id}/terms     HTTP Status Code  Details      200  Got the taxonomy terms    500  An error occured on the server side    400  Missing the taxonomy id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"terms\": [\n    {\n      \"id\": \"1445433239636\",\n      \"title\": \"Term 1\",\n      \"items\": [\n        {\n          \"id\": \"1445433239637\",\n          \"items\": [],\n          \"title\": \"Sub term 1\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Term 2\",\n      \"id\": \"1333443134453\",\n      \"items\": []\n    }\n  ]\n}   Add taxonomies.  PUT WEB_SERVICE_URL/taxonomies  Expects an Array of objects containing:     Name  Type  Required  Default  Details      name  String  Yes  -  The taxonomy name    tree  Array  No  -  The list of terms for the taxonomy        HTTP Status Code  Details      200  The taxonomies have been added    500  An error occured on the server side    400  Missing body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"name\": \"My taxonomy\",\n      \"id\": \"41U3sYipg\",\n      \"tree\": []\n    },\n    ...\n  ],\n  \"total\": 42\n}   Update a taxonomy.  POST WEB_SERVICE_URL/taxonomies/{taxonomy_id}  With  {taxonomy_id}  the id of the taxonomy to update.     Name  Type  Required  Default  Details      name  String  No  -  The taxonomy name    tree  Array  No  -  The list of terms for this taxonomy        HTTP Status Code  Details      200  The taxonomy has been updated    500  An error occured on the server side    400  Missing the taxonomy id or body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete taxonomies.  DELETE WEB_SERVICE_URL/taxonomies/{taxonomy_id}  With  {taxonomy_id}  a comma separated list of taxonomy ids to delete.     HTTP Status Code  Details      200  The taxonomies have been deleted    500  An error occured on the server side    400  Missing the taxonomy ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Taxonomies"
        },
        {
            "location": "/web-service/#groups",
            "text": "Get groups.  GET WEB_SERVICE_URL/groups     Name  Type  Required  Default  Details      query  String  No  -  To search on both group names and descriptions    useSmartSearch  Number  No  1  1  to use a more advanced search mechanism,  0  to use a simple search based on a regular expression    sortBy  String  No  name  The field to use to sort groups (either  name  or  description )    sortOrder  String  No  desc  The sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  The limit the number of groups per page    include  Array  No  -  The list of fields to include from returned groups    exclude  Array  No  -  The list of fields to exclude from returned groups. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of groups    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"Nk0fPIulZ\",\n      \"name\": \"Group name\",\n      \"description\": \"Group description\"\n    },\n    {\n      \"id\": \"VJfQDIul-\",\n      \"name\": \"Group name\",\n      \"description\": \"Group description\"\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get a group.  GET WEB_SERVICE_URL/groups/{group_id}  With  {group_id}  the id of the group to retrieve.     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned group    exclude  Array  No  -  The list of fields to exclude from returned group. Ignored if include is also specified        HTTP Status Code  Details      200  Got the group    500  An error occured on the server side    400  Missing the id of the group    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  Group not found     {\n  \"entity\": {\n    \"id\": \"{group_id}\",\n    \"name\": \"Group name\",\n    \"description\": \"Group description\"\n  }\n}   Add groups.  PUT WEB_SERVICE_URL/groups  Expects an Array of objects containing:     Name  Type  Required  Default  Details      name  String  Yes  -  The group name    description  String  Yes  -  The group description        HTTP Status Code  Details      200  The groups have been added    500  An error occured on the server side    400  Missing body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"Group name\",\n      \"description\": \"Group description\"\n    },\n    ...\n  ],\n  \"total\": 42\n}   Update a group.  POST WEB_SERVICE_URL/groups/{group_id}  With  {group_id}  the id of the group to update.     Name  Type  Required  Default  Details      name  String  No  -  The group name    description  String  No  -  The group description        HTTP Status Code  Details      200  The group has been updated    500  An error occured on the server side    400  Missing the group id or the body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete groups.  DELETE WEB_SERVICE_URL/groups/{group_id}  With  {group_id}  a comma separated list of group ids to delete.     HTTP Status Code  Details      200  The groups have been deleted    500  An error occured on the server side    400  Missing the group ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Groups"
        },
        {
            "location": "/web-service/#roles",
            "text": "Get roles.  GET WEB_SERVICE_URL/roles     Name  Type  Required  Default  Details      query  String  No  -  To search on role names    useSmartSearch  Number  No  1  1  to use a more advanced search mechanism,  0  to use a simple search based on a regular expression    sortBy  String  No  name  The field to use to sort results, only  name  is available right now    sortOrder  String  No  desc  The sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  The limit the number of roles per page    include  Array  No  -  The list of fields to include from returned roles    exclude  Array  No  -  The list of fields to exclude from returned roles. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of roles    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"4J5KIL_lb\",\n      \"name\": \"Role name\",\n      \"permissions\" : [...]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get a role.  GET WEB_SERVICE_URL/roles/{role_id}  With  {role_id}  the id of the role to retrieve.     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned role    exclude  Array  No  -  The list of fields to exclude from returned role. Ignored if include is also specified        HTTP Status Code  Details      200  Got the role    500  An error occured on the server side    400  Missing the id of the role    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  Role not found     {\n  \"entity\": {\n    \"id\": \"{role_id}\",\n    \"name\": \"Role name\",\n    \"permissions\" : [...]\n  }\n}   Add roles.  PUT WEB_SERVICE_URL/roles  Expects an Array of objects containing:     Name  Type  Required  Default  Details      name  String  Yes  -  The role name    permissions  Array  Yes  -  The role permssions        HTTP Status Code  Details      200  The roles have been added    500  An error occured on the server side    400  Missing body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"Role name\",\n      \"permissions\" : [...]\n    },\n    ...\n  ],\n  \"total\": 42\n}   Update a role.  POST WEB_SERVICE_URL/roles/{role_id}  With  {role_id}  the id of the role to update.     Name  Type  Required  Default  Details      name  String  No  -  The role name    permissions  Array  No  -  The role permssions        HTTP Status Code  Details      200  The role has been updated    500  An error occured on the server side    400  Missing the role id or the body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete roles.  DELETE WEB_SERVICE_URL/roles/{role_id}  With  {role_id}  a comma separated list of role ids to delete.     HTTP Status Code  Details      200  The roles have been deleted    500  An error occured on the server side    400  Missing the role ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Roles"
        },
        {
            "location": "/web-service/#users",
            "text": "Get users.  GET WEB_SERVICE_URL/users     Name  Type  Required  Default  Details      query  String  No  -  To search on user names    useSmartSearch  Number  No  1  1  to use a more advanced search mechanism,  0  to use a simple search based on a regular expression    origin  String  No  all  The users origin (either  cas ,  ldap ,  local  or  all )    sortBy  String  No  name  The field to use to sort users. Only  name  is available right now    sortOrder  String  No  desc  The sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  The limit the number of users per page    include  Array  No  -  The list of fields to include from returned users    exclude  Array  No  -  The list of fields to exclude from returned users. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of users    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"42\",\n      \"name\": \"User name\",\n      \"email\": \"user.mail@company.com\",\n      \"origin\": \"local\",\n      \"locked\": false,\n      \"roles\": [\"role1\"]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get a user.  GET WEB_SERVICE_URL/users/{user_id}  With  {user_id}  the id of the user to retrieve.     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned user    exclude  Array  No  -  The list of fields to exclude from returned user. Ignored if include is also specified        HTTP Status Code  Details      200  Got the user    500  An error occured on the server side    400  Missing the id of the user    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  User not found     {\n  \"entity\": {\n    \"id\": \"{user_id}\",\n    \"name\": \"User name\",\n    \"password\": \"38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\",\n    \"email\": \"user.mail@company.com\",\n    \"origin\": \"local\",\n    \"locked\": false,\n    \"roles\": [\"role1\"]\n  }\n}   Add users.  PUT WEB_SERVICE_URL/users  Expects an Array of objects containing:     Name  Type  Required  Default  Details      name  String  Yes  -  The user name    email  String  Yes  -  The user email    password  String  Yes  -  The user password    passwordValidate  String  Yes  -  The user password validation    roles  Array  No  -  To user roles    locked  Boolean  No  -  To lock the user from edition        HTTP Status Code  Details      200  The users have been added    500  An error occured on the server side    400  Missing body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"User name\",\n      \"password\": \"38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\",\n      \"email\": \"user.mail@company.com\",\n      \"origin\": \"local\",\n      \"locked\": false,\n      \"roles\": [\"role1\"]\n    },\n    ...\n  ],\n  \"total\": 42\n}   Update a user.  POST WEB_SERVICE_URL/users/{user_id}  With  {user_id}  the id of the user to update.     Name  Type  Required  Default  Details      name  String  No  -  The user name    email  String  No  -  The user email    password  String  No  -  The user password    passwordValidate  String  No  -  The user password validation    roles  Array  No  -  To user roles        HTTP Status Code  Details      200  The user has been updated    500  An error occured on the server side    400  Missing the user id or the body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete users.  DELETE WEB_SERVICE_URL/users/{user_id}  With  {user_id}  a comma separated list of user ids to delete.     HTTP Status Code  Details      200  The users have been deleted    500  An error occured on the server side    400  Missing the user ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Users"
        },
        {
            "location": "/web-service/#applications",
            "text": "Get applications.  GET WEB_SERVICE_URL/applications     Name  Type  Required  Default  Details      query  String  No  -  To search on application names    useSmartSearch  Number  No  1  1  to use a more advanced search mechanism,  0  to use a simple search based on a regular expression    sortBy  String  No  name  The field to use to sort applications. Only  name  is available right now    sortOrder  String  No  desc  The sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  The limit the number of applications per page    include  Array  No  -  The list of fields to include from returned applications    exclude  Array  No  -  The list of fields to exclude from returned applications. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of applications    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"4J6CUL_gZ\",\n      \"name\": \"Application name\",\n      \"scopes\": [...],\n      \"secret\" : \"179a905785d4258bba255ffb812a25f2225f7d4c\"\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get an application.  GET WEB_SERVICE_URL/applications/{application_id}  With  {application_id}  the id of the application to retrieve.     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned application    exclude  Array  No  -  The list of fields to exclude from returned application. Ignored if include is also specified        HTTP Status Code  Details      200  Got the application    500  An error occured on the server side    400  Missing the id of the application    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  Application not found     {\n  \"entity\": {\n    \"id\": \"{application_id}\",\n    \"name\": \"Application name\",\n    \"scopes\": [...],\n    \"secret\" : \"179a905785d4258bba255ffb812a25f2225f7d4c\"\n  }\n}   Add applications.  PUT WEB_SERVICE_URL/applications  Expects an Array of objects containing:     Name  Type  Required  Default  Details      name  String  Yes  -  The application name    scopes  Array  No  -  The application scopes        HTTP Status Code  Details      200  The applications have been added    500  An error occured on the server side    400  Missing the body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"41U3sYipg\",\n      \"name\": \"Application name\",\n      \"scopes\": [...],\n      \"secret\": \"179a905785d4258bba255ffb812a25f2225f7d4c\"\n    },\n    ...\n  ],\n  \"total\": 42\n}   Update an application.  POST WEB_SERVICE_URL/applications/{application_id}  With  {application_id}  the id of the application to update.     Name  Type  Required  Default  Details      name  String  No  -  The application name    scopes  Array  No  -  The application scopes        HTTP Status Code  Details      200  The application has been updated    500  An error occured on the server side    400  Missing the application id or the body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete applications.  DELETE WEB_SERVICE_URL/applications/{application_id}  With  {application_id}  a comma separated list of application ids to delete.     HTTP Status Code  Details      200  The applications have been deleted    500  An error occured on the server side    400  Missing the application ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Applications"
        },
        {
            "location": "/web-service/#settings",
            "text": "Get settings.  GET WEB_SERVICE_URL/settings     Name  Type  Required  Default  Details      sortOrder  String  No  desc  The sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  The limit the number of settings per page        HTTP Status Code  Details      200  Got the list of settings    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"my-setting\",\n      \"value\": \"Mixed value\"\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 1,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get a setting.  GET WEB_SERVICE_URL/settings/{setting_id}  With  {setting_id}  the id of the setting to retrieve.     HTTP Status Code  Details      200  Got the setting    500  An error occured on the server side    400  Missing the id of the setting    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entity\": {\n    \"id\": \"my-setting\",\n    \"value\": \"Mixed value\"\n  }\n}   Add settings.  If a setting already exists it will be updated.  PUT WEB_SERVICE_URL/settings  Expects an Array of objects containing:     Name  Type  Required  Default  Details      id  String  Yes  -  The setting id    value  Mixed  Yes  -  The setting value        HTTP Status Code  Details      200  The settings have been added    500  An error occured on the server side    400  Missing setting ids in body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"my-setting\",\n      \"value\": \"Mixed value\"\n    },\n    ...\n  ],\n  \"total\": 42\n}   Update a setting.  POST WEB_SERVICE_URL/settings/{setting_id}  With  {setting_id}  the id of the setting to update.     Name  Type  Required  Default  Details      value  Mixed  No  -  The setting value        HTTP Status Code  Details      200  The setting has been updated    500  An error occured on the server side    400  Missing the setting id or the body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete settings.  DELETE WEB_SERVICE_URL/settings/{setting_id}  With  {setting_id}  a comma separated list of setting ids to delete.     HTTP Status Code  Details      200  The settings have been deleted    500  An error occured on the server side    400  Missing the setting id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Settings"
        },
        {
            "location": "/web-service/#client-libraries",
            "text": "",
            "title": "Client libraries"
        },
        {
            "location": "/web-service/#php-client",
            "text": "A  PHP client  is also available on Github to help interface with OpenVeo Web Service.",
            "title": "PHP client"
        },
        {
            "location": "/web-service/#nodejs-client",
            "text": "A  NodeJS client  is also available on Github to help interface with OpenVeo Web Service.",
            "title": "NodeJS client"
        },
        {
            "location": "/advanced-configuration/",
            "text": "Introduction\n\n\nConfiguration files are all in user's directory under \n~/.openveo/core\n\n\n\n\n~/.openveo/core/conf.json\n\n\n~/.openveo/core/databaseConf.json\n\n\n~/.openveo/core/loggerConf.json\n\n\n~/.openveo/core/serverConf.json\n\n\n\n\nNb :\n You must restart OpenVeo servers after modifications.\n\n\nConfigure OpenVeo\n\n\nOpen \n~/.openveo/core/conf.json\n\n\n{\n  \"passwordHashKey\" : \"KEY\", // Replace KEY by a secret key used to encrypt users passwords\n  \"cdn\" : {\n    \"url\": \"CDN_URL\" // Replace CDN_URL by the url of the OpenVeo CDN (actually the OpenVeo server url)\n  }\n}\n\n\n\n\nConfigure database access\n\n\nOpen \n~/.openveo/core/databaseConf.json\n\n\n{\n  \"type\" : \"mongodb\", // Do not change. Only MongoDB is available right now\n  \"host\" : \"localhost\", // Database server host\n  \"port\" : 27017, // Database port\n  \"database\" : \"DATABASE_NAME\", // Replace DATABASE_NAME by the name of the OpenVeo database\n  \"username\" : \"DATABASE_USER_NAME\", // Replace DATABASE_USER_NAME by the name of the database user\n  \"password\" : \"DATABASE_USER_PWD\" // Replace DATABASE_USER_PWD by the password of the database user\n}\n\n\n\n\nConfigure the logger\n\n\nOpen \n~/.openveo/core/loggerConf.json\n\n\n{\n  \"app\" : {\n    \"fileName\" : \"/var/log/openveo/openveo.log\", // Path to application log file\n    \"level\" : \"info\", // Log level\n    \"maxFileSize\" : 104857600, // Maximum log file size (in Bytes)\n    \"maxFiles\" : 2 // Maximum number of files archived\n  },\n  \"ws\" : {\n    \"fileName\" : \"/var/log/openveo/openveo-ws.log\", // Path to the web service log file\n    \"level\" : \"info\", // Log level\n    \"maxFileSize\" : 104857600, // Maximum log file size (in Bytes)\n    \"maxFiles\" : 2 // Maximum number of files archived\n  }\n}\n\n\n\n\nConfigure the server\n\n\nOpen \n~/.openveo/core/serverConf.json\n\n\n{\n  \"app\" : {\n    \"httpPort\" : HTTP_PORT, // Replace HTTP_PORT by the HTTP server port to use (e.g. 3000)\n    \"socketPort\" : SOCKET_PORT, // Replace SOCKET_PORT by the socket server port to use (e.g. 3001)\n    \"browserSocketPort\" : SOCKET_PORT, // Replace SOCKET_PORT by the port of the socket server to connect to from the browser (e.g. 3001)\n    \"sessionSecret\" : \"SECRET\", // Replace SECRET by a secret used to secure HTTP sessions\n    \"auth\": {\n      \"cas\": { // CAS configuration\n        \"version\": \"3\", // The version of the CAS server\n        \"service\": \"https://my-openveo-portal.test\", // The service to use to authenticate to the CAS server\n        \"url\": \"https://my-cas-server.test:8443/cas\", // The url of the CAS server\n        \"userGroupAttribute\": \"group\", // The name of the CAS attribute holding the group name of a user\n        \"userIdAttribute\": \"id\", // The name of the CAS attribute holding the unique id of a user\n        \"userNameAttribute\": \"name\", // The name of the CAS attribute holding the name of a user\n        \"userEmailAttribute\": \"name\", // The name of the CAS attribute holding the email of a user\n        \"certificate\": \"/etc/ssl/certs/cas.crt\" // The absolute path of the CAS server certificate if root CA is not in the Node.JS well known CAs\n      },\n      \"ldapauth\": { // LDAP configuration\n        \"url\": \"ldaps://my-ldap.test\", // The url of the LDAP server\n        \"bindAttribute\": \"dn\", // The LDAP attribute used by \"bindDn\" (default to \"dn\")\n        \"bindDn\": \"cn=my-user,dc=my-ldap,dc=test\", // The value of the \"bindAttribute\" associated to the entry used to connect to the server API\n        \"bindPassword\": \"qT5gvobG2ZxYSiY2r4mt\", // The password of the entry used to connect to the server API\n        \"searchBase\": \"ou=user,dc=my-ldap,dc=test\", // The search base when looking for users\n        \"searchScope\": \"sub\", // The search scope when looking for users (default to \"sub\")\n        \"searchFilter\": \"(&(objectclass=person)(cn={{username}}))\", // The search filter to find user by name, use placeholder \"{{username}}\" which will be replaced by the user name when searching\n        \"userGroupAttribute\": \"group\", // The name of the LDAP attribute holding the group name of a user\n        \"userIdAttribute\": \"dn\", // The name of the LDAP attribute holding the unique id of a user\n        \"userNameAttribute\": \"cn\", // The name of the LDAP attribute holding the name of a user\n        \"userEmailAttribute\": \"email\", // The name of the LDAP attribute holding the email of a user\n        \"certificate\": \"/etc/ssl/certs/ldap.crt\" // The absolute path of the LDAP server certificate full chain if root CA is not in the Node.JS well known CAs\n      }\n    }\n  },\n  \"ws\": {\n    \"port\": WS_HTTP_PORT // Replace WS_HTTP_PORT by the HTTP server port to use (e.g. 3002)\n  }\n}",
            "title": "Advanced configuration"
        },
        {
            "location": "/advanced-configuration/#introduction",
            "text": "Configuration files are all in user's directory under  ~/.openveo/core   ~/.openveo/core/conf.json  ~/.openveo/core/databaseConf.json  ~/.openveo/core/loggerConf.json  ~/.openveo/core/serverConf.json   Nb :  You must restart OpenVeo servers after modifications.",
            "title": "Introduction"
        },
        {
            "location": "/advanced-configuration/#configure-openveo",
            "text": "Open  ~/.openveo/core/conf.json  {\n  \"passwordHashKey\" : \"KEY\", // Replace KEY by a secret key used to encrypt users passwords\n  \"cdn\" : {\n    \"url\": \"CDN_URL\" // Replace CDN_URL by the url of the OpenVeo CDN (actually the OpenVeo server url)\n  }\n}",
            "title": "Configure OpenVeo"
        },
        {
            "location": "/advanced-configuration/#configure-database-access",
            "text": "Open  ~/.openveo/core/databaseConf.json  {\n  \"type\" : \"mongodb\", // Do not change. Only MongoDB is available right now\n  \"host\" : \"localhost\", // Database server host\n  \"port\" : 27017, // Database port\n  \"database\" : \"DATABASE_NAME\", // Replace DATABASE_NAME by the name of the OpenVeo database\n  \"username\" : \"DATABASE_USER_NAME\", // Replace DATABASE_USER_NAME by the name of the database user\n  \"password\" : \"DATABASE_USER_PWD\" // Replace DATABASE_USER_PWD by the password of the database user\n}",
            "title": "Configure database access"
        },
        {
            "location": "/advanced-configuration/#configure-the-logger",
            "text": "Open  ~/.openveo/core/loggerConf.json  {\n  \"app\" : {\n    \"fileName\" : \"/var/log/openveo/openveo.log\", // Path to application log file\n    \"level\" : \"info\", // Log level\n    \"maxFileSize\" : 104857600, // Maximum log file size (in Bytes)\n    \"maxFiles\" : 2 // Maximum number of files archived\n  },\n  \"ws\" : {\n    \"fileName\" : \"/var/log/openveo/openveo-ws.log\", // Path to the web service log file\n    \"level\" : \"info\", // Log level\n    \"maxFileSize\" : 104857600, // Maximum log file size (in Bytes)\n    \"maxFiles\" : 2 // Maximum number of files archived\n  }\n}",
            "title": "Configure the logger"
        },
        {
            "location": "/advanced-configuration/#configure-the-server",
            "text": "Open  ~/.openveo/core/serverConf.json  {\n  \"app\" : {\n    \"httpPort\" : HTTP_PORT, // Replace HTTP_PORT by the HTTP server port to use (e.g. 3000)\n    \"socketPort\" : SOCKET_PORT, // Replace SOCKET_PORT by the socket server port to use (e.g. 3001)\n    \"browserSocketPort\" : SOCKET_PORT, // Replace SOCKET_PORT by the port of the socket server to connect to from the browser (e.g. 3001)\n    \"sessionSecret\" : \"SECRET\", // Replace SECRET by a secret used to secure HTTP sessions\n    \"auth\": {\n      \"cas\": { // CAS configuration\n        \"version\": \"3\", // The version of the CAS server\n        \"service\": \"https://my-openveo-portal.test\", // The service to use to authenticate to the CAS server\n        \"url\": \"https://my-cas-server.test:8443/cas\", // The url of the CAS server\n        \"userGroupAttribute\": \"group\", // The name of the CAS attribute holding the group name of a user\n        \"userIdAttribute\": \"id\", // The name of the CAS attribute holding the unique id of a user\n        \"userNameAttribute\": \"name\", // The name of the CAS attribute holding the name of a user\n        \"userEmailAttribute\": \"name\", // The name of the CAS attribute holding the email of a user\n        \"certificate\": \"/etc/ssl/certs/cas.crt\" // The absolute path of the CAS server certificate if root CA is not in the Node.JS well known CAs\n      },\n      \"ldapauth\": { // LDAP configuration\n        \"url\": \"ldaps://my-ldap.test\", // The url of the LDAP server\n        \"bindAttribute\": \"dn\", // The LDAP attribute used by \"bindDn\" (default to \"dn\")\n        \"bindDn\": \"cn=my-user,dc=my-ldap,dc=test\", // The value of the \"bindAttribute\" associated to the entry used to connect to the server API\n        \"bindPassword\": \"qT5gvobG2ZxYSiY2r4mt\", // The password of the entry used to connect to the server API\n        \"searchBase\": \"ou=user,dc=my-ldap,dc=test\", // The search base when looking for users\n        \"searchScope\": \"sub\", // The search scope when looking for users (default to \"sub\")\n        \"searchFilter\": \"(&(objectclass=person)(cn={{username}}))\", // The search filter to find user by name, use placeholder \"{{username}}\" which will be replaced by the user name when searching\n        \"userGroupAttribute\": \"group\", // The name of the LDAP attribute holding the group name of a user\n        \"userIdAttribute\": \"dn\", // The name of the LDAP attribute holding the unique id of a user\n        \"userNameAttribute\": \"cn\", // The name of the LDAP attribute holding the name of a user\n        \"userEmailAttribute\": \"email\", // The name of the LDAP attribute holding the email of a user\n        \"certificate\": \"/etc/ssl/certs/ldap.crt\" // The absolute path of the LDAP server certificate full chain if root CA is not in the Node.JS well known CAs\n      }\n    }\n  },\n  \"ws\": {\n    \"port\": WS_HTTP_PORT // Replace WS_HTTP_PORT by the HTTP server port to use (e.g. 3002)\n  }\n}",
            "title": "Configure the server"
        },
        {
            "location": "/plugins/",
            "text": "Plugins\n\n\nOpenVeo works with plugins to extend its features.\n\n\nOfficial plugins\n\n\nOfficial plugins are plugins developped and maintained by the OpenVeo team. They all are available on \nNPM OpenVeo scope\n.\n\n\nUnofficial plugins\n\n\nUnofficial plugins developped by the community must be prefixed by \nopenveo-\n and distributed under the \nAGPL-3.0 license\n.",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#plugins",
            "text": "OpenVeo works with plugins to extend its features.",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#official-plugins",
            "text": "Official plugins are plugins developped and maintained by the OpenVeo team. They all are available on  NPM OpenVeo scope .",
            "title": "Official plugins"
        },
        {
            "location": "/plugins/#unofficial-plugins",
            "text": "Unofficial plugins developped by the community must be prefixed by  openveo-  and distributed under the  AGPL-3.0 license .",
            "title": "Unofficial plugins"
        },
        {
            "location": "/scalability/",
            "text": "MongoDB database replication\n\n\nIf you want to take benefit of your \nMongoDB replication set\n, you can adapt your OpenVeo configuration.\n\n\nOpen \n~openveo/core/databaseConf.json\n and add a name for the ReplicaSet and a comma separated list of secondary servers.\n\n\n{\n  ...\n  \"replicaSet\" : \"REPLICA_SET_NAME\", // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n  \"seedlist\": \"IP_1:PORT_1,IP_2:PORT_2\" // The comma separated list of secondary servers\n}\n\n\n\n\n{\n  \"type\" : \"mongodb\", // Do not change\n  \"host\" : \"localhost\", // MongoDB server host\n  \"port\" : 27017, // MongoDB port\n  \"database\" : \"DATABASE_NAME\", // Replace DATABASE_NAME by the name of the OpenVeo database\n  \"username\" : \"DATABASE_USER_NAME\", // Replace DATABASE_USER_NAME by the name of the database user\n  \"password\" : \"DATABASE_USER_PWD\", // Replace DATABASE_USER_PWD  by the password of the database user\n  \"replicaSet\" : \"REPLICA_SET_NAME\", // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n  \"seedlist\": \"IP_1:PORT_1,IP_2:PORT_2\" // The comma separated list of secondary servers\n}",
            "title": "Scalability"
        },
        {
            "location": "/scalability/#mongodb-database-replication",
            "text": "If you want to take benefit of your  MongoDB replication set , you can adapt your OpenVeo configuration.  Open  ~openveo/core/databaseConf.json  and add a name for the ReplicaSet and a comma separated list of secondary servers.  {\n  ...\n  \"replicaSet\" : \"REPLICA_SET_NAME\", // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n  \"seedlist\": \"IP_1:PORT_1,IP_2:PORT_2\" // The comma separated list of secondary servers\n}  {\n  \"type\" : \"mongodb\", // Do not change\n  \"host\" : \"localhost\", // MongoDB server host\n  \"port\" : 27017, // MongoDB port\n  \"database\" : \"DATABASE_NAME\", // Replace DATABASE_NAME by the name of the OpenVeo database\n  \"username\" : \"DATABASE_USER_NAME\", // Replace DATABASE_USER_NAME by the name of the database user\n  \"password\" : \"DATABASE_USER_PWD\", // Replace DATABASE_USER_PWD  by the password of the database user\n  \"replicaSet\" : \"REPLICA_SET_NAME\", // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n  \"seedlist\": \"IP_1:PORT_1,IP_2:PORT_2\" // The comma separated list of secondary servers\n}",
            "title": "MongoDB database replication"
        },
        {
            "location": "/production/",
            "text": "Launch in production\n\n\nTo use OpenVeo in a production environment, start the server using \nNODE_ENV\n environment variable:\n\n\n# Starts OpenVeo application in production environment\nNODE_ENV=production node server.js\n\n# Starts OpenVeo Web Service in production environment\nNODE_ENV=production node server.js -ws\n\n\n\nNb :\n You should also consider launching the process as a deamon.\n\n\nReplicate database\n\n\nYou should consider replicating your database using \nMongoDB ReplicaSets\n. You can configure OpenVeo to \nuse your ReplicaSets\n.",
            "title": "Production"
        },
        {
            "location": "/production/#launch-in-production",
            "text": "To use OpenVeo in a production environment, start the server using  NODE_ENV  environment variable:  # Starts OpenVeo application in production environment\nNODE_ENV=production node server.js\n\n# Starts OpenVeo Web Service in production environment\nNODE_ENV=production node server.js -ws  Nb :  You should also consider launching the process as a deamon.",
            "title": "Launch in production"
        },
        {
            "location": "/production/#replicate-database",
            "text": "You should consider replicating your database using  MongoDB ReplicaSets . You can configure OpenVeo to  use your ReplicaSets .",
            "title": "Replicate database"
        },
        {
            "location": "/developers/basics/",
            "text": "HTTP server\n\n\nBased on \nExpress framework\n, OpenVeo creates an HTTP server with a list of routes.\nCore routes are mounted on \n/\n while plugins' routes are mounted on \n/PLUGIN_NAME\n with PLUGIN_NAME the name of the plugin.\nThere are three categories of routes:\n\n\n\n\nPublic routes: Routes accessible to anyone who has access to the url\n\n\nPrivate routes: Routes accessible only to users authenticated to the back end\n\n\nWeb Service routes: Routes accessible only to users authenticated to the Web Service\n\n\n\n\nSocket server\n\n\nBased on \nsocket.io\n, OpenVeo creates a socket server with a list of namespaces. Core namespaces are mounted on \n/NAMESPACE_NAME\n while plugins' namespaces are mounted on \n/PLUGIN_NAME/NAMESPACE_NAME\n with PLUGIN_NAME the name ot the plugin and NAMESPACE_NAME the name of the namespace described in plugin's configuration file (see \nhow to write a plugin\n for more details). There are two categories of namespaces:\n\n\n\n\nPublic namespaces: Namespaces accessible to anyone\n\n\nPrivate namespaces: Namespaces accessible only to users authenticated to the back end\n\n\n\n\nBack end\n\n\nOpenVeo core offers a back end as an AngularJS single page application accessible on \n/be\n. Without plugins, the back end has only limited features (users, roles, web service, profile page). And without plugins no front end is created. This is an important point. There is no generic front end, each plugin can define its own front pages on \n/PLUGIN_NAME\n base path.\n\n\nWeb Service\n\n\nOpenVeo core can create a \nWeb Service\n (using the option \n-ws\n when starting the process) mechanism based on oauth2 authentication.\n\n\nThrough the back end you can create an application with its associated list of scopes. Each new application will have an associated client id and client secret to authenticate to the Web Service. Thus you can create as many applications as you want with different scopes for each one.\n\n\nPlugins\n\n\nOpenVeo core loads all plugins found in \nnode_modules/@openveo/\n (plugins maintained by the OpenVeo team) or \nnode_modules/openveo-\n* (community plugins) when starting the process. Each plugin can:\n\n\n\n\nCreate its own back end pages\n\n\nCreate public and private routes\n\n\nCreate Web Service routes\n\n\nCreate socket namespaces\n\n\n\n\nAPI\n\n\nEach plugin (including the core) can expose an API to other plugins. See the \nAPI documentation\n to find out how to expose APIs.",
            "title": "The basics"
        },
        {
            "location": "/developers/basics/#http-server",
            "text": "Based on  Express framework , OpenVeo creates an HTTP server with a list of routes.\nCore routes are mounted on  /  while plugins' routes are mounted on  /PLUGIN_NAME  with PLUGIN_NAME the name of the plugin.\nThere are three categories of routes:   Public routes: Routes accessible to anyone who has access to the url  Private routes: Routes accessible only to users authenticated to the back end  Web Service routes: Routes accessible only to users authenticated to the Web Service",
            "title": "HTTP server"
        },
        {
            "location": "/developers/basics/#socket-server",
            "text": "Based on  socket.io , OpenVeo creates a socket server with a list of namespaces. Core namespaces are mounted on  /NAMESPACE_NAME  while plugins' namespaces are mounted on  /PLUGIN_NAME/NAMESPACE_NAME  with PLUGIN_NAME the name ot the plugin and NAMESPACE_NAME the name of the namespace described in plugin's configuration file (see  how to write a plugin  for more details). There are two categories of namespaces:   Public namespaces: Namespaces accessible to anyone  Private namespaces: Namespaces accessible only to users authenticated to the back end",
            "title": "Socket server"
        },
        {
            "location": "/developers/basics/#back-end",
            "text": "OpenVeo core offers a back end as an AngularJS single page application accessible on  /be . Without plugins, the back end has only limited features (users, roles, web service, profile page). And without plugins no front end is created. This is an important point. There is no generic front end, each plugin can define its own front pages on  /PLUGIN_NAME  base path.",
            "title": "Back end"
        },
        {
            "location": "/developers/basics/#web-service",
            "text": "OpenVeo core can create a  Web Service  (using the option  -ws  when starting the process) mechanism based on oauth2 authentication.  Through the back end you can create an application with its associated list of scopes. Each new application will have an associated client id and client secret to authenticate to the Web Service. Thus you can create as many applications as you want with different scopes for each one.",
            "title": "Web Service"
        },
        {
            "location": "/developers/basics/#plugins",
            "text": "OpenVeo core loads all plugins found in  node_modules/@openveo/  (plugins maintained by the OpenVeo team) or  node_modules/openveo- * (community plugins) when starting the process. Each plugin can:   Create its own back end pages  Create public and private routes  Create Web Service routes  Create socket namespaces",
            "title": "Plugins"
        },
        {
            "location": "/developers/basics/#api",
            "text": "Each plugin (including the core) can expose an API to other plugins. See the  API documentation  to find out how to expose APIs.",
            "title": "API"
        },
        {
            "location": "/developers/prerequisites/",
            "text": "OpenVeo requires additional elements for development:\n\n\n\n\nGit\n - openveo-core is versioned with git\n\n\nRuby\n / \nSass\n / \nCompass\n - CSS is written using SASS / Compass\n\n\nKarma\n - Back end AngularJS single page application is unit tested using karma\n\n\nGrunt\n - Grunt is used to launch development tasks (compilation, obfuscation, tests etc.)\n\n\nMkdocs\n - To generate this documentation",
            "title": "Prerequisites"
        },
        {
            "location": "/developers/installation/",
            "text": "Clone project from git\n\n\ncd /WORKSPACE_PATH/\ngit clone git@github.com:veo-labs/openveo-core.git\n\n\n\nInstall project's dependencies\n\n\ncd /WORKSPACE_PATH/openveo-core\nnpm install\n\n\n\nCreate NPM links for openveo-api and openveo-test\n\n\nIn development environment OpenVeo plugins will be installed using \nNPM links\n and will require @openveo/api and @openveo/test.\n\n\n# Create a link for @openveo/api\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api\nnpm link\n\n# Create a link for @openveo/test\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test\nnpm link",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#clone-project-from-git",
            "text": "cd /WORKSPACE_PATH/\ngit clone git@github.com:veo-labs/openveo-core.git",
            "title": "Clone project from git"
        },
        {
            "location": "/developers/installation/#install-projects-dependencies",
            "text": "cd /WORKSPACE_PATH/openveo-core\nnpm install",
            "title": "Install project's dependencies"
        },
        {
            "location": "/developers/installation/#create-npm-links-for-openveo-api-and-openveo-test",
            "text": "In development environment OpenVeo plugins will be installed using  NPM links  and will require @openveo/api and @openveo/test.  # Create a link for @openveo/api\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api\nnpm link\n\n# Create a link for @openveo/test\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test\nnpm link",
            "title": "Create NPM links for openveo-api and openveo-test"
        },
        {
            "location": "/developers/back-end/",
            "text": "Introduction\n\n\nOpenVeo back end is an \nAngularJS\n single page application served on \n/be\n.\n\n\nThe back end relies on a couple of libraries:\n\n\n\n\nangular-route\n to perform single page application routing\n\n\nangular-animate\n for CSS animations\n\n\nangular-cookies\n for cookie management\n\n\nangular-i18n\n for AngularJS default translations\n\n\nfastclick\n to remove click delays on browsers with touch UIs\n\n\nangular-bootstrap\n for basic user interface components\n\n\nangular-formly\n to build formulars from a JavaScript literal object\n\n\nangular-ui-tree\n to build an UI tree (not directly used by openveo-core)\n\n\nng-jsonpath\n to search on a JSON object (not directly used by openveo-core)\n\n\nng-tasty\n to present entities in a dynamic paginated table\n\n\n\n\nStructure\n\n\nMain module (\nov\n)\n\n\nThe main AngularJS module of the back end is named \nov\n and is applied to the HTML root element.\n\n\n<html ng-app=\"ov\" ng-controller=\"MainController\" ng-strict-di>\n\n  <head>\n    <base href=\"/be/\">\n  </head>\n\n  ...\n  <div ng-view></div>\n  ...\n</html>\n\n\n\n\nIt has dependencies on all AngularJS libraries and all AngularJS modules described by OpenVeo plugins. It also defines all core routes:\n\n\n\n\n/be/login\n to access the login page\n\n\n/be\n to access the back end home page\n\n\n/be/applications-list\n to access Web service applications page\n\n\n/be/users-list\n to access users page\n\n\n/be/profile\n to access user's profile page\n\n\n/be/roles-list\n to access roles page\n\n\n/be/openveo-settings\n to access settings page\n\n\n\n\nNb:\n Available services / filters defined in \nov\n module are described in the \nAPI\n.\n\n\nAlert module (\nov.alert\n)\n\n\nOffers a service to control alerts for the whole application. Alerts are used to display a message to the user.\n\n\nNb:\n Available services defined in \nov.alert\n module are described in the \nAPI\n.\n\n\nAuthentication module (\nov.authentication\n)\n\n\nOffers a service to authenticate / logout or manipulate authenticated user informations.\n\n\nNb:\n Available services / filters defined in \nov.authentication\n module are described in the \nAPI\n.\n\n\nEntity module (\nov.entity\n)\n\n\nOffers a service to manage OpenVeo entities (CRUD).\n\n\nNb:\n Available services defined in \nov.entity\n module are described in the \nAPI\n.\n\n\nI18n module (\nov.i18n\n)\n\n\nDefines a service to control back end internationalization and a \ntranslate\n filter to help translate ids from a dictionary.\n\n\nNb:\n Available services / filters defined in \nov.i18n\n module are described in the \nAPI\n.\n\n\nStorage module (\nov.storage\n)\n\n\nOffers a service to manipulate the local storage.\n\n\nNb:\n Available services defined in \nov.storage\n module are described in the \nAPI\n.\n\n\nTableForm module (\nov.tableForm\n)\n\n\nOffers a turnkey solution to build formulars and tasty tables.\n\n\nFormulars are the same as described in \nangular-formly\n.\n\n\nDatatables are a little different from the original \nng-tasty\n datable as actions can be assigned to a row and information about the row can be edited in place. Datatables needs an associated entity to work.\n\n\nAdd a new form\n\n\nFormulars are massively based on \nangular-formly\n.\nTo add a new formular, you have to place the generic formular partial in your HTML code and describe the expected form in your controller.\n\n\nInclude formular partial in your HTML.\n\n\n<ng-include src=\"'views/elements/form.html'\"></ng-include>\n\n\n\n\nDescribes the formular in your controller.\n\n\n\n// List of books\n$scope.books = [{\n  \"isbn\": \"50\",\n  \"name\": \"Journey to the Center of the Earth\"\n}];\n\n// Create a scope property \"addFormContainer\"\n$scope.addFormContainer = {};\n\n// Create a property \"model\" on \"addFormContainer\", this is were formly will\n// stores form results\n// This is the model of the form\n$scope.addFormContainer.model = {};\n\n// Describe fields just like in formly documentation\n$scope.addFormContainer.fields = [\n  {\n    key: 'name',\n    type: 'horizontalInput',\n    templateOptions: {\n      label: 'Label of the name field',\n      required: true,\n      description: 'Description of the name field'\n    }\n  },\n  {\n    key: 'books',\n    type: 'horizontalMultiCheckbox',\n    templateOptions: {\n      label: 'Books',\n      required: false,\n      options: $scope.books,\n      valueProperty: 'isbn',\n      labelProperty: 'name',\n      description: 'List of books'\n    },\n    expressionProperties: {\n      'templateOptions.disabled': '!model.name' // disabled when book name is blank\n    }\n  }\n];\n\n// Add formular submit function\n$scope.addFormContainer.onSubmit = function(model) {\n\n  // Return Angularjs promises with its own success or error callback\n  // Code to save the formular\n  // Generic error or success callback are already chained and executed by the form container\n  // in order to display the right message to user and update the form\n  return promise;\n};\n\n\n\n\nAdd a new datatable\n\n\nTables are massively based on \nng-tasty\n.\nTo add a new datatable, you have to place the generic datatable partial in your HTML code and describe the datatable expected behavior in your controller.\n\n\nInclude datatable partial in your HTML.\n\n\n<ng-include src=\"'views/elements/dataTable.html'\"></ng-include>\n\n\n\n\nDescribes the datatable in your controller.\n\n\nFor the example, assume that you need to display a collection of \nbook\n entity.\n\n\n{\n  \"isbn\": \"50\",\n  \"name\": \"Journey to the Center of the Earth\",\n  \"description\" : \"The story begins in May 1863, in the Lidenbrock house in Hamburg, Germany, with Professor Lidenbrock\"\n}\n\n\n\n\n\n\nInitialize tableContainer Object:\n\n\n\n\n// Create tableContainer Object used by DataTable controller\n$scope.tableContainer = {};\n\n// Initialize the entity type to enable DataTable controller to retrieve the right entity\n$scope.tableContainer.entityType = 'book';\n\n\n\n\n\n\nInitialize search filters\n\n\n\n\n$scope.tableContainer.filterBy = [\n  {\n    key: 'name', // the name of the web service parameter\n    value: '', // the initial value\n    label: 'Label of the name search filter' // the field label\n  }\n];\n\n\n\n\nFilters default type is text. Filter type can be set by specifying the \ntype\n property of the field.\n\n\n{\n  key: 'query', // the name of the corresponding web service parameter\n  type: 'text', // the type of field to use, here field will be represented using a simple text field\n  value: '', // the initial value\n  label: 'Label of the author search filter' // the field label\n},\n{\n  key: 'author', // the name of the corresponding web service parameter\n  type: 'select', // the type of field to use, here field will be represented using a combobox\n  options : selectOptions, // as field is of type \"select\", \"options\" specify select options with, for each option, a property \"name\" and a property \"value\"\n  value: '', // the initial value\n  label: 'Label of the author search filter' // the field label\n},\n{\n  key: 'date', // the name of the corresponding web service parameter\n  type: 'date', // the type of field to use, here field will be represented using a date picker\n  value: '', // the initial value\n  label : 'Label of the date search filter' // the field label\n}\n\n\n\n\n\n\nInitialize DataTable headers\n\n\n\n\n// Automatically, a sort filter is enable on each column except 'Action' column\n$scope.tableContainer.header = [{\n  key: 'name', // the value to use as the web service sortBy parameter value\n  name: 'Label of the name column', // the name of the column\n  class: ['col-xs-12 col-sm-11'] // the CSS classes to add on header cell\n},\n{\n  key: 'action', // specify a special column named \"action\" which can't be sorted\n  name: 'Label for action button', // the name of the action column\n  class: [' hidden-xs col-sm-1'] // the CSS classes to add on header cell\n}];\n\n\n\n\nHeaders default type is text. Header type can be set by specifying \ntype\n property on the header.\nDefault types are \ndate\n (timestamp) and \ntext\n.\nBut you can add any type if you make your own custom cell renderer (see after).\n\n\n{\n  key: 'date', // the value to use as the web service sortBy parameter value\n  name: 'Label of the date column', // the name of the column\n  type: 'date' // the header type\n},\n{\n  key: 'author', // the value to use as the web service sortBy parameter value\n  name: 'Label of the author column', // the name of the column\n  type: 'text' // the header type\n},\n{\n  key: 'custom', // the value to use as the web service sortBy parameter value\n  name: 'Label of the custom column', // the name of the column\n  type: 'myCustomType' // the header type\n}\n\n\n\n\n\n\nAdd a custom cell template renderer according to column key and row value\n\n\n\n\n// Usefull to add HTML value, or filtered value\n// if not defined, can print date and text\n// if defined, add custom cells renderer to date and text\n$scope.tableContainer.cellTheme = '/path/to/cells/template.html';\n\n\n\n\nFor example (assuming that \nentities\n is the header type to render, and \nrow[entities.key]\n, the value to display)\n\n\n<span ng-if=\"entities.type && entities.type == 'type1' && row[entities.key]\">{{row[entities.key] | filterType1}}</span>\n<span ng-if=\"entities.type && entities.type == 'type2'\" ng-bind-html=\"row[entities.key] | filterType2\"></span>\n\n\n\n\n\n\nInitialize action enable on each row\n\n\n\n\n$scope.tableContainer.actions = [{\n  label: 'Label of action',\n\n  // Enable a Popup confirmation before action execution, default: false if not defined\n  warningPopup: true,\n\n  // Condition to enable the action in the dropdown button action\n  condition: function(row) {\n    return $scope.rights.delete && !row.locked && !row.saving;\n  },\n\n  // Function to execute when the action is executed by button\n  callback: function(row, reload) {\n    // row is the book object on which the action is executed\n    action(row.id);\n    // call reload if dataTable need to be reloaded\n    reload();\n  },\n\n  // Function to execute when the action is executed by select checkbox action\n  // If not defined, this action can't be seen in checkbox actions\n  global: function(selected, reload) {\n    // selected is the list of selected entity id when global action is executed\n    // exemple: [12345,12346,12347,12348,12349]\n    actions(selected, reload);\n  }\n}];\n\n\n\n\n\n\nInitialize initial sort\n\n\n\n\n$scope.tableContainer.init = {\n  sortBy: 'name',  // initial sort key, default: first header column key if not defined\n  sortOrder: 'dsc' // initial sort order, default: 'asc' if not defined\n};\n\n\n\n\n\n\nDisplay checkbox global selection\n\n\n\n\n//default true if not defined;\n$scope.tableContainer.showSelectAll = true;\n\n\n\n\nYou can reload a display table manually from other controller by injecting the \nTableReloadEventService\n and calling\n\n\ntableReloadEventService.broadcast();\n\n\n\n\nDatatable dependency: edit a row\n\n\nDataTable is dependent of an edit form. This form specify what information user can access and/or modify.\nAll properties described in the \nAdd a new form\n section can be used to describe the form.\nMain differencies are that the form need to be initialized by the open row (the model is not exposed), and that form fields MUST be editable types.\n\n\n\n\nInitialize editFormContainer object\n\n\n\n\n// Create a scope property \"editFormContainer\"\n$scope.addFormContainer = {};\n\n// Create a property \"model\" on \"editFormContainer\", this is were formly will\n// stores form results\n// This is the model of the form\n$scope.editFormContainer.model = {};\n\n// Initialize the entity type to retrieve before the row is updated\n// to always update the latest value in database.\n$scope.editFormContainer.entityType = 'book';\n\n// Add formular submit function\n$scope.editFormContainer.onSubmit = function(model) {\n    return promises;\n};\n\n// Define if a row can be toggled or not\n$scope.editFormContainer.conditionToggleDetail = function(row) {\n  return row.state !== 0;\n};\n// Define if a row can be edit or not\n$scope.editFormContainer.conditionEditDetail = function(row) {\n  return !row.locked;\n};\n\n\n\n\n\n\nSet Fields\n\n\n\n\n// Describe fields just like in formly documentation with OpenVeo editable fields types\n$scope.editFormContainer.fields = {\n  // the key to be used in the model values\n  key: 'name',\n  type: 'horizontalEditableInput',\n  templateOptions: {\n    label: 'label for name input',\n    required: true\n  }\n};\n\n\n\n\n\n\nSet Fields dynamically\n\n\n\n\n// Function call when the form is displayed\n// Usefull to add fields dynamically according to the open row,\n// or retrieve information relative to the row\n$scope.editFormContainer.init = function(row) {\n  if(row.state == SHOW.PROPERTY){\n    var newField = {\n      key: 'property',\n      type: 'horizontalEditableInput',\n      model: row.property,\n      templateOptions: {\n        label: 'Label of the new property field'\n      }\n    };\n    $scope.editFormContainer.fields.push(newField);\n  }\n}\n\n\n\n\nField types\n\n\nOpenVeo defines the following list of formly fields.\n\n\n\n\n\n\n\n\nField type\n\n\nDescription\n\n\nSpecific options\n\n\n\n\n\n\n\n\n\n\ntags\n\n\nDisplay an input text to add a list of tags\n\n\navailableOptions\n to specify the list of possible tags with, for each tag, a property \"name\" and a property \"value\". If this option is specified it will not be possible to enter tags which are not in the list (default is []) ; \nplaceholder\n to specify the input placeholder (default to \"\") ; \nonChange\n to specify a function which will be called each time a tag is added or removed (default to null)\n\n\n\n\n\n\nmatch\n\n\nDisplay an input text and a tags field to build 1 to many associations\n\n\nmultiple\n to specify if more than one association is possible (default to true) ; \navailableOptions\n to specify the list of possible tags for the tags field (default to []) ; \ninputPlaceholder\n to specify the value of the input field placeholder (default to \"\") ; \ntagsPlaceholder\n to specify the placeholder to use for the tags field (default to \"\") ; \ninputProperty\n to specify the property to use from the model to get the input field value of an association (default to \"value\") ; \ntagsProperty\n to specify the placeholder to use, from the model, to get the tags field values of an association (default to \"values\") ; \naddLabel\n to specify the text of the add button\n\n\n\n\n\n\nemptyrow\n\n\nDisplay a fake field with a static message\n\n\nmessage\n to specify the message\n\n\n\n\n\n\nsection\n\n\nDisplay an H3 title\n\n\ntitle\n to specify the title\n\n\n\n\n\n\novMultiCheckBox\n\n\nSame as the \"multiCheckbox\" type defined by \nangular-formly-templates-bootstrap\n\n\noptions\n the list of checkboxes description objects with a property for the name of the checkbox and a property for the value of the checkbox ; \nvalueProperty\n to define the property to use to get the checkbox value (default is \"value\") ; \nlabelProperty\n to define the property to use to get the checkbox label (default is \"name\")\n\n\n\n\n\n\novFile\n\n\nDisplay a file input with a progress bar using \nng-file-upload\n\n\nacceptedTypes\n a comma separated list of accepted file types as described in \nng-file-upload documentation\n ; \nonFileChange\n a function to call when file has changed (it uses \nngf-change\n) ; \nprogressBar\n a boolean to display or not the progress bar while uploading a file (default to false)\n\n\n\n\n\n\nsimple\n\n\nDisplay the value of the model as is\n\n\n-\n\n\n\n\n\n\nhorizontalInput\n\n\nSame as \"input\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"input\"\n\n\n\n\n\n\nhorizontalSelect\n\n\nSame as \"select\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"select\"\n\n\n\n\n\n\nhorizontalMultiCheckbox\n\n\nSame as \"ovMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"ovMultiCheckBox\"\n\n\n\n\n\n\nhorizontalTags\n\n\nSame as \"tags\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"tags\"\n\n\n\n\n\n\nhorizontalMatch\n\n\nSame as \"match\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"match\"\n\n\n\n\n\n\nhorizontalFile\n\n\nSame as \"ovFile\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"ovFile\"\n\n\n\n\n\n\nhorizontalCheckbox\n\n\nSame as \"checkbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"checkbox\"\n\n\n\n\n\n\n\n\nNb: All field types defined in \nangular-formly-templates-bootstrap\n are also available.\n\n\nEditable field types\n\n\nAn editable field type is capable of displaying the field or its literal representation depending on \"showForm\" property of formState object.\nIf \"showForm\" is set to true, the field is displayed, if set to false, the literal representation of the field is displayed.\n\n\nOpenVeo defines the following list of editable formly fields.\n\n\n\n\n\n\n\n\nField type\n\n\nDescription\n\n\nSpecific options\n\n\n\n\n\n\n\n\n\n\neditableTags\n\n\nMake field type \"tags\" editable\n\n\n-\n\n\n\n\n\n\neditableInput\n\n\nMake field type \"input\" editable\n\n\nSame as \"input\"\n\n\n\n\n\n\neditableSelect\n\n\nMake field type \"select\" editable\n\n\nSame as \"select\"\n\n\n\n\n\n\neditableTags\n\n\nMake field type \"tags\" editable\n\n\nSame as \"tags\"\n\n\n\n\n\n\neditableCheckbox\n\n\nMake field type \"checkbox\" editable\n\n\nSame as \"checkbox\"\n\n\n\n\n\n\novEditableMultiCheckBox\n\n\nMake field type \"ovMultiCheckBox\" editable\n\n\nSame as \"ovMultiCheckBox\"\n\n\n\n\n\n\nhorizontalEditableInput\n\n\nSame as \"editableInput\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"editableInput\"\n\n\n\n\n\n\nhorizontalEditableSelect\n\n\nSame as \"editableSelect\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"editableSelect\"\n\n\n\n\n\n\nhorizontalEditableMultiCheckbox\n\n\nSame as \"ovEditableMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"ovEditableMultiCheckBox\"\n\n\n\n\n\n\nhorizontalEditableTags\n\n\nSame as \"editableTags\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"editableTags\"\n\n\n\n\n\n\nhorizontalEditableCheckbox\n\n\nSame as \"editableCheckbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers\n\n\nSame as \"editableCheckbox\"\n\n\n\n\n\n\n\n\nField wrappers\n\n\nOpenVeo defines the following list of editable formly wrappers.\n\n\n\n\n\n\n\n\nWrapper name\n\n\nDescription\n\n\nSpecific options\n\n\n\n\n\n\n\n\n\n\ncollapse\n\n\nCollapse / Uncollapse a formly field\n\n\nlabelCollapse\n the label of the collapsible element\n\n\n\n\n\n\nhorizontalBootstrapLabel\n\n\nPut a label in front of a field\n\n\nlabel\n the label ; \nrequired\n a boolean to indicates if a \"*\" character must follow the label\n\n\n\n\n\n\nhorizontalBootstrapLabelOnly\n\n\nSame as \"horizontalBootstrapLabel\" but without wrapping the field\n\n\nSame as \"horizontalBootstrapLabel\"\n\n\n\n\n\n\neditableWrapper\n\n\nDisplay the field or its literal representation depending on \"showForm\" property of formState object. This is the wrapper used by all editable fields\n\n\n-\n\n\n\n\n\n\n\n\nNb: All wrappers defined in \nangular-formly-templates-bootstrap\n are also available.\n\n\nSocket module (\nov.socket\n)\n\n\nOffers a factory \nSocketFactory\n to initialize a connection to the OpenVeo Socket Server.\n\n\nvar socketClient = SocketFactory.initSocket('/myOpenVeoSocketNamespace');\n\nsocketClient.on('my.socket.message', function() {\n  ...\n});",
            "title": "Back end AngularJS"
        },
        {
            "location": "/developers/back-end/#introduction",
            "text": "OpenVeo back end is an  AngularJS  single page application served on  /be .  The back end relies on a couple of libraries:   angular-route  to perform single page application routing  angular-animate  for CSS animations  angular-cookies  for cookie management  angular-i18n  for AngularJS default translations  fastclick  to remove click delays on browsers with touch UIs  angular-bootstrap  for basic user interface components  angular-formly  to build formulars from a JavaScript literal object  angular-ui-tree  to build an UI tree (not directly used by openveo-core)  ng-jsonpath  to search on a JSON object (not directly used by openveo-core)  ng-tasty  to present entities in a dynamic paginated table",
            "title": "Introduction"
        },
        {
            "location": "/developers/back-end/#structure",
            "text": "",
            "title": "Structure"
        },
        {
            "location": "/developers/back-end/#main-module-ov",
            "text": "The main AngularJS module of the back end is named  ov  and is applied to the HTML root element.  <html ng-app=\"ov\" ng-controller=\"MainController\" ng-strict-di>\n\n  <head>\n    <base href=\"/be/\">\n  </head>\n\n  ...\n  <div ng-view></div>\n  ...\n</html>  It has dependencies on all AngularJS libraries and all AngularJS modules described by OpenVeo plugins. It also defines all core routes:   /be/login  to access the login page  /be  to access the back end home page  /be/applications-list  to access Web service applications page  /be/users-list  to access users page  /be/profile  to access user's profile page  /be/roles-list  to access roles page  /be/openveo-settings  to access settings page   Nb:  Available services / filters defined in  ov  module are described in the  API .",
            "title": "Main module (ov)"
        },
        {
            "location": "/developers/back-end/#alert-module-ovalert",
            "text": "Offers a service to control alerts for the whole application. Alerts are used to display a message to the user.  Nb:  Available services defined in  ov.alert  module are described in the  API .",
            "title": "Alert module (ov.alert)"
        },
        {
            "location": "/developers/back-end/#authentication-module-ovauthentication",
            "text": "Offers a service to authenticate / logout or manipulate authenticated user informations.  Nb:  Available services / filters defined in  ov.authentication  module are described in the  API .",
            "title": "Authentication module (ov.authentication)"
        },
        {
            "location": "/developers/back-end/#entity-module-oventity",
            "text": "Offers a service to manage OpenVeo entities (CRUD).  Nb:  Available services defined in  ov.entity  module are described in the  API .",
            "title": "Entity module (ov.entity)"
        },
        {
            "location": "/developers/back-end/#i18n-module-ovi18n",
            "text": "Defines a service to control back end internationalization and a  translate  filter to help translate ids from a dictionary.  Nb:  Available services / filters defined in  ov.i18n  module are described in the  API .",
            "title": "I18n module (ov.i18n)"
        },
        {
            "location": "/developers/back-end/#storage-module-ovstorage",
            "text": "Offers a service to manipulate the local storage.  Nb:  Available services defined in  ov.storage  module are described in the  API .",
            "title": "Storage module (ov.storage)"
        },
        {
            "location": "/developers/back-end/#tableform-module-ovtableform",
            "text": "Offers a turnkey solution to build formulars and tasty tables.  Formulars are the same as described in  angular-formly .  Datatables are a little different from the original  ng-tasty  datable as actions can be assigned to a row and information about the row can be edited in place. Datatables needs an associated entity to work.",
            "title": "TableForm module (ov.tableForm)"
        },
        {
            "location": "/developers/back-end/#add-a-new-form",
            "text": "Formulars are massively based on  angular-formly .\nTo add a new formular, you have to place the generic formular partial in your HTML code and describe the expected form in your controller.  Include formular partial in your HTML.  <ng-include src=\"'views/elements/form.html'\"></ng-include>  Describes the formular in your controller.  \n// List of books\n$scope.books = [{\n  \"isbn\": \"50\",\n  \"name\": \"Journey to the Center of the Earth\"\n}];\n\n// Create a scope property \"addFormContainer\"\n$scope.addFormContainer = {};\n\n// Create a property \"model\" on \"addFormContainer\", this is were formly will\n// stores form results\n// This is the model of the form\n$scope.addFormContainer.model = {};\n\n// Describe fields just like in formly documentation\n$scope.addFormContainer.fields = [\n  {\n    key: 'name',\n    type: 'horizontalInput',\n    templateOptions: {\n      label: 'Label of the name field',\n      required: true,\n      description: 'Description of the name field'\n    }\n  },\n  {\n    key: 'books',\n    type: 'horizontalMultiCheckbox',\n    templateOptions: {\n      label: 'Books',\n      required: false,\n      options: $scope.books,\n      valueProperty: 'isbn',\n      labelProperty: 'name',\n      description: 'List of books'\n    },\n    expressionProperties: {\n      'templateOptions.disabled': '!model.name' // disabled when book name is blank\n    }\n  }\n];\n\n// Add formular submit function\n$scope.addFormContainer.onSubmit = function(model) {\n\n  // Return Angularjs promises with its own success or error callback\n  // Code to save the formular\n  // Generic error or success callback are already chained and executed by the form container\n  // in order to display the right message to user and update the form\n  return promise;\n};",
            "title": "Add a new form"
        },
        {
            "location": "/developers/back-end/#add-a-new-datatable",
            "text": "Tables are massively based on  ng-tasty .\nTo add a new datatable, you have to place the generic datatable partial in your HTML code and describe the datatable expected behavior in your controller.  Include datatable partial in your HTML.  <ng-include src=\"'views/elements/dataTable.html'\"></ng-include>  Describes the datatable in your controller.  For the example, assume that you need to display a collection of  book  entity.  {\n  \"isbn\": \"50\",\n  \"name\": \"Journey to the Center of the Earth\",\n  \"description\" : \"The story begins in May 1863, in the Lidenbrock house in Hamburg, Germany, with Professor Lidenbrock\"\n}   Initialize tableContainer Object:   // Create tableContainer Object used by DataTable controller\n$scope.tableContainer = {};\n\n// Initialize the entity type to enable DataTable controller to retrieve the right entity\n$scope.tableContainer.entityType = 'book';   Initialize search filters   $scope.tableContainer.filterBy = [\n  {\n    key: 'name', // the name of the web service parameter\n    value: '', // the initial value\n    label: 'Label of the name search filter' // the field label\n  }\n];  Filters default type is text. Filter type can be set by specifying the  type  property of the field.  {\n  key: 'query', // the name of the corresponding web service parameter\n  type: 'text', // the type of field to use, here field will be represented using a simple text field\n  value: '', // the initial value\n  label: 'Label of the author search filter' // the field label\n},\n{\n  key: 'author', // the name of the corresponding web service parameter\n  type: 'select', // the type of field to use, here field will be represented using a combobox\n  options : selectOptions, // as field is of type \"select\", \"options\" specify select options with, for each option, a property \"name\" and a property \"value\"\n  value: '', // the initial value\n  label: 'Label of the author search filter' // the field label\n},\n{\n  key: 'date', // the name of the corresponding web service parameter\n  type: 'date', // the type of field to use, here field will be represented using a date picker\n  value: '', // the initial value\n  label : 'Label of the date search filter' // the field label\n}   Initialize DataTable headers   // Automatically, a sort filter is enable on each column except 'Action' column\n$scope.tableContainer.header = [{\n  key: 'name', // the value to use as the web service sortBy parameter value\n  name: 'Label of the name column', // the name of the column\n  class: ['col-xs-12 col-sm-11'] // the CSS classes to add on header cell\n},\n{\n  key: 'action', // specify a special column named \"action\" which can't be sorted\n  name: 'Label for action button', // the name of the action column\n  class: [' hidden-xs col-sm-1'] // the CSS classes to add on header cell\n}];  Headers default type is text. Header type can be set by specifying  type  property on the header.\nDefault types are  date  (timestamp) and  text .\nBut you can add any type if you make your own custom cell renderer (see after).  {\n  key: 'date', // the value to use as the web service sortBy parameter value\n  name: 'Label of the date column', // the name of the column\n  type: 'date' // the header type\n},\n{\n  key: 'author', // the value to use as the web service sortBy parameter value\n  name: 'Label of the author column', // the name of the column\n  type: 'text' // the header type\n},\n{\n  key: 'custom', // the value to use as the web service sortBy parameter value\n  name: 'Label of the custom column', // the name of the column\n  type: 'myCustomType' // the header type\n}   Add a custom cell template renderer according to column key and row value   // Usefull to add HTML value, or filtered value\n// if not defined, can print date and text\n// if defined, add custom cells renderer to date and text\n$scope.tableContainer.cellTheme = '/path/to/cells/template.html';  For example (assuming that  entities  is the header type to render, and  row[entities.key] , the value to display)  <span ng-if=\"entities.type && entities.type == 'type1' && row[entities.key]\">{{row[entities.key] | filterType1}}</span>\n<span ng-if=\"entities.type && entities.type == 'type2'\" ng-bind-html=\"row[entities.key] | filterType2\"></span>   Initialize action enable on each row   $scope.tableContainer.actions = [{\n  label: 'Label of action',\n\n  // Enable a Popup confirmation before action execution, default: false if not defined\n  warningPopup: true,\n\n  // Condition to enable the action in the dropdown button action\n  condition: function(row) {\n    return $scope.rights.delete && !row.locked && !row.saving;\n  },\n\n  // Function to execute when the action is executed by button\n  callback: function(row, reload) {\n    // row is the book object on which the action is executed\n    action(row.id);\n    // call reload if dataTable need to be reloaded\n    reload();\n  },\n\n  // Function to execute when the action is executed by select checkbox action\n  // If not defined, this action can't be seen in checkbox actions\n  global: function(selected, reload) {\n    // selected is the list of selected entity id when global action is executed\n    // exemple: [12345,12346,12347,12348,12349]\n    actions(selected, reload);\n  }\n}];   Initialize initial sort   $scope.tableContainer.init = {\n  sortBy: 'name',  // initial sort key, default: first header column key if not defined\n  sortOrder: 'dsc' // initial sort order, default: 'asc' if not defined\n};   Display checkbox global selection   //default true if not defined;\n$scope.tableContainer.showSelectAll = true;  You can reload a display table manually from other controller by injecting the  TableReloadEventService  and calling  tableReloadEventService.broadcast();",
            "title": "Add a new datatable"
        },
        {
            "location": "/developers/back-end/#datatable-dependency-edit-a-row",
            "text": "DataTable is dependent of an edit form. This form specify what information user can access and/or modify.\nAll properties described in the  Add a new form  section can be used to describe the form.\nMain differencies are that the form need to be initialized by the open row (the model is not exposed), and that form fields MUST be editable types.   Initialize editFormContainer object   // Create a scope property \"editFormContainer\"\n$scope.addFormContainer = {};\n\n// Create a property \"model\" on \"editFormContainer\", this is were formly will\n// stores form results\n// This is the model of the form\n$scope.editFormContainer.model = {};\n\n// Initialize the entity type to retrieve before the row is updated\n// to always update the latest value in database.\n$scope.editFormContainer.entityType = 'book';\n\n// Add formular submit function\n$scope.editFormContainer.onSubmit = function(model) {\n    return promises;\n};\n\n// Define if a row can be toggled or not\n$scope.editFormContainer.conditionToggleDetail = function(row) {\n  return row.state !== 0;\n};\n// Define if a row can be edit or not\n$scope.editFormContainer.conditionEditDetail = function(row) {\n  return !row.locked;\n};   Set Fields   // Describe fields just like in formly documentation with OpenVeo editable fields types\n$scope.editFormContainer.fields = {\n  // the key to be used in the model values\n  key: 'name',\n  type: 'horizontalEditableInput',\n  templateOptions: {\n    label: 'label for name input',\n    required: true\n  }\n};   Set Fields dynamically   // Function call when the form is displayed\n// Usefull to add fields dynamically according to the open row,\n// or retrieve information relative to the row\n$scope.editFormContainer.init = function(row) {\n  if(row.state == SHOW.PROPERTY){\n    var newField = {\n      key: 'property',\n      type: 'horizontalEditableInput',\n      model: row.property,\n      templateOptions: {\n        label: 'Label of the new property field'\n      }\n    };\n    $scope.editFormContainer.fields.push(newField);\n  }\n}",
            "title": "Datatable dependency: edit a row"
        },
        {
            "location": "/developers/back-end/#field-types",
            "text": "OpenVeo defines the following list of formly fields.     Field type  Description  Specific options      tags  Display an input text to add a list of tags  availableOptions  to specify the list of possible tags with, for each tag, a property \"name\" and a property \"value\". If this option is specified it will not be possible to enter tags which are not in the list (default is []) ;  placeholder  to specify the input placeholder (default to \"\") ;  onChange  to specify a function which will be called each time a tag is added or removed (default to null)    match  Display an input text and a tags field to build 1 to many associations  multiple  to specify if more than one association is possible (default to true) ;  availableOptions  to specify the list of possible tags for the tags field (default to []) ;  inputPlaceholder  to specify the value of the input field placeholder (default to \"\") ;  tagsPlaceholder  to specify the placeholder to use for the tags field (default to \"\") ;  inputProperty  to specify the property to use from the model to get the input field value of an association (default to \"value\") ;  tagsProperty  to specify the placeholder to use, from the model, to get the tags field values of an association (default to \"values\") ;  addLabel  to specify the text of the add button    emptyrow  Display a fake field with a static message  message  to specify the message    section  Display an H3 title  title  to specify the title    ovMultiCheckBox  Same as the \"multiCheckbox\" type defined by  angular-formly-templates-bootstrap  options  the list of checkboxes description objects with a property for the name of the checkbox and a property for the value of the checkbox ;  valueProperty  to define the property to use to get the checkbox value (default is \"value\") ;  labelProperty  to define the property to use to get the checkbox label (default is \"name\")    ovFile  Display a file input with a progress bar using  ng-file-upload  acceptedTypes  a comma separated list of accepted file types as described in  ng-file-upload documentation  ;  onFileChange  a function to call when file has changed (it uses  ngf-change ) ;  progressBar  a boolean to display or not the progress bar while uploading a file (default to false)    simple  Display the value of the model as is  -    horizontalInput  Same as \"input\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"input\"    horizontalSelect  Same as \"select\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"select\"    horizontalMultiCheckbox  Same as \"ovMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"ovMultiCheckBox\"    horizontalTags  Same as \"tags\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"tags\"    horizontalMatch  Same as \"match\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"match\"    horizontalFile  Same as \"ovFile\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"ovFile\"    horizontalCheckbox  Same as \"checkbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"checkbox\"     Nb: All field types defined in  angular-formly-templates-bootstrap  are also available.",
            "title": "Field types"
        },
        {
            "location": "/developers/back-end/#editable-field-types",
            "text": "An editable field type is capable of displaying the field or its literal representation depending on \"showForm\" property of formState object.\nIf \"showForm\" is set to true, the field is displayed, if set to false, the literal representation of the field is displayed.  OpenVeo defines the following list of editable formly fields.     Field type  Description  Specific options      editableTags  Make field type \"tags\" editable  -    editableInput  Make field type \"input\" editable  Same as \"input\"    editableSelect  Make field type \"select\" editable  Same as \"select\"    editableTags  Make field type \"tags\" editable  Same as \"tags\"    editableCheckbox  Make field type \"checkbox\" editable  Same as \"checkbox\"    ovEditableMultiCheckBox  Make field type \"ovMultiCheckBox\" editable  Same as \"ovMultiCheckBox\"    horizontalEditableInput  Same as \"editableInput\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"editableInput\"    horizontalEditableSelect  Same as \"editableSelect\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"editableSelect\"    horizontalEditableMultiCheckbox  Same as \"ovEditableMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"ovEditableMultiCheckBox\"    horizontalEditableTags  Same as \"editableTags\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"editableTags\"    horizontalEditableCheckbox  Same as \"editableCheckbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers  Same as \"editableCheckbox\"",
            "title": "Editable field types"
        },
        {
            "location": "/developers/back-end/#field-wrappers",
            "text": "OpenVeo defines the following list of editable formly wrappers.     Wrapper name  Description  Specific options      collapse  Collapse / Uncollapse a formly field  labelCollapse  the label of the collapsible element    horizontalBootstrapLabel  Put a label in front of a field  label  the label ;  required  a boolean to indicates if a \"*\" character must follow the label    horizontalBootstrapLabelOnly  Same as \"horizontalBootstrapLabel\" but without wrapping the field  Same as \"horizontalBootstrapLabel\"    editableWrapper  Display the field or its literal representation depending on \"showForm\" property of formState object. This is the wrapper used by all editable fields  -     Nb: All wrappers defined in  angular-formly-templates-bootstrap  are also available.",
            "title": "Field wrappers"
        },
        {
            "location": "/developers/back-end/#socket-module-ovsocket",
            "text": "Offers a factory  SocketFactory  to initialize a connection to the OpenVeo Socket Server.  var socketClient = SocketFactory.initSocket('/myOpenVeoSocketNamespace');\n\nsocketClient.on('my.socket.message', function() {\n  ...\n});",
            "title": "Socket module (ov.socket)"
        },
        {
            "location": "/developers/template-engine/",
            "text": "OpenVeo uses \nMustache\n as the template engine. You have to declare a directory containing your template files before using a mustache template file. You can do it in conf.js file (see \nplugin's documentation\n for more information about conf.js file).\n\n\nThen you can call the template using \nrender express function\n in your controller's actions.",
            "title": "Template engine"
        },
        {
            "location": "/developers/plugins/",
            "text": "Introduction\n\n\nOpenVeo core doesn't have many features on its own. Plugins are made to add functionalities to your OpenVeo. OpenVeo core loads all plugins found in \nnode_modules/@openveo/\n (plugins maintained by the OpenVeo team) or \nnode_modules/openveo-\n* (community plugins) when starting the process.\n\n\nCommunity plugins can be found on \nNPM registry\n.\n\n\nWrite a plugin\n\n\nTo write your own OpenVeo plugin you should use the \nOpenVeo Plugin Generator\n to automatically create the skeleton of your plugin.\nAll documentation needed to implement your plugin is available on the \nOpenVeo Plugin Generator\n project.",
            "title": "Plugins"
        },
        {
            "location": "/developers/plugins/#introduction",
            "text": "OpenVeo core doesn't have many features on its own. Plugins are made to add functionalities to your OpenVeo. OpenVeo core loads all plugins found in  node_modules/@openveo/  (plugins maintained by the OpenVeo team) or  node_modules/openveo- * (community plugins) when starting the process.  Community plugins can be found on  NPM registry .",
            "title": "Introduction"
        },
        {
            "location": "/developers/plugins/#write-a-plugin",
            "text": "To write your own OpenVeo plugin you should use the  OpenVeo Plugin Generator  to automatically create the skeleton of your plugin.\nAll documentation needed to implement your plugin is available on the  OpenVeo Plugin Generator  project.",
            "title": "Write a plugin"
        },
        {
            "location": "/developers/api/",
            "text": "Core server side API (Node.js)\n\n\nOpenVeo core is the base of OpenVeo but it is also a plugin. Like every OpenVeo plugin it can expose APIs to other plugins. The \nOpenVeo Core API\n helps you write your OpenVeo plugins.\n\n\nYou can use process.api to get the OpenVeo Core API:\n\n\nvar coreApi = process.api.getCoreApi();\n\n\n\n\nor the API of a particular plugin:\n\n\nvar myPluginApi = process.api.getApi('my-plugin');\n\n\n\n\nBackend client side API (AngularJS)\n\n\nOpenVeo core \nbackend API\n exposes an API to plugins to help you write your plugin's back end pages (AngularJS). See \nback end AngularJS\n for more information.",
            "title": "API"
        },
        {
            "location": "/developers/api/#core-server-side-api-nodejs",
            "text": "OpenVeo core is the base of OpenVeo but it is also a plugin. Like every OpenVeo plugin it can expose APIs to other plugins. The  OpenVeo Core API  helps you write your OpenVeo plugins.  You can use process.api to get the OpenVeo Core API:  var coreApi = process.api.getCoreApi();  or the API of a particular plugin:  var myPluginApi = process.api.getApi('my-plugin');",
            "title": "Core server side API (Node.js)"
        },
        {
            "location": "/developers/api/#backend-client-side-api-angularjs",
            "text": "OpenVeo core  backend API  exposes an API to plugins to help you write your plugin's back end pages (AngularJS). See  back end AngularJS  for more information.",
            "title": "Backend client side API (AngularJS)"
        },
        {
            "location": "/developers/logger/",
            "text": "Introduction\n\n\nAll server logs are performed by module \nWinston\n.\n\n\nUse OpenVeo logger\n\n\nBy default OpenVeo core creates one logger named \nopenveo\n. You can use it directly:\n\n\nprocess.logger.silly('Silly log');\nprocess.logger.debug('Debug log');\nprocess.logger.verbose('Verbose log');\nprocess.logger.info('Info log');\nprocess.logger.warn('Warn log');\nprocess.logger.error('Error log');",
            "title": "Logger"
        },
        {
            "location": "/developers/logger/#introduction",
            "text": "All server logs are performed by module  Winston .",
            "title": "Introduction"
        },
        {
            "location": "/developers/logger/#use-openveo-logger",
            "text": "By default OpenVeo core creates one logger named  openveo . You can use it directly:  process.logger.silly('Silly log');\nprocess.logger.debug('Debug log');\nprocess.logger.verbose('Verbose log');\nprocess.logger.info('Info log');\nprocess.logger.warn('Warn log');\nprocess.logger.error('Error log');",
            "title": "Use OpenVeo logger"
        },
        {
            "location": "/developers/i18n/",
            "text": "Introduction\n\n\nOpenVeo translations are grouped by dictionaries (JSON files in i18n directory). Actually the server is capable of returning a dictionary by its name and language. Nothing more. The OpenVeo back end is translated on the client side application (AngularJS).\n\n\nDictionaries\n\n\nDictionaries are all stored in \ni18n directory\n. Dictionary file name is composed of the name of the dictionary followed by the language code:\n\n\n[DICTIONARY_NAME]\n-\n[LANGUAGE_CODE]\n.json\n\n\nWith :\n\n\n\n\n[DICTIONARY_NAME]\n the name of the dictionary\n\n\n[LANGUAGE_CODE]\n the language code\n\n\n\n\ne.g.\n \nmy-dictionary\n-\nen_ca\n.json (will contain translations of dictionary \"my-dictionary\" for Canadian english)\n\n\ne.g.\n \nmy-dictionary\n-\nfr\n.json (will contain translations of dictionary \"my-dictionary\" for French)\n\n\nIf the dictionary must be accessible only by users authenticated to the back end, you must add the prefix : \nadmin-\n.\n\n\ne.g.\n \nadmin-\nmy-dictionary-en_ca.json\n\n\nGet a public dictionary\n\n\nFrom client side, you can request a dictionary using \n/getDictionary/:dictionary/:code\n\n\ne.g.\n \n/getDictionary/my-dictionary/en_ca\n\n\nFrom server side, you can use the core API:\n\n\nprocess.api.getCoreApi().getTranslations('my-dictionary', 'en_ca', function(error, translations) {\n  console.log(translations);\n});\n\n\n\n\nGet a back end dictionary\n\n\nFrom client side, you can request a back end dictionary (requiring an authenticated user) using \n/be/getDictionary/:dictionary/:code\n\n\ne.g.\n \n/be/getDictionary/my-dictionary/en_ca\n\n\nNb :\n Your dictionary file will be \nadmin-my-dictionary-en_ca.json\n\n\nYou can use the back end AngularJS API (module \nov.i18n\n) to help you manipulate dictionaries. See \nback end AngularJS\n for more information.\n\n\nFrom server side, you can use the core API:\n\n\nprocess.api.getCoreApi().getTranslations('admin-my-dictionary', 'en_ca', function(error, translations) {\n  console.log(translations);\n});",
            "title": "I18N and I10N"
        },
        {
            "location": "/developers/i18n/#introduction",
            "text": "OpenVeo translations are grouped by dictionaries (JSON files in i18n directory). Actually the server is capable of returning a dictionary by its name and language. Nothing more. The OpenVeo back end is translated on the client side application (AngularJS).",
            "title": "Introduction"
        },
        {
            "location": "/developers/i18n/#dictionaries",
            "text": "Dictionaries are all stored in  i18n directory . Dictionary file name is composed of the name of the dictionary followed by the language code:  [DICTIONARY_NAME] - [LANGUAGE_CODE] .json  With :   [DICTIONARY_NAME]  the name of the dictionary  [LANGUAGE_CODE]  the language code   e.g.   my-dictionary - en_ca .json (will contain translations of dictionary \"my-dictionary\" for Canadian english)  e.g.   my-dictionary - fr .json (will contain translations of dictionary \"my-dictionary\" for French)  If the dictionary must be accessible only by users authenticated to the back end, you must add the prefix :  admin- .  e.g.   admin- my-dictionary-en_ca.json",
            "title": "Dictionaries"
        },
        {
            "location": "/developers/i18n/#get-a-public-dictionary",
            "text": "From client side, you can request a dictionary using  /getDictionary/:dictionary/:code  e.g.   /getDictionary/my-dictionary/en_ca  From server side, you can use the core API:  process.api.getCoreApi().getTranslations('my-dictionary', 'en_ca', function(error, translations) {\n  console.log(translations);\n});",
            "title": "Get a public dictionary"
        },
        {
            "location": "/developers/i18n/#get-a-back-end-dictionary",
            "text": "From client side, you can request a back end dictionary (requiring an authenticated user) using  /be/getDictionary/:dictionary/:code  e.g.   /be/getDictionary/my-dictionary/en_ca  Nb :  Your dictionary file will be  admin-my-dictionary-en_ca.json  You can use the back end AngularJS API (module  ov.i18n ) to help you manipulate dictionaries. See  back end AngularJS  for more information.  From server side, you can use the core API:  process.api.getCoreApi().getTranslations('admin-my-dictionary', 'en_ca', function(error, translations) {\n  console.log(translations);\n});",
            "title": "Get a back end dictionary"
        },
        {
            "location": "/developers/compilation/",
            "text": "Introduction\n\n\nOpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.\n\n\nCompiling SASS files\n\n\nYou can compile the back end SASS files using the following command:\n\n\ngrunt compass:dist\n\n\n\nOr you can watch SASS files changes using the following command:\n\n\ngrunt\n\n\n\nYou'll find compiled CSS files in \nassets/be/css\n.\n\n\nCompiling JavaScript files\n\n\nYou'll probably want to compile AngularJS files, in production, for better performance. You can do it using:\n\n\ngrunt prod\n\n\n\nYou'll find compiled JavaScript files in \nassets/be/js\n.",
            "title": "CSS / SASS / JS compilation"
        },
        {
            "location": "/developers/compilation/#introduction",
            "text": "OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.",
            "title": "Introduction"
        },
        {
            "location": "/developers/compilation/#compiling-sass-files",
            "text": "You can compile the back end SASS files using the following command:  grunt compass:dist  Or you can watch SASS files changes using the following command:  grunt  You'll find compiled CSS files in  assets/be/css .",
            "title": "Compiling SASS files"
        },
        {
            "location": "/developers/compilation/#compiling-javascript-files",
            "text": "You'll probably want to compile AngularJS files, in production, for better performance. You can do it using:  grunt prod  You'll find compiled JavaScript files in  assets/be/js .",
            "title": "Compiling JavaScript files"
        },
        {
            "location": "/developers/coding-standards/",
            "text": "OpenVeo uses \nNode.js\n coding standards. \nESLint\n is used to validate coding rules. You can launch a code verification using the following command:\n\n\ngrunt eslint\n\n\n\nNb :\n Both Node.js and AngularJS parts of OpenVeo must respect the same coding standards",
            "title": "Coding standards"
        },
        {
            "location": "/developers/unit-tests/",
            "text": "Node.js unit tests\n\n\nServer side unit tests are performed using \nMocha\n and \nChai\n. You can launch server unit tests with the following command:\n\n\ngrunt mochaTest\n\n\n\nAngularJS unit tests\n\n\nClient side unit tests are performed using \nKarma\n. You can launch client unit tests with the following command:\n\n\ngrunt karma",
            "title": "Unit tests"
        },
        {
            "location": "/developers/unit-tests/#nodejs-unit-tests",
            "text": "Server side unit tests are performed using  Mocha  and  Chai . You can launch server unit tests with the following command:  grunt mochaTest",
            "title": "Node.js unit tests"
        },
        {
            "location": "/developers/unit-tests/#angularjs-unit-tests",
            "text": "Client side unit tests are performed using  Karma . You can launch client unit tests with the following command:  grunt karma",
            "title": "AngularJS unit tests"
        },
        {
            "location": "/developers/end-to-end-tests/",
            "text": "Introduction\n\n\nEnd to end tests are performed using \nProtractor\n.\n\n\nEach plugin (including OpenVeo core) defines a list of test suites in \ntests/client/protractorSuites.json\n.\n\n\nInstall selenium web driver and chrome driver\n\n\nnode_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update\n\n\n\nNB: Note that protractor module could be in node_modules/protractor\n\n\nConfigure tests\n\n\nYou need to specify a new database which will be used during tests. To do so, you can add a new configuration file in user's directory under \n~/.openveo/core\n called \ndatabaseTestConf.json\n.\n\n\n~/.openveo/core/databaseTestConf.json\n\n\n{\n  \"type\": \"mongodb\",\n  \"host\": \"localhost\",\n  \"port\": 27017,\n  \"database\": \"openveo-test\",\n  \"username\": \"openveo\",\n  \"password\": \"openveo\"\n}\n\n\n\n\nWARNING\n : Each time you launch end to end tests, all information will be removed from this database ! DO NOT use the same database as the one described in \ndatabaseConf.json\n\n\nWhen launching tests, OpenVeo HTTP server, socket server, CAS mock server and LDAP mock server are automatically spawned and must be configured through \nserverTestConf.json\n. Typically you may want to change servers ports.\n\n\n~/.openveo/core/serverTestConf.json\n\n\n{\n  \"app\": {\n    \"httpPort\": 3003,\n    \"socketPort\": 3004,\n    \"browserSocketPort\": 3004,\n    \"sessionSecret\": \"2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx\",\n    \"auth\": {\n      \"cas\": {\n        \"version\": \"3\",\n        \"service\": \"http://127.0.0.1:3003/be/authenticate/cas\",\n        \"url\": \"http://127.0.0.1:3005\",\n        \"userIdAttribute\": \"name\",\n        \"userNameAttribute\": \"attributes.name\",\n        \"userEmailAttribute\": \"attributes.mail\",\n        \"userGroupAttribute\": \"attributes.groups\"\n      },\n      \"ldapauth\": {\n        \"searchFilter\": \"(&(objectclass=person)(cn={{username}}))\",\n        \"url\": \"ldap://127.0.0.1:3006\",\n        \"bindAttribute\": \"dn\",\n        \"bindDn\": \"cn=openveo,dc=test\",\n        \"bindPassword\": \"test\",\n        \"searchBase\": \"dc=test\",\n        \"searchScope\": \"sub\",\n        \"userGroupAttribute\": \"groups\",\n        \"userIdAttribute\": \"dn\",\n        \"userNameAttribute\": \"cn\",\n        \"userEmailAttribute\": \"mail\"\n      }\n    }\n  },\n  \"ws\": {\n    \"port\": 3007\n  }\n}\n\n\n\n\nYou also need to specify the CDN URL to precise the new server port. To do so, you can add a new configuration file in user's directory under \n~/.openveo/core\n called \ntestConf.json\n.\n\n\n~/.openveo/core/testConf.json\n\n\n{\n  \"passwordHashKey\": \"Eu2MNdGjJD\",\n  \"cdn\": {\n    \"url\": \"http://127.0.0.0:3003\"\n  }\n}\n\nFinally the logger has to be configured through **loggerTestConf.json**. Typically you may want to deactivate logger standard output.\n\n**~/.openveo/core/loggerTestConf.json**\n\n```json\n{\n  \"app\": {\n    \"level\": \"info\",\n    \"maxFileSize\": 1048576,\n    \"maxFiles\": 2,\n    \"fileName\": \"/tmp/openveo/logs/openveoTest.log\",\n    \"console\": false\n  },\n  \"ws\": {\n    \"level\": \"info\",\n    \"maxFileSize\": 1048576,\n    \"maxFiles\": 2,\n    \"fileName\": \"/tmp/openveo/logs/openveoTest-ws.log\",\n    \"console\": false\n  }\n}\n\n\n\n\nconsole: false\n will deactivate standard output.\n\n\nWriting tests\n\n\nBoot steps\n\n\nWhen launching end to end tests, several things happen before the first test is launched:\n\n\n\n\nDatabase defined in \n~/.openveo/core/databaseTestConf.json\n is dropped\n\n\nUsers, roles, groups and applications described in \ntests/client/e2eTests/database/data.json\n, from core and plugins, are inserted into database\n\n\nCAS users and LDAP users described in \ntests/client/e2eTests/database/data.json\n, from core and plugins, are inserted respectively into \ntests/client/e2eTests/build/casUsers.json\n and \ntests/client/e2eTests/build/ldapUsers.json\n\n\nTests suites files, in \ntests/client/e2eTests/protractorSuites.json\n from core and plugins, are merged into one single file (\ntests/client/e2eTests/suites/suites.json\n)\n\n\nA CAS server mock is launched\n\n\nAn LDAP server mock is launched\n\n\nAn OpenVeo HTTP server is launched\n\n\nAn OpenVeo socket server is launched\n\n\nAn OpenVeo Web Service server is launched\n\n\nA database connection is made to be able to use models in tests\n\n\nAll plugins are loaded\n\n\n\n\nAdd users, roles, groups and application before tests\n\n\nUsers, roles, groups and applications can be added before tests are launched using \ntests/client/e2eTests/resources/data.json\n configuration file.\n\n\nStructure is as follow:\n\n\n{\n  \"groups\": {\n    ...\n  },\n  \"roles\": {\n    ...\n  },\n  \"users\": {\n    ...\n  },\n  \"casUsers\": [\n    ...\n  ],\n  \"ldapUsers\": [\n    ...\n  ],\n  \"applications\": {\n    ...\n  }\n}\n\n\n\n\nCreate a group\n\n\n{\n  \"groups\": {\n    \"coreGroupId\": { // Id of the group to use when creating roles\n      \"name\": \"Core group name\", // The name of the group\n      \"description\": \"Core group description\" // The description of the group\n    }\n  }\n}\n\n\n\n\nCreate a role\n\n\n{\n  \"roles\": {\n    \"coreAdmin\": { // Id of the role to use when creating users\n      \"name\": \"core-admin\", // The name of the role\n      \"permissions\": [ // The list of permissions ids as described in conf.js file\n        \"add-application\",\n        \"update-application\",\n        \"delete-application\",\n        \"add-taxonomy\",\n        \"update-taxonomy\",\n        \"delete-taxonomy\",\n        \"add-user\",\n        \"update-user\",\n        \"delete-user\",\n        \"add-role\",\n        \"update-role\",\n        \"delete-role\",\n        \"access-applications-page\",\n        \"access-users-page\",\n        \"access-roles-page\",\n        \"get-group-coreGroupId\", // Permission \"get\" on the group \"coreGroupId\"\n        \"update-group-coreGroupId\", // Permission \"update\" on the group \"coreGroupId\"\n        \"delete-group-coreGroupId\" // Permission \"delete\" on the group \"coreGroupId\"\n      ]\n    }\n  }\n}\n\n\n\n\nCreate a user\n\n\n{\n  \"users\": {\n    \"coreAdmin\": { // Id of the user (not used)\n      \"name\": \"core-admin\", // The name of the user\n      \"email\": \"core-admin@veo-labs.com\", User's email\n      \"password\": \"core-admin\", // User's password\n      \"roles\": [ \"coreAdmin\" ] // User's list of roles (role ids are the one described in the same file)\n    }\n  }\n}\n\n\n\n\nCreate a CAS user\n\n\n{\n  \"casUsers\": [\n    {\n      \"name\": \"my-user\", // The id of the CAS user\n      \"attributes\": { // CAS user attributes\n        \"name\": \"my-user\", // The attribute holding the name of the CAS user\n        \"mail\": \"my-usert@openveo.com\", // The attribute holding the email of the CAS user\n        \"groups\": [\"my-user1\", \"my-user2\"]  // The attribute holding the groups of the CAS user\n      }\n    }\n  ]\n}\n\n\n\n\nCreate an LDAP user\n\n\n{\n  \"ldapUsers\": [\n    {\n      \"dn\": \"cn=my-user,dc=test\", // User's id on LDAP\n      \"cn\": \"my-user\", // User's name\n      \"groups\": \"my-user-group1,my-user-group2\", // A comma separated list of groups\n      \"mail\": \"my-user@openveo.com\" // User's email\n    }\n  ]\n}\n\n\n\n\nCreate an application\n\n\n{\n  \"applications\": {\n    \"coreApplicationsGuest\": { // Id of the application (not used)\n      \"name\": \"core-applications-guest\", // Name of the application\n      \"scopes\": [ \"publish-videos\" ] // List of scope ids for the application\n    }\n  }\n}\n\n\n\n\nCreate test\n\n\nCreate your test file in \ntests/client/e2eTests/\n then update the list of suites, if necessary, in  \ntests/client/e2eTests/suites/suites.json\n.\n\n\nDebug\n\n\nIf a test fails, a screenshot of the browser at the instant is taken and available in \nbuild/screenshots\n of the core.\n\n\nLaunch end to end tests\n\n\n# Launch all end to end tests on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true\n\n# Launch all end to end tests on firefox\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true\n\n# Launch only coreHome suite on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"coreHome\"",
            "title": "End to end tests"
        },
        {
            "location": "/developers/end-to-end-tests/#introduction",
            "text": "End to end tests are performed using  Protractor .  Each plugin (including OpenVeo core) defines a list of test suites in  tests/client/protractorSuites.json .",
            "title": "Introduction"
        },
        {
            "location": "/developers/end-to-end-tests/#install-selenium-web-driver-and-chrome-driver",
            "text": "node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update  NB: Note that protractor module could be in node_modules/protractor",
            "title": "Install selenium web driver and chrome driver"
        },
        {
            "location": "/developers/end-to-end-tests/#configure-tests",
            "text": "You need to specify a new database which will be used during tests. To do so, you can add a new configuration file in user's directory under  ~/.openveo/core  called  databaseTestConf.json .  ~/.openveo/core/databaseTestConf.json  {\n  \"type\": \"mongodb\",\n  \"host\": \"localhost\",\n  \"port\": 27017,\n  \"database\": \"openveo-test\",\n  \"username\": \"openveo\",\n  \"password\": \"openveo\"\n}  WARNING  : Each time you launch end to end tests, all information will be removed from this database ! DO NOT use the same database as the one described in  databaseConf.json  When launching tests, OpenVeo HTTP server, socket server, CAS mock server and LDAP mock server are automatically spawned and must be configured through  serverTestConf.json . Typically you may want to change servers ports.  ~/.openveo/core/serverTestConf.json  {\n  \"app\": {\n    \"httpPort\": 3003,\n    \"socketPort\": 3004,\n    \"browserSocketPort\": 3004,\n    \"sessionSecret\": \"2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx\",\n    \"auth\": {\n      \"cas\": {\n        \"version\": \"3\",\n        \"service\": \"http://127.0.0.1:3003/be/authenticate/cas\",\n        \"url\": \"http://127.0.0.1:3005\",\n        \"userIdAttribute\": \"name\",\n        \"userNameAttribute\": \"attributes.name\",\n        \"userEmailAttribute\": \"attributes.mail\",\n        \"userGroupAttribute\": \"attributes.groups\"\n      },\n      \"ldapauth\": {\n        \"searchFilter\": \"(&(objectclass=person)(cn={{username}}))\",\n        \"url\": \"ldap://127.0.0.1:3006\",\n        \"bindAttribute\": \"dn\",\n        \"bindDn\": \"cn=openveo,dc=test\",\n        \"bindPassword\": \"test\",\n        \"searchBase\": \"dc=test\",\n        \"searchScope\": \"sub\",\n        \"userGroupAttribute\": \"groups\",\n        \"userIdAttribute\": \"dn\",\n        \"userNameAttribute\": \"cn\",\n        \"userEmailAttribute\": \"mail\"\n      }\n    }\n  },\n  \"ws\": {\n    \"port\": 3007\n  }\n}  You also need to specify the CDN URL to precise the new server port. To do so, you can add a new configuration file in user's directory under  ~/.openveo/core  called  testConf.json .  ~/.openveo/core/testConf.json  {\n  \"passwordHashKey\": \"Eu2MNdGjJD\",\n  \"cdn\": {\n    \"url\": \"http://127.0.0.0:3003\"\n  }\n}\n\nFinally the logger has to be configured through **loggerTestConf.json**. Typically you may want to deactivate logger standard output.\n\n**~/.openveo/core/loggerTestConf.json**\n\n```json\n{\n  \"app\": {\n    \"level\": \"info\",\n    \"maxFileSize\": 1048576,\n    \"maxFiles\": 2,\n    \"fileName\": \"/tmp/openveo/logs/openveoTest.log\",\n    \"console\": false\n  },\n  \"ws\": {\n    \"level\": \"info\",\n    \"maxFileSize\": 1048576,\n    \"maxFiles\": 2,\n    \"fileName\": \"/tmp/openveo/logs/openveoTest-ws.log\",\n    \"console\": false\n  }\n}  console: false  will deactivate standard output.",
            "title": "Configure tests"
        },
        {
            "location": "/developers/end-to-end-tests/#writing-tests",
            "text": "",
            "title": "Writing tests"
        },
        {
            "location": "/developers/end-to-end-tests/#boot-steps",
            "text": "When launching end to end tests, several things happen before the first test is launched:   Database defined in  ~/.openveo/core/databaseTestConf.json  is dropped  Users, roles, groups and applications described in  tests/client/e2eTests/database/data.json , from core and plugins, are inserted into database  CAS users and LDAP users described in  tests/client/e2eTests/database/data.json , from core and plugins, are inserted respectively into  tests/client/e2eTests/build/casUsers.json  and  tests/client/e2eTests/build/ldapUsers.json  Tests suites files, in  tests/client/e2eTests/protractorSuites.json  from core and plugins, are merged into one single file ( tests/client/e2eTests/suites/suites.json )  A CAS server mock is launched  An LDAP server mock is launched  An OpenVeo HTTP server is launched  An OpenVeo socket server is launched  An OpenVeo Web Service server is launched  A database connection is made to be able to use models in tests  All plugins are loaded",
            "title": "Boot steps"
        },
        {
            "location": "/developers/end-to-end-tests/#add-users-roles-groups-and-application-before-tests",
            "text": "Users, roles, groups and applications can be added before tests are launched using  tests/client/e2eTests/resources/data.json  configuration file.  Structure is as follow:  {\n  \"groups\": {\n    ...\n  },\n  \"roles\": {\n    ...\n  },\n  \"users\": {\n    ...\n  },\n  \"casUsers\": [\n    ...\n  ],\n  \"ldapUsers\": [\n    ...\n  ],\n  \"applications\": {\n    ...\n  }\n}",
            "title": "Add users, roles, groups and application before tests"
        },
        {
            "location": "/developers/end-to-end-tests/#create-a-group",
            "text": "{\n  \"groups\": {\n    \"coreGroupId\": { // Id of the group to use when creating roles\n      \"name\": \"Core group name\", // The name of the group\n      \"description\": \"Core group description\" // The description of the group\n    }\n  }\n}",
            "title": "Create a group"
        },
        {
            "location": "/developers/end-to-end-tests/#create-a-role",
            "text": "{\n  \"roles\": {\n    \"coreAdmin\": { // Id of the role to use when creating users\n      \"name\": \"core-admin\", // The name of the role\n      \"permissions\": [ // The list of permissions ids as described in conf.js file\n        \"add-application\",\n        \"update-application\",\n        \"delete-application\",\n        \"add-taxonomy\",\n        \"update-taxonomy\",\n        \"delete-taxonomy\",\n        \"add-user\",\n        \"update-user\",\n        \"delete-user\",\n        \"add-role\",\n        \"update-role\",\n        \"delete-role\",\n        \"access-applications-page\",\n        \"access-users-page\",\n        \"access-roles-page\",\n        \"get-group-coreGroupId\", // Permission \"get\" on the group \"coreGroupId\"\n        \"update-group-coreGroupId\", // Permission \"update\" on the group \"coreGroupId\"\n        \"delete-group-coreGroupId\" // Permission \"delete\" on the group \"coreGroupId\"\n      ]\n    }\n  }\n}",
            "title": "Create a role"
        },
        {
            "location": "/developers/end-to-end-tests/#create-a-user",
            "text": "{\n  \"users\": {\n    \"coreAdmin\": { // Id of the user (not used)\n      \"name\": \"core-admin\", // The name of the user\n      \"email\": \"core-admin@veo-labs.com\", User's email\n      \"password\": \"core-admin\", // User's password\n      \"roles\": [ \"coreAdmin\" ] // User's list of roles (role ids are the one described in the same file)\n    }\n  }\n}",
            "title": "Create a user"
        },
        {
            "location": "/developers/end-to-end-tests/#create-a-cas-user",
            "text": "{\n  \"casUsers\": [\n    {\n      \"name\": \"my-user\", // The id of the CAS user\n      \"attributes\": { // CAS user attributes\n        \"name\": \"my-user\", // The attribute holding the name of the CAS user\n        \"mail\": \"my-usert@openveo.com\", // The attribute holding the email of the CAS user\n        \"groups\": [\"my-user1\", \"my-user2\"]  // The attribute holding the groups of the CAS user\n      }\n    }\n  ]\n}",
            "title": "Create a CAS user"
        },
        {
            "location": "/developers/end-to-end-tests/#create-an-ldap-user",
            "text": "{\n  \"ldapUsers\": [\n    {\n      \"dn\": \"cn=my-user,dc=test\", // User's id on LDAP\n      \"cn\": \"my-user\", // User's name\n      \"groups\": \"my-user-group1,my-user-group2\", // A comma separated list of groups\n      \"mail\": \"my-user@openveo.com\" // User's email\n    }\n  ]\n}",
            "title": "Create an LDAP user"
        },
        {
            "location": "/developers/end-to-end-tests/#create-an-application",
            "text": "{\n  \"applications\": {\n    \"coreApplicationsGuest\": { // Id of the application (not used)\n      \"name\": \"core-applications-guest\", // Name of the application\n      \"scopes\": [ \"publish-videos\" ] // List of scope ids for the application\n    }\n  }\n}",
            "title": "Create an application"
        },
        {
            "location": "/developers/end-to-end-tests/#create-test",
            "text": "Create your test file in  tests/client/e2eTests/  then update the list of suites, if necessary, in   tests/client/e2eTests/suites/suites.json .",
            "title": "Create test"
        },
        {
            "location": "/developers/end-to-end-tests/#debug",
            "text": "If a test fails, a screenshot of the browser at the instant is taken and available in  build/screenshots  of the core.",
            "title": "Debug"
        },
        {
            "location": "/developers/end-to-end-tests/#launch-end-to-end-tests",
            "text": "# Launch all end to end tests on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true\n\n# Launch all end to end tests on firefox\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true\n\n# Launch only coreHome suite on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"coreHome\"",
            "title": "Launch end to end tests"
        }
    ]
}