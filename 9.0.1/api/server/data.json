{
    "project": {
        "name": "OpenVeo Core server",
        "description": "Node.js OpenVeo Core documentation",
        "version": "9.0.1"
    },
    "files": {
        "app/server/controllers/ApplicationController.js": {
            "name": "app/server/controllers/ApplicationController.js",
            "modules": {},
            "classes": {
                "ApplicationController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/AuthenticationController.js": {
            "name": "app/server/controllers/AuthenticationController.js",
            "modules": {},
            "classes": {
                "authenticationController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/DefaultController.js": {
            "name": "app/server/controllers/DefaultController.js",
            "modules": {},
            "classes": {
                "DefaultController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/ErrorController.js": {
            "name": "app/server/controllers/ErrorController.js",
            "modules": {},
            "classes": {
                "ErrorController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/GroupController.js": {
            "name": "app/server/controllers/GroupController.js",
            "modules": {},
            "classes": {
                "GroupController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/I18nController.js": {
            "name": "app/server/controllers/I18nController.js",
            "modules": {},
            "classes": {
                "I18nController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/MenuController.js": {
            "name": "app/server/controllers/MenuController.js",
            "modules": {},
            "classes": {
                "MenuController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/OAuthController.js": {
            "name": "app/server/controllers/OAuthController.js",
            "modules": {},
            "classes": {
                "OauthController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/RoleController.js": {
            "name": "app/server/controllers/RoleController.js",
            "modules": {},
            "classes": {
                "RoleController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/SettingsController.js": {
            "name": "app/server/controllers/SettingsController.js",
            "modules": {},
            "classes": {
                "SettingsController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/TaxonomyController.js": {
            "name": "app/server/controllers/TaxonomyController.js",
            "modules": {},
            "classes": {
                "TaxonomyController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/UserController.js": {
            "name": "app/server/controllers/UserController.js",
            "modules": {},
            "classes": {
                "UserController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/doc.js": {
            "name": "app/server/controllers/doc.js",
            "modules": {
                "core-controllers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/doc.js": {
            "name": "app/server/loaders/doc.js",
            "modules": {
                "core-loaders": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/entityLoader.js": {
            "name": "app/server/loaders/entityLoader.js",
            "modules": {},
            "classes": {
                "entityLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/migrationLoader.js": {
            "name": "app/server/loaders/migrationLoader.js",
            "modules": {},
            "classes": {
                "migrationLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/namespaceLoader.js": {
            "name": "app/server/loaders/namespaceLoader.js",
            "modules": {},
            "classes": {
                "namespaceLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/permissionLoader.js": {
            "name": "app/server/loaders/permissionLoader.js",
            "modules": {},
            "classes": {
                "permissionLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/pluginLoader.js": {
            "name": "app/server/loaders/pluginLoader.js",
            "modules": {},
            "classes": {
                "pluginLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/loaders/routeLoader.js": {
            "name": "app/server/loaders/routeLoader.js",
            "modules": {},
            "classes": {
                "routeLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/migration/migrationProcess.js": {
            "name": "app/server/migration/migrationProcess.js",
            "modules": {
                "core-migration": 1
            },
            "classes": {
                "migrationProcess": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/oauth/accessToken.js": {
            "name": "app/server/oauth/accessToken.js",
            "modules": {},
            "classes": {
                "accessToken": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/oauth/client.js": {
            "name": "app/server/oauth/client.js",
            "modules": {},
            "classes": {
                "client": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/oauth/doc.js": {
            "name": "app/server/oauth/doc.js",
            "modules": {
                "core-oauth": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/plugin/CorePlugin.js": {
            "name": "app/server/plugin/CorePlugin.js",
            "modules": {},
            "classes": {
                "CorePlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/plugin/CorePluginApi.js": {
            "name": "app/server/plugin/CorePluginApi.js",
            "modules": {},
            "classes": {
                "CorePluginApi": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/plugin/doc.js": {
            "name": "app/server/plugin/doc.js",
            "modules": {
                "core-plugin": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/plugin/hooks.js": {
            "name": "app/server/plugin/hooks.js",
            "modules": {},
            "classes": {
                "CORE_HOOKS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/plugin/listener.js": {
            "name": "app/server/plugin/listener.js",
            "modules": {},
            "classes": {
                "listener": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/ClientProvider.js": {
            "name": "app/server/providers/ClientProvider.js",
            "modules": {},
            "classes": {
                "ClientProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/GroupProvider.js": {
            "name": "app/server/providers/GroupProvider.js",
            "modules": {},
            "classes": {
                "GroupProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/RoleProvider.js": {
            "name": "app/server/providers/RoleProvider.js",
            "modules": {},
            "classes": {
                "RoleProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/SettingProvider.js": {
            "name": "app/server/providers/SettingProvider.js",
            "modules": {},
            "classes": {
                "SettingProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/TaxonomyProvider.js": {
            "name": "app/server/providers/TaxonomyProvider.js",
            "modules": {},
            "classes": {
                "TaxonomyProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/TokenProvider.js": {
            "name": "app/server/providers/TokenProvider.js",
            "modules": {},
            "classes": {
                "TokenProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/UserProvider.js": {
            "name": "app/server/providers/UserProvider.js",
            "modules": {},
            "classes": {
                "UserProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/doc.js": {
            "name": "app/server/providers/doc.js",
            "modules": {
                "core-providers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/servers/ApplicationServer.js": {
            "name": "app/server/servers/ApplicationServer.js",
            "modules": {},
            "classes": {
                "ApplicationServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/servers/Server.js": {
            "name": "app/server/servers/Server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/servers/WebServiceServer.js": {
            "name": "app/server/servers/WebServiceServer.js",
            "modules": {},
            "classes": {
                "WebServiceServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/servers/doc.js": {
            "name": "app/server/servers/doc.js",
            "modules": {
                "core-servers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/api.js": {
            "name": "app/server/api.js",
            "modules": {
                "core": 1
            },
            "classes": {
                "api": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/authenticator.js": {
            "name": "app/server/authenticator.js",
            "modules": {},
            "classes": {
                "authenticator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/httpErrors.js": {
            "name": "app/server/httpErrors.js",
            "modules": {},
            "classes": {
                "HTTP_ERRORS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/path.js": {
            "name": "app/server/path.js",
            "modules": {},
            "classes": {
                "path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/storage.js": {
            "name": "app/server/storage.js",
            "modules": {},
            "classes": {
                "storage": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "core-controllers": {
            "name": "core-controllers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ApplicationController": 1,
                "authenticationController": 1,
                "DefaultController": 1,
                "ErrorController": 1,
                "GroupController": 1,
                "I18nController": 1,
                "MenuController": 1,
                "OauthController": 1,
                "RoleController": 1,
                "SettingsController": 1,
                "TaxonomyController": 1,
                "UserController": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/controllers/UserController.js",
            "line": 14,
            "description": "Controllers provide all route actions.",
            "itemtype": "main"
        },
        "core-loaders": {
            "name": "core-loaders",
            "submodules": {},
            "elements": {},
            "classes": {
                "entityLoader": 1,
                "migrationLoader": 1,
                "namespaceLoader": 1,
                "permissionLoader": 1,
                "pluginLoader": 1,
                "routeLoader": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/loaders/routeLoader.js",
            "line": 7,
            "description": "Loaders module includes tools to be able to load configuration found in\ncore and plugins.",
            "itemtype": "main"
        },
        "core-migration": {
            "name": "core-migration",
            "submodules": {},
            "elements": {},
            "classes": {
                "migrationProcess": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/migration/migrationProcess.js",
            "line": 7,
            "description": "Provides functions to execute migration script.",
            "itemtype": "main"
        },
        "core-oauth": {
            "name": "core-oauth",
            "submodules": {},
            "elements": {},
            "classes": {
                "accessToken": 1,
                "client": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/oauth/client.js",
            "line": 7,
            "description": "Oauth 2 implementation.",
            "itemtype": "main"
        },
        "core-plugin": {
            "name": "core-plugin",
            "submodules": {},
            "elements": {},
            "classes": {
                "CorePlugin": 1,
                "CorePluginApi": 1,
                "CORE_HOOKS": 1,
                "listener": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/plugin/listener.js",
            "line": 14,
            "description": "The Core plugin with its APIs.",
            "itemtype": "main"
        },
        "core-providers": {
            "name": "core-providers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ClientProvider": 1,
                "GroupProvider": 1,
                "RoleProvider": 1,
                "SettingProvider": 1,
                "TaxonomyProvider": 1,
                "TokenProvider": 1,
                "UserProvider": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/providers/UserProvider.js",
            "line": 18,
            "description": "Providers module includes all core providers.",
            "itemtype": "main"
        },
        "core-servers": {
            "name": "core-servers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ApplicationServer": 1,
                "Server": 1,
                "WebServiceServer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/servers/WebServiceServer.js",
            "line": 23,
            "description": "Servers module includes all different servers defined by openveo (HTTP and Web Socket).",
            "itemtype": "main"
        },
        "core": {
            "name": "core",
            "submodules": {},
            "elements": {},
            "classes": {
                "api": 1,
                "authenticator": 1,
                "HTTP_ERRORS": 1,
                "path": 1,
                "storage": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "app/server/storage.js",
            "line": 7
        }
    },
    "classes": {
        "ApplicationController": {
            "name": "ApplicationController",
            "shortname": "ApplicationController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/ApplicationController.js",
            "line": 15,
            "description": "Defines an entity controller to handle requests relative to the Web Service client applications and scopes.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "authenticationController": {
            "name": "authenticationController",
            "shortname": "authenticationController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 92,
            "description": "Defines a controller to handlerequests relative to back end authentication.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "DefaultController": {
            "name": "DefaultController",
            "shortname": "DefaultController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/DefaultController.js",
            "line": 15,
            "description": "Defines a controller to handle request relative to AngularJS single page application.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "ErrorController": {
            "name": "ErrorController",
            "shortname": "ErrorController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/ErrorController.js",
            "line": 14,
            "description": "Defines a controller to handle errors.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "GroupController": {
            "name": "GroupController",
            "shortname": "GroupController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/GroupController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to groups' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "I18nController": {
            "name": "I18nController",
            "shortname": "I18nController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/I18nController.js",
            "line": 12,
            "description": "Defines a controller to handle requests relative to internationalization.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "MenuController": {
            "name": "MenuController",
            "shortname": "MenuController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/MenuController.js",
            "line": 97,
            "description": "Defines a controller to handle requests relative to the back end menu.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "OauthController": {
            "name": "OauthController",
            "shortname": "OauthController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/OAuthController.js",
            "line": 100,
            "description": "Defines a controller to handle requests relative to Web Service authentication.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "RoleController": {
            "name": "RoleController",
            "shortname": "RoleController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/RoleController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to roles' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "SettingsController": {
            "name": "SettingsController",
            "shortname": "SettingsController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/SettingsController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to settings.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "TaxonomyController": {
            "name": "TaxonomyController",
            "shortname": "TaxonomyController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/TaxonomyController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to taxonomies' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "UserController": {
            "name": "UserController",
            "shortname": "UserController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app/server/controllers/UserController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to users' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "entityLoader": {
            "name": "entityLoader",
            "shortname": "entityLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app/server/loaders/entityLoader.js",
            "line": 7,
            "description": "Provides functions to interpret entities definition from plugin's configuration.",
            "static": 1
        },
        "migrationLoader": {
            "name": "migrationLoader",
            "shortname": "migrationLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app/server/loaders/migrationLoader.js",
            "line": 7,
            "description": "Provides functions to load migration script.",
            "static": 1
        },
        "namespaceLoader": {
            "name": "namespaceLoader",
            "shortname": "namespaceLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app/server/loaders/namespaceLoader.js",
            "line": 7,
            "description": "Provides functions to load namespaces from core and plugins configuration.",
            "static": 1
        },
        "permissionLoader": {
            "name": "permissionLoader",
            "shortname": "permissionLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app/server/loaders/permissionLoader.js",
            "line": 7,
            "description": "Provides functions to interpret permissions definition from core and plugins.\n\nPermissions comes from 2 different things :\n - Core and plugin's configuration files\n - Groups of users which are entities",
            "static": 1
        },
        "pluginLoader": {
            "name": "pluginLoader",
            "shortname": "pluginLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app/server/loaders/pluginLoader.js",
            "line": 7,
            "description": "Provides functions to load openveo plugins.",
            "static": 1
        },
        "routeLoader": {
            "name": "routeLoader",
            "shortname": "routeLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app/server/loaders/routeLoader.js",
            "line": 7,
            "description": "Provides functions to load routes from core and plugins\nconfiguration.",
            "static": 1
        },
        "migrationProcess": {
            "name": "migrationProcess",
            "shortname": "migrationProcess",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-migration",
            "namespace": "",
            "file": "app/server/migration/migrationProcess.js",
            "line": 7,
            "description": "Provides functions to execute migration script.",
            "mainName": "core-migration",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "static": 1
        },
        "accessToken": {
            "name": "accessToken",
            "shortname": "accessToken",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-oauth",
            "namespace": "",
            "file": "app/server/oauth/accessToken.js",
            "line": 7,
            "description": "Provides functions to interface oauth tokens and openveo Web Service.",
            "static": 1
        },
        "client": {
            "name": "client",
            "shortname": "client",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-oauth",
            "namespace": "",
            "file": "app/server/oauth/client.js",
            "line": 7,
            "description": "Provides functions to interface oauth clients and openveo Web Service.",
            "static": 1
        },
        "CorePlugin": {
            "name": "CorePlugin",
            "shortname": "CorePlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-plugin",
            "namespace": "",
            "file": "app/server/plugin/CorePlugin.js",
            "line": 22,
            "description": "Defines the Core Plugin.\n\nIn some way, the core act just like any other plugins, it has a 3 routers (public, private and web service) and\na configuration file. Core plugin can be loaded just like any plugin.",
            "extends": "Plugin",
            "is_constructor": 1
        },
        "CorePluginApi": {
            "name": "CorePluginApi",
            "shortname": "CorePluginApi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-plugin",
            "namespace": "",
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 22,
            "description": "Defines the Core Plugin API exposed to other plugins.",
            "extends": "PluginApi",
            "is_constructor": 1
        },
        "CORE_HOOKS": {
            "name": "CORE_HOOKS",
            "shortname": "CORE_HOOKS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-plugin",
            "namespace": "",
            "file": "app/server/plugin/hooks.js",
            "line": 7,
            "description": "Defines the list of hooks sent by core.",
            "example": [
                "\n    var coreApi = process.api.getCoreApi();\n    var CORE_HOOKS = process.api.getCoreApi().getHooks();\n    coreApi.registerAction(CORE_HOOKS.USERS_DELETED, function(ids, callback) {\n      console.log(ids);\n      callback();\n    );"
            ],
            "static": 1
        },
        "listener": {
            "name": "listener",
            "shortname": "listener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-plugin",
            "namespace": "",
            "file": "app/server/plugin/listener.js",
            "line": 14,
            "description": "Sets event listeners on core.",
            "static": 1
        },
        "ClientProvider": {
            "name": "ClientProvider",
            "shortname": "ClientProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/ClientProvider.js",
            "line": 12,
            "description": "Defines a ClientProvider to get and save Web Service client applications.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database storing the clients",
                    "type": "Database"
                }
            ]
        },
        "GroupProvider": {
            "name": "GroupProvider",
            "shortname": "GroupProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/GroupProvider.js",
            "line": 12,
            "description": "Defines a GroupProvider to get and save content groups.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "RoleProvider": {
            "name": "RoleProvider",
            "shortname": "RoleProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/RoleProvider.js",
            "line": 11,
            "description": "Defines a RoleProvider to get and save back end user roles.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "SettingProvider": {
            "name": "SettingProvider",
            "shortname": "SettingProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/SettingProvider.js",
            "line": 12,
            "description": "Defines a SettingProvider to get and save settings.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "TaxonomyProvider": {
            "name": "TaxonomyProvider",
            "shortname": "TaxonomyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/TaxonomyProvider.js",
            "line": 13,
            "description": "Defines a TaxonomyProvider to get and save taxonomies.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "TokenProvider": {
            "name": "TokenProvider",
            "shortname": "TokenProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/TokenProvider.js",
            "line": 11,
            "description": "Defines a TokenProvider to get and save Web Service tokens.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "UserProvider": {
            "name": "UserProvider",
            "shortname": "UserProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app/server/providers/UserProvider.js",
            "line": 18,
            "description": "Defines a UserProvider to get and save back end users.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "ApplicationServer": {
            "name": "ApplicationServer",
            "shortname": "ApplicationServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-servers",
            "namespace": "",
            "file": "app/server/servers/ApplicationServer.js",
            "line": 51,
            "description": "Defines an HTTP server for the openveo application, which serves front and back end pages.",
            "extends": "Server",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "sessionSecret",
                            "description": "Hash to encrypt sessions",
                            "type": "String"
                        },
                        {
                            "name": "httpPort",
                            "description": "HTTP server port",
                            "type": "Number"
                        },
                        {
                            "name": "socketPort",
                            "description": "Socket server port",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-servers",
            "namespace": "",
            "file": "app/server/servers/Server.js",
            "line": 9,
            "description": "Defines an HTTP Server. This Class must not be used directly,\ninstead use one of the sub classes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration",
                    "type": "Object"
                }
            ]
        },
        "WebServiceServer": {
            "name": "WebServiceServer",
            "shortname": "WebServiceServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-servers",
            "namespace": "",
            "file": "app/server/servers/WebServiceServer.js",
            "line": 23,
            "description": "Defines an HTTP server for the web service.",
            "extends": "Server",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "port",
                            "description": "Web service HTTP server port",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "api": {
            "name": "api",
            "shortname": "api",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app/server/api.js",
            "line": 9,
            "description": "API manipulates the list of loaded plugins and exposes their APIs.",
            "static": 1
        },
        "authenticator": {
            "name": "authenticator",
            "shortname": "authenticator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app/server/authenticator.js",
            "line": 15,
            "description": "The authenticator helps manipulate users authenticated by passport strategies.\n\nUsers returned by passport are not necessary OpenVeo users. It could be users from a third party authentication\nserver. The authenticator helps making sure that the authenticated user is a ready to use OpenVeo user.",
            "static": 1
        },
        "HTTP_ERRORS": {
            "name": "HTTP_ERRORS",
            "shortname": "HTTP_ERRORS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app/server/httpErrors.js",
            "line": 7,
            "description": "The list of HTTP errors with, for each error, its associated\nhexadecimal code and HTTP return code.\nHTTP errors are sent by {{#crossLinkModule \"controllers\"}}{{/crossLinkModule}}.",
            "example": [
                "\n    var httpErrors = process.require('app/server/httpErrors.js');\n    console.log(httpErrors.UNKNOWN_ERROR);"
            ],
            "static": 1
        },
        "path": {
            "name": "path",
            "shortname": "path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app/server/path.js",
            "line": 7,
            "description": "Provides functions to manipulate HTTP paths handled by the server.",
            "static": 1
        },
        "storage": {
            "name": "storage",
            "shortname": "storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app/server/storage.js",
            "line": 7,
            "description": "Storage is a global context for the core.",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app/server/controllers/ApplicationController.js",
            "line": 29,
            "description": "Gets the list of scopes and return it as a JSON object.",
            "itemtype": "method",
            "name": "getScopesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                }
            ],
            "class": "ApplicationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/ApplicationController.js",
            "line": 52,
            "description": "Gets applications.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of applications by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of applications\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned applications",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned applications. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "query",
                                    "description": "Search query to search on application name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The application field To sort by (only \"name\" is available right now)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"name\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ApplicationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/ApplicationController.js",
            "line": 140,
            "description": "Gets an instance of the provider associated to the controller.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "ClientProvider"
            },
            "class": "ApplicationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 15,
            "description": "Retrieves, recursively, the permission corresponding to the couple url / http method.",
            "example": [
                "\n    var permissions = [\n      {\n        label: 'Permissions group',\n        permissions: [\n          {\n            id: 'perm-1',\n            name: 'Name of the permission',\n            description: 'Description of the permission',\n            paths: [ 'get /publishVideo' ]\n          }\n        ]\n      }\n    ];\n    getPermissionByUrl(permissions, '/publishVideo', 'GET'); // \"perm-1\"\n    getPermissionByUrl(permissions, '/video', 'GET'); // null"
            ],
            "itemtype": "method",
            "name": "getPermissionByUrl",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The list of permissions",
                    "type": "Array"
                },
                {
                    "name": "url",
                    "description": "An url",
                    "type": "String"
                },
                {
                    "name": "httpMethod",
                    "description": "The http method (POST, GET, PUT, DELETE)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The permission id if found, null otherwise",
                "type": "String"
            },
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 72,
            "description": "Checks if asked page is the user profile.\n\nAll users must have access to its profile.",
            "itemtype": "method",
            "name": "isUserProfileUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "request",
                    "description": "The express request object handled by the server",
                    "type": "Object",
                    "props": [
                        {
                            "name": "user",
                            "description": "The connected user",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The connected user id",
                                    "type": "String"
                                },
                                {
                                    "name": "locked",
                                    "description": "true if user is locked, false otherwise",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "method",
                            "description": "Request's HTTP method",
                            "type": "String"
                        },
                        {
                            "name": "path",
                            "description": "Request's path",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "true if the page is the user profile page, false otherwise",
                "type": "Boolean"
            },
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 106,
            "description": "Handles user authentication using internal providers (which do not require a redirection to a third party site).",
            "itemtype": "method",
            "name": "authenticateInternalAction",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "login",
                                    "description": "The login",
                                    "type": "String"
                                },
                                {
                                    "name": "password",
                                    "description": "The password",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 164,
            "description": "Handles user authentication using external providers (which require a redirection on third party site).",
            "itemtype": "method",
            "name": "authenticateExternalAction",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "type",
                                    "description": "The authentication provider to use",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 212,
            "description": "Logs out user.\n\nAn HTTP code 200 is returned to the client with no content.",
            "itemtype": "method",
            "name": "logoutAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 247,
            "description": "Checks if current request is authenticated.\n\nIf not send back an HTTP code 401 with appropriate page.\nIt just get to the next route action if permission is granted.",
            "itemtype": "method",
            "name": "restrictAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "url",
                            "description": "Request's url",
                            "type": "String"
                        },
                        {
                            "name": "method",
                            "description": "Request's method",
                            "type": "String"
                        },
                        {
                            "name": "user",
                            "description": "The connected user",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The connected user id",
                                    "type": "String"
                                },
                                {
                                    "name": "permissions",
                                    "description": "The connected user permissions",
                                    "type": "Array"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/AuthenticationController.js",
            "line": 297,
            "description": "Gets the tree of groups / permissions and return it as a JSON object.",
            "itemtype": "method",
            "name": "getPermissionsAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/DefaultController.js",
            "line": 29,
            "description": "Handles back office default action to display main HTML.\n\nIf no other action were performed display the main back\noffice template.\nConfiguration files of the openveo plugin and openveo sub plugins\nare used to retrieve the list of files to load within the template.\nJavaScript libraries, JavaScript files and CSS files.",
            "itemtype": "method",
            "name": "defaultAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "DefaultController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/ErrorController.js",
            "line": 28,
            "description": "Handles requests which does not correspond to anything.",
            "itemtype": "method",
            "name": "notFoundAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ErrorController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/ErrorController.js",
            "line": 40,
            "description": "Handles all errors.",
            "itemtype": "method",
            "name": "errorAction",
            "params": [
                {
                    "name": "error",
                    "description": "An error object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "httCode",
                            "description": "The code HTTP to return for this error",
                            "type": "Number"
                        },
                        {
                            "name": "message",
                            "description": "The message with the error",
                            "type": "Number"
                        },
                        {
                            "name": "code",
                            "description": "The error code",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "UNKNOWN_ERROR"
                        },
                        {
                            "name": "module",
                            "description": "The name of the plugin the error belongs to",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "core"
                        }
                    ]
                },
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "method",
                            "description": "Request's HTTP method",
                            "type": "Request"
                        },
                        {
                            "name": "url",
                            "description": "Request's url",
                            "type": "Request"
                        },
                        {
                            "name": "headers",
                            "description": "Request's headers",
                            "type": "Request"
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ErrorController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/ErrorController.js",
            "line": 90,
            "description": "Handles forgotten requests.\n\nDepending on request Accept HTTP header, either an HTML content,\na JSON content or a text content will be returned with a 404 code.",
            "itemtype": "method",
            "name": "notFoundPageAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "method",
                            "description": "Request's HTTP method",
                            "type": "Request"
                        },
                        {
                            "name": "url",
                            "description": "Request's url",
                            "type": "Request"
                        },
                        {
                            "name": "headers",
                            "description": "Request's headers",
                            "type": "Request"
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                }
            ],
            "class": "ErrorController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/GroupController.js",
            "line": 28,
            "description": "Gets a list of groups.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of groups by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of groups\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned groups",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned groups. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "query",
                                    "description": "Search query to search on both group names and descriptions",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The field to sort by (either \"name\" or \"description\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"name\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "GroupController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/GroupController.js",
            "line": 121,
            "description": "Gets an instance of the provider associated to the controller.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "GroupProvider"
            },
            "class": "GroupController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/I18nController.js",
            "line": 26,
            "description": "Gets a public dictionary of translations by its name.",
            "example": [
                "\n    {\n      ENGLISH: 'Anglais',\n      FRENCH: 'Français',\n      ...\n    }\n\nIf no dictionary is found, a JSON 404 Not Found response is send back."
            ],
            "itemtype": "method",
            "name": "getDictionaryAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "dictionary",
                                    "description": "The name of the dictionary",
                                    "type": "String"
                                },
                                {
                                    "name": "code",
                                    "description": "Language code of the dictionary",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "I18nController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/I18nController.js",
            "line": 59,
            "description": "Gets a dictionary, with restricted access, by its name.\n\nTo restrict access to the dictionary, all dictionaries with\nrestricted access must be prefixed by \"admin-\".\nIf no dictionary is found, a JSON 404 Not Found response is send back\nto the client.",
            "itemtype": "method",
            "name": "getAdminDictionaryAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "dictionary",
                                    "description": "The name of the dictionary",
                                    "type": "String"
                                },
                                {
                                    "name": "code",
                                    "description": "Language code of the dictionary",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "I18nController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/MenuController.js",
            "line": 12,
            "description": "Checks if user has the given permission.",
            "itemtype": "method",
            "name": "isAuthorized",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "user",
                    "description": "The user to test",
                    "type": "Object",
                    "props": [
                        {
                            "name": "permissions",
                            "description": "The user's permissions",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "permission",
                    "description": "The permission id to check",
                    "type": "String"
                }
            ],
            "class": "MenuController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/MenuController.js",
            "line": 30,
            "description": "Filters the given menu depending on user permissions and requested\nmenu items permissions.",
            "itemtype": "method",
            "name": "filterMenuByPermissions",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "menu",
                    "description": "The menu to filter",
                    "type": "Array"
                },
                {
                    "name": "user",
                    "description": "The authenticated user",
                    "type": "Object"
                }
            ],
            "class": "MenuController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/MenuController.js",
            "line": 111,
            "description": "Gets the backend menu as a JSON object.\n\nIf menu is empty a 404 Not Found is sent.\nMenu is filtered regarding user permissions.",
            "itemtype": "method",
            "name": "getMenuAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "user",
                            "description": "The connected user",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The connected user id",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "MenuController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/OAuthController.js",
            "line": 14,
            "description": "Retrieves, from list of scopes, the scope corresponding to the couple url / http method.",
            "itemtype": "method",
            "name": "getScopeByUrl",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "An url",
                    "type": "String"
                },
                {
                    "name": "httpMethod",
                    "description": "The http method (POST, GET, PUT, DELETE)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The scope id if found, null otherwise",
                "type": "String"
            },
            "class": "OauthController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/OAuthController.js",
            "line": 47,
            "description": "Retrieves, recursively, the id of all permissions.",
            "example": [
                "\n    var permissions = [\n      {\n        label: 'Permissions group',\n        permissions: [\n          {\n            id: 'perm-1',\n            name: 'Name of the first permission',\n            description: 'Description of the first permission',\n            paths: [ 'get /path1' ]\n          }\n        ]\n      },\n      {\n        id: 'perm-2',\n        name: 'Name of the second permission',\n        description: 'Description of the second permission',\n        paths: [ 'get /path2' ]\n      }\n    ];\n    getPermissionIds(permissions); // [\"perm-1\", \"perm-2\"]"
            ],
            "itemtype": "method",
            "name": "getPermissionIds",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The list of permissions to search in",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The list of permission ids",
                "type": "Array"
            },
            "class": "OauthController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/OAuthController.js",
            "line": 114,
            "description": "Validates scopes for the given token depending on requested url.\n\nRevoke access to the service if client does not have permission.",
            "itemtype": "method",
            "name": "validateScopesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "oauth2",
                            "description": "Request's OAuth information",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "accessToken",
                                    "description": "The connected client's token",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "url",
                            "description": "The request's url",
                            "type": "String"
                        },
                        {
                            "name": "method",
                            "description": "The request's method",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "OauthController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/RoleController.js",
            "line": 28,
            "description": "Gets a list of roles.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of roles by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of roles\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned roles",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned roles. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "query",
                                    "description": "Search query to search on role names",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The field to sort by (only \"name\" is available)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"name\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "RoleController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/RoleController.js",
            "line": 116,
            "description": "Gets an instance of the provider associated to the controller.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "RoleProvider"
            },
            "class": "RoleController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/SettingsController.js",
            "line": 28,
            "description": "Gets settings.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of settings by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of settings\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request query",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "limit",
                                    "description": "A limit number of settings to retrieve per page (default to 10)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The page number started at 0 for the first page (default to 0)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "Either \"asc\" for ascendant or \"desc\" for descendant",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "SettingsController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/SettingsController.js",
            "line": 92,
            "description": "Gets a specific setting.\n\nIf setting is not found it is sent with value null.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entity\" : { ... }\n    }"
            ],
            "itemtype": "method",
            "name": "getEntityAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The setting id to retrieve",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "SettingsController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/SettingsController.js",
            "line": 139,
            "description": "Gets an instance of the provider associated to the controller.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "SettingsProvider"
            },
            "class": "SettingsController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/TaxonomyController.js",
            "line": 28,
            "description": "Gets a list of taxonomies.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of taxonomies by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of taxonomies\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned taxonomies",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned taxonomies. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "query",
                                    "description": "Search query to search on taxonomy name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The field to sort by (only \"name\" is available right now)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"name\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/TaxonomyController.js",
            "line": 116,
            "description": "Gets the list of terms of a taxonomy.",
            "example": [
                "\n\n    // Response example\n    {\n      \"terms\" : [ ... ]\n    }"
            ],
            "itemtype": "method",
            "name": "getTaxonomyTermsAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The id of the taxonomy to get terms from",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/TaxonomyController.js",
            "line": 163,
            "description": "Gets an instance of the provider associated to the controller.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "TaxonomyProvider"
            },
            "class": "TaxonomyController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/UserController.js",
            "line": 28,
            "description": "Gets a list of users.",
            "example": [
                "\n\n    // Response example\n    {\n      \"entities\" : [ ... ],\n      \"pagination\" : {\n        \"limit\": ..., // The limit number of users by page\n        \"page\": ..., // The actual page\n        \"pages\": ..., // The total number of pages\n        \"size\": ... // The total number of users\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "include",
                                    "description": "The list of fields to include from returned users",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "exclude",
                                    "description": "The list of fields to exclude from returned users. Ignored if\ninclude is also specified.",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "query",
                                    "description": "Search query to search in user names",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "useSmartSearch",
                                    "description": "1 to use a more advanced search mechanism, 0 to use a simple search\nbased on a regular expression",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "origin",
                                    "description": "The users origin (either cas, ldap, local or all)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "all"
                                },
                                {
                                    "name": "email",
                                    "description": "To filter users by email",
                                    "type": "String|Array",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The field to sort by (only \"name\" is available right now)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"name\""
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "\"desc\""
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "UserController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/UserController.js",
            "line": 138,
            "description": "Updates a user.",
            "example": [
                "\n\n    // Response example\n    {\n      \"total\": 1\n    }"
            ],
            "itemtype": "method",
            "name": "updateEntityAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Id of the user to update",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "name",
                                    "description": "User's name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "email",
                                    "description": "User's email",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "password",
                                    "description": "User's password",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "passwordValidate",
                                    "description": "User's password validation",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "roles",
                                    "description": "User's roles",
                                    "type": "Array",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "UserController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/controllers/UserController.js",
            "line": 202,
            "description": "Gets an instance of the provider associated to the controller.",
            "itemtype": "method",
            "name": "getProvider",
            "return": {
                "description": "The provider",
                "type": "UserProvider"
            },
            "class": "UserController",
            "module": "core-controllers"
        },
        {
            "file": "app/server/loaders/entityLoader.js",
            "line": 14,
            "description": "Builds entities for plugins.",
            "example": [
                "\n    // Results\n    {\n      core: {\n        mountPath: '/',\n        path: '/home/openveo/',\n        entities: {\n          applications: 'app/server/controllers/ApplicationController'\n        }\n      },\n      publish: {\n        mountPath: '/publish',\n        path: '/home/openveo/node_modules/@openveo/publish',\n        entities: {\n          videos: 'app/server/controllers/VideoController'\n        }\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "buildEntities",
            "static": 1,
            "params": [
                {
                    "name": "plugins",
                    "description": "The list of plugins",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The list of entities, for plugins, ordered by plugin name",
                "type": "Object"
            },
            "throws": {
                "description": "A TypeError if plugins is not an array",
                "type": "TypeError"
            },
            "class": "entityLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/entityLoader.js",
            "line": 61,
            "description": "Builds CRUD routes for entities.",
            "example": [
                "\n    // List of entities as described in configuration file\n    {\n      'applications': '/home/openveo/app/server/controllers/ApplicationController'\n    }",
                "\n    // Results\n    {\n      'get /applications/:id': '/home/openveo/app/server/controllers/ApplicationController.getEntityAction',\n      'get /applications': '/home/openveo/app/server/controllers/ApplicationController.getEntitiesAction',\n      'post /applications/:id': '/home/openveo/app/server/controllers/ApplicationController.updateEntityAction',\n      'put /applications': '/home/openveo/app/server/controllers/ApplicationController.addEntitiesAction',\n      'delete /applications/:id': '/home/openveo/app/server/controllers/ApplicationController.removeEntitiesAction'\n    }"
            ],
            "itemtype": "method",
            "name": "buildEntitiesRoutes",
            "static": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The list of routes for all entities",
                "type": "Object"
            },
            "class": "entityLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/namespaceLoader.js",
            "line": 17,
            "description": "The list of socket controllers path with associated controller instance.\n\nIt is used to instantiate each controller only once.",
            "itemtype": "property",
            "name": "controllers",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "namespaceLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/namespaceLoader.js",
            "line": 29,
            "description": "Attaches handlers to namespace.",
            "example": [
                "\n    var namespaceLoader = process.require('app/server/loaders/namespaceLoader.js');\n    var messagesDescriptors = {\n      test1: 'app/server/controllers/TestSocketController.test1Action',\n      test2: 'app/server/controllers/TestSocketController.test2Action'\n    };\n\n    namespaceLoader.addHandlers(namespace, messagesDescriptors, '/home/openveo/node_modules/openveo-plugin');"
            ],
            "itemtype": "method",
            "name": "addHandlers",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "The socket namespace",
                    "type": "SocketNamespace"
                },
                {
                    "name": "messagesDescriptors",
                    "description": "A list of socket namespace messages with associated controller / action",
                    "type": "Object"
                },
                {
                    "name": "pluginPath",
                    "description": "The root path of the plugin associated to the namespace used to find controllers\nassociated to messages",
                    "type": "String"
                }
            ],
            "class": "namespaceLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/permissionLoader.js",
            "line": 23,
            "description": "Makes sure all permissions of a plugin are prefixed by the name of the plugin.\n\nIf a permission is not prefixed by the name of the plugin, the prefix is automatically added.",
            "itemtype": "method",
            "name": "prefixPermissions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pluginName",
                    "description": "Plugin's name",
                    "type": "String"
                },
                {
                    "name": "permissions",
                    "description": "Plugin's permissions",
                    "type": "Object"
                }
            ],
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/permissionLoader.js",
            "line": 45,
            "description": "Generates add/update/delete permissions for entities.\n\nPermission's translation keys for name and description are generated using the formats\n\"PERMISSIONS.{PLUGIN_NAME}_{OPERATION}_{ENTITY_NAME}_NAME\" and\n\"PERMISSIONS.{PLUGIN_NAME}_{OPERATION}_{ENTITY_NAME}_DESCRIPTION\".\n\nContent entities won't generate any permissions.",
            "example": [
                "\n    var permissionLoader= process.require('app/server/loaders/permissionLoader.js');\n    var entities = {\n      {\n        core: {\n          mountPath: '/',\n          path: '/home/openveo/',\n          entities: {\n            applications: 'app/server/controllers/ApplicationController'\n          }\n        },\n        publish: {\n          mountPath: '/publish',\n          path: '/home/openveo/node_modules/@openveo/publish/',\n          entities: {\n            videos: 'app/server/controllers/VideoController'\n          }\n        }\n      }\n    };\n\n    console.log(permissionLoader.generateEntityPermissions(entities));\n    // [\n    //   {\n    //     label: 'CORE.PERMISSIONS.GROUP_APPLICATIONS',\n    //     permissions: [\n    //       {\n    //         id : 'core-add-applications',\n    //         name : 'CORE.PERMISSIONS.ADD_APPLICATIONS_NAME',\n    //         description : 'CORE.PERMISSIONS.ADD_APPLICATIONS_DESCRIPTION',\n    //         paths : [ 'put /applications*' ]\n    //       },\n    //       {\n    //         id : 'core-update-applications',\n    //         name : 'CORE.PERMISSIONS.UPDATE_APPLICATIONS_NAME',\n    //         description : 'CORE.PERMISSIONS.UPDATE_APPLICATIONS_DESCRIPTION',\n    //         paths : [ 'post /applications*' ]\n    //       },\n    //       {\n    //         id : 'core-delete-applications',\n    //         name : 'CORE.PERMISSIONS.DELETE_APPLICATIONS_NAME',\n    //         description : 'CORE.PERMISSIONS.DELETE_APPLICATIONS_DESCRIPTION',\n    //         paths : [ 'delete /applications*' ]\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     label: 'PUBLISH.PERMISSIONS.GROUP_VIDEOS',\n    //     permissions: [\n    //       {\n    //         id : 'publish-add-videos',\n    //         name : 'PUBLISH.PERMISSIONS.ADD_VIDEOS_NAME',\n    //         description : 'PUBLISH.PERMISSIONS.ADD_VIDEOS_DESCRIPTION',\n    //         paths : [ 'put /publish/videos*' ]\n    //       },\n    //       {\n    //         id : 'publish-update-videos',\n    //         name : 'PUBLISH.PERMISSIONS.UPDATE_VIDEOS_NAME',\n    //         description : 'PUBLISH.PERMISSIONS.UPDATE_VIDEOS_DESCRIPTION',\n    //         paths : [ 'post /publish/videos*' ]\n    //       },\n    //       {\n    //         id : 'publish-delete-videos',\n    //         name : 'PUBLISH.PERMISSIONS.DELETE_VIDEOS_NAME',\n    //         description : 'PUBLISH.PERMISSIONS.DELETE_VIDEOS_DESCRIPTION',\n    //         paths : [ 'delete /publish/videos*' ]\n    //       }\n    //     ]\n    //   }\n    // ]"
            ],
            "itemtype": "method",
            "name": "generateEntityPermissions",
            "static": 1,
            "params": [
                {
                    "name": "pluginsEntities",
                    "description": "The list of entities ordered by plugins",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Permissions for all entities",
                "type": "Object"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/permissionLoader.js",
            "line": 177,
            "description": "Builds entities' scopes.",
            "example": [
                "\n    // List of entities by plugin\n    {\n      publish: {\n        mountPath: '/publish',\n        path: '/home/openveo/node_modules/@openveo/publish',\n        entities: {\n          videos: 'app/server/controllers/VideoController'\n        }\n      }\n    }",
                "\n    // Result\n    [\n      {\n        id: 'publish-get-videos',\n        name: 'PUBLISH.WS_SCOPES.GET_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.GET_VIDEOS_DESCRIPTON',\n        paths: [\n          'get /publish/videos*'\n        ]\n      },\n      {\n        id: 'publish-add-videos',\n        name: 'PUBLISH.WS_SCOPES.ADD_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.ADD_VIDEOS_DESCRIPTON',\n        paths: [\n          'put /publish/videos*'\n        ]\n      },\n      {\n        id: 'publish-update-videos',\n        name: 'PUBLISH.WS_SCOPES.UPDATE_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.UPDATE_VIDEOS_DESCRIPTON',\n        paths: [\n          'post /publish/videos*'\n        ]\n      },\n      {\n        id: 'publish-delete-videos',\n        name: 'PUBLISH.WS_SCOPES.DELETE_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.DELETE_VIDEOS_DESCRIPTON',\n        paths: [\n          'delete /publish/videos*'\n        ]\n      }\n    ]"
            ],
            "itemtype": "method",
            "name": "generateEntityScopes",
            "static": 1,
            "params": [
                {
                    "name": "pluginsEntities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The list of web service scopes for all entities exposed by all plugins",
                "type": "Array"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/permissionLoader.js",
            "line": 272,
            "description": "Reorganizes orphaned top permissions into a generic group.",
            "example": [
                "\n    var permissionLoader= process.require('app/server/loaders/permissionLoader.js');\n    var permissions = [\n      {\n        'id' : 'orphaned-permission',\n        'name' : 'ORPHANED_PERM_NAME',\n        'description' : 'ORPHANED_PERM_DESCRIPTION'\n      }\n    ];\n    console.log(permissionLoader.groupOrphanedPermissions(permissions));\n    // [\n    //   {\n    //     label: 'CORE.PERMISSIONS.GROUP_OTHERS',\n    //     permissions: [\n    //       {\n    //         'id' : 'orphaned-permission',\n    //         'name' : 'ORPHANED_PERM_NAME',\n    //         'description' : 'ORPHANED_PERM_DESCRIPTION'\n    //       }\n    //     ]\n    //   }\n    // ]"
            ],
            "itemtype": "method",
            "name": "groupOrphanedPermissions",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The list of permissions with group\npermissions and eventually orphaned permission not attached to any group",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The same list of permissions except that orphaned\npermissions are extracted into a generic group",
                "type": "Object"
            },
            "throws": {
                "description": "An error if permissions is not a valid array",
                "type": "TypeError"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/permissionLoader.js",
            "line": 342,
            "description": "Builds the list of scopes.",
            "itemtype": "method",
            "name": "buildScopes",
            "static": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "Entities to build scopes from",
                    "type": "Object"
                },
                {
                    "name": "plugins",
                    "description": "The list of plugins",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The list of generated scopes",
                "type": "Array"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/permissionLoader.js",
            "line": 365,
            "description": "Builds the list of permissions.\n\nadd/delete/update permissions are generated for each entity and get/update/delete permissions are\ncreated for each group.\n\nOrphaned permissions are grouped in a generic group of permissions.",
            "itemtype": "method",
            "name": "buildPermissions",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "Entities to build permissions from",
                    "type": "Object"
                },
                {
                    "name": "plugins",
                    "description": "The list of plugins",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with :\n - **Error** An error if something went wrong\n - **Array** The list of generated persmissions",
                    "type": "Function"
                }
            ],
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/pluginLoader.js",
            "line": 22,
            "description": "Filters the list of plugins paths in case the same plugin appears\nmultiple time at different paths. Filters to keep only the most\ntop level one.",
            "example": [
                "\n    var pluginsPaths = [\n      '/openveo/node_modules/@openveo/plugin1',\n      '/openveo/node_modules/@openveo/plugin2/node_modules/@openveo/plugin1'\n    ];\n    console.log(filterPluginsPaths(pluginsPaths));\n    // [ '/openveo/node_modules/@openveo/plugin1' ]"
            ],
            "itemtype": "method",
            "name": "filterPluginsPaths",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "pluginsPaths",
                    "description": "The list of plugins paths to analyze",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The filtered list of plugins paths",
                "type": "Array"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/pluginLoader.js",
            "line": 78,
            "description": "Recursively and asynchronously analyze the given directory to get\nnpm plugins.\n\nThere are two kinds of plugins : plugins maintained by the core team (under @openveo scope)\nand contributers' plugins which must be prefixed by **openveo-**.",
            "example": [
                "\n    getPluginPaths('/openveo', function(error, pluginsPaths){\n      console.log(pluginsPaths);\n      // [\n      //   '/openveo/node_modules/@openveo/plugin',\n      //   '/openveo/node_modules/openveo-contrib-plugin'\n      // ]\n    };"
            ],
            "itemtype": "method",
            "name": "getPluginPaths",
            "static": 1,
            "params": [
                {
                    "name": "startingPath",
                    "description": "Root path of an NPM module from where looking for plugins",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback with two arguments :\n   - **Error** An Error object or null\n   - **Array** The list of plugins paths",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "An error if starting path is not a valid string",
                "type": "TypeError"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/pluginLoader.js",
            "line": 205,
            "description": "Recursively and asynchronously load all offical and contributed OpenVeo plugins under the given path.\n\nIf the same plugin (same name) is encountered several times, the top level one\nwill be kept.",
            "example": [
                "\n    var pluginLoader = process.require('app/server/loaders/pluginLoader.js');\n\n    // Load all potential openveo plugins from directory /home/openveo/openveo\n    pluginLoader.loadPlugins('/home/openveo/openveo', function(error, plugins){\n      console.log(plugins);\n    };"
            ],
            "itemtype": "method",
            "name": "loadPlugins",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "startingPath",
                    "description": "Root path of an NPM module from where looking for plugins",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback with two arguments :\n   - **Error** An Error object or null\n   - **Array** A list of Plugin objects",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "An error if starting path is not a valid string",
                "type": "TypeError"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/pluginLoader.js",
            "line": 281,
            "description": "Loads a single plugin by its path.",
            "example": [
                "\n    var pluginLoader = process.require('app/server/loaders/pluginLoader.js');\n\n    // Load a plugin\n    pluginLoader.loadPlugin('/node_modules/@openveo/publish', function(error, loadedPlugin){\n      console.log(loadedPlugin);\n    }"
            ],
            "itemtype": "method",
            "name": "loadPlugin",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "pluginPath",
                    "description": "Absolute path to the plugin directory",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback with two arguments :\n   - **Error** An Error object or null\n   - **Plugin** The loaded plugin or null",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "An error if plugin path or starting path is not a valid string",
                "type": "TypeError"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/pluginLoader.js",
            "line": 370,
            "description": "Loads plugin's configuration.",
            "itemtype": "method",
            "name": "loadPluginMetadata",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin",
                    "type": "Plugin"
                },
                {
                    "name": "callback",
                    "description": "A callback with :\n   - **Error** An Error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/routeLoader.js",
            "line": 21,
            "description": "Gets the list of routes from a route configuration object with,\nfor each one, the method, the path and the action to call.",
            "example": [
                "\n    var routeLoader = process.require('app/server/loaders/routeLoader.js');\n    var routes = {\n      'get /test' : 'app/server/controllers/TestController.getTestAction',\n      'post /test' : 'app/server/controllers/TestController.postTestAction'\n    };\n\n    console.log(routeLoader.decodeRoutes('/', routes));\n    // [\n    //   {\n    //     method: 'get',\n    //     path: '/test',\n    //     action: Function\n    //   },\n    //   {\n    //     method: 'post',\n    //     path: 'test',\n    //     action: Function\n    //   }\n    // ]"
            ],
            "itemtype": "method",
            "name": "decodeRoutes",
            "static": 1,
            "params": [
                {
                    "name": "pluginPath",
                    "description": "The root path of the plugin associated to the routes",
                    "type": "String"
                },
                {
                    "name": "routes",
                    "description": "An object of routes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The decoded list of routes",
                "type": "Array"
            },
            "throws": {
                "description": "If one of the route controllers is not a Controller",
                "type": "TypeError"
            },
            "class": "routeLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/loaders/routeLoader.js",
            "line": 138,
            "description": "Applies a list of routes to a router.",
            "example": [
                "\n    var router = express.Router();\n    var routeLoader = process.require('app/server/loaders/routeLoader.js');\n    var routes = [\n      {\n        method: 'get',\n        path: '/logout',\n        action: [Function]\n      }\n    ];\n    routeLoader.applyRoutes(routes, router);"
            ],
            "itemtype": "method",
            "name": "applyRoutes",
            "static": 1,
            "params": [
                {
                    "name": "routes",
                    "description": "The list of routes to apply",
                    "type": "Array"
                },
                {
                    "name": "router",
                    "description": "An express router to attach the routes to",
                    "type": "Object"
                }
            ],
            "class": "routeLoader",
            "module": "core-loaders"
        },
        {
            "file": "app/server/migration/migrationProcess.js",
            "line": 21,
            "description": "Saves in core_system table the last migration successfull done.",
            "itemtype": "method",
            "name": "saveMigrationVersion",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of module (core, publish...)",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "Version of the script successfully executed",
                    "type": "String"
                },
                {
                    "name": "db",
                    "description": "DB instance to update value",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback A callback with 1 arguments :\n   - **Error** An Error object or null",
                    "type": "Function"
                }
            ],
            "class": "migrationProcess",
            "module": "core-migration"
        },
        {
            "file": "app/server/migration/migrationProcess.js",
            "line": 68,
            "description": "Creates async series according to migration script order.",
            "itemtype": "method",
            "name": "createMigrationSeries",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "module",
                    "description": "Script collection to execute\n exemple: {\n   1.1.0 : 'path/to/migration/1.1.0.js',\n   1.2.0 : 'path/to/migration/1.2.0.js'\n }",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Name of module (core, publish...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of synchronous function to execute",
                "type": "Array"
            },
            "class": "migrationProcess",
            "module": "core-migration"
        },
        {
            "file": "app/server/migration/migrationProcess.js",
            "line": 103,
            "description": "Executes a collection of migration script.",
            "itemtype": "method",
            "name": "executeMigrationScript",
            "params": [
                {
                    "name": "migrations",
                    "description": "migrations object to execute\n exemple:\n {\n   core:{\n     1.1.0: 'path/to/migration/1.1.0.js',\n     2.0.0: 'path/to/migration/2.0.0.js'\n   },\n   publish:{\n     1.2.0: 'path/to/migration/1.2.0.js',\n     1.3.0: 'path/to/migration/1.3.0.js',\n   }\n }",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback with 1 arguments :\n   - **Error** An Error object or null",
                    "type": "Function"
                }
            ],
            "class": "migrationProcess",
            "module": "core-migration"
        },
        {
            "file": "app/server/oauth/accessToken.js",
            "line": 22,
            "description": "Gets token provider.",
            "itemtype": "method",
            "name": "getTokenProvider",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The token provider",
                "type": "TokenProvider"
            },
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/accessToken.js",
            "line": 36,
            "description": "Creates access token and saves it in database.\n\nIt will previously remove all tokens associated to the client.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "userId",
                    "description": "User identifier associated to the OAuth client",
                    "type": "String"
                },
                {
                    "name": "clientId",
                    "description": "OAuth client id",
                    "type": "String"
                },
                {
                    "name": "scopes",
                    "description": "The list of scopes",
                    "type": "Object"
                },
                {
                    "name": "ttl",
                    "description": "Token time to live (in seconds)",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "with:\n - **Object** An error if something went wrong or null if everything is fine\n - **String** The access token",
                    "type": "Function"
                }
            ],
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/accessToken.js",
            "line": 77,
            "description": "Fetches accessToken object by token.",
            "itemtype": "method",
            "name": "fetchByToken",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "Client's access token",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Object** An error if something went wrong or null if everything is fine\n - **Object** The access token",
                    "type": "Function"
                }
            ],
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/accessToken.js",
            "line": 93,
            "description": "Checks if token is valid and not expired.",
            "itemtype": "method",
            "name": "checkTTL",
            "static": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The access token",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the token is valid, false otherwise",
                "type": "Boolean"
            },
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/accessToken.js",
            "line": 105,
            "description": "Default token Time To Live value (1 hour).",
            "itemtype": "property",
            "name": "ttl",
            "type": "Number",
            "default": "3600",
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/client.js",
            "line": 21,
            "description": "Gets client provider.",
            "itemtype": "method",
            "name": "getClientProvider",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The client provider",
                "type": "ClientProvider"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/client.js",
            "line": 35,
            "description": "Gets clients id.",
            "itemtype": "method",
            "name": "getId",
            "static": 1,
            "params": [
                {
                    "name": "oAuthClient",
                    "description": "An OAuth client",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The client's id",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The client id",
                "type": "String"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/client.js",
            "line": 48,
            "description": "Fetches client object by primary key.",
            "itemtype": "method",
            "name": "fetchById",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The client id",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Object** An error is something went wrong or null if everything is fine\n - **Object** The client object or null if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/client.js",
            "line": 63,
            "description": "Verifies client's secret.",
            "itemtype": "method",
            "name": "checkSecret",
            "static": 1,
            "params": [
                {
                    "name": "oAuthClient",
                    "description": "An OAuth client",
                    "type": "Object",
                    "props": [
                        {
                            "name": "secret",
                            "description": "The client's secret",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "secret",
                    "description": "OAuth client's secret to verify",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Error** An error is something went wrong or null if everything is fine\n - **Boolean** true if the client's secret is verified",
                    "type": "Function"
                }
            ],
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/client.js",
            "line": 79,
            "description": "Checks grant type permission for the client.\n\nFor now only client_credentials grant type is available.",
            "itemtype": "method",
            "name": "checkGrantType",
            "static": 1,
            "params": [
                {
                    "name": "client",
                    "description": "An OAuth client",
                    "type": "Object"
                },
                {
                    "name": "grantType",
                    "description": "The grant type asked by client",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the grant type is \"client_credentials\"\nfalse otherwise",
                "type": "Boolean"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app/server/oauth/client.js",
            "line": 95,
            "description": "Gets the list of scopes granted for the client.",
            "itemtype": "method",
            "name": "checkScope",
            "static": 1,
            "params": [
                {
                    "name": "oAuthClient",
                    "description": "An OAuth client",
                    "type": "Object",
                    "props": [
                        {
                            "name": "scopes",
                            "description": "The client's scopes",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "scope The list of scopes sent by the OAuth client",
                "type": "Array"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 37,
            "description": "Core plugin name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 45,
            "description": "Core plugin path.",
            "itemtype": "property",
            "name": "path",
            "type": "String",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 54,
            "description": "Core plugin mount path.",
            "itemtype": "property",
            "name": "mountPath",
            "type": "String",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 63,
            "description": "Core APIs.",
            "itemtype": "property",
            "name": "api",
            "type": "PluginApi",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 72,
            "description": "Core public router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 81,
            "description": "Core private router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 90,
            "description": "Core web service router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 105,
            "description": "Sets listeners on core hooks.",
            "itemtype": "method",
            "name": "setCoreListeners",
            "access": "private",
            "tagname": "",
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePlugin.js",
            "line": 120,
            "description": "Prepares plugin by creating required database indexes.\n\nThis is automatically called by core application after plugin is loaded.",
            "itemtype": "method",
            "name": "init",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 35,
            "description": "An instance of ClientProvider.",
            "itemtype": "property",
            "name": "clientProvider",
            "type": "ClientProvider",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 43,
            "description": "An instance of GroupProvider.",
            "itemtype": "property",
            "name": "groupProvider",
            "type": "GroupProvider",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 51,
            "description": "An instance of RoleProvider.",
            "itemtype": "property",
            "name": "roleProvider",
            "type": "RoleProvider",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 59,
            "description": "An instance of TaxonomyProvider.",
            "itemtype": "property",
            "name": "taxonomyProvider",
            "type": "TaxonomyProvider",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 67,
            "description": "An instance of UserProvider.",
            "itemtype": "property",
            "name": "userProvider",
            "type": "UserProvider",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 75,
            "description": "An instance of SettingProvider.",
            "itemtype": "property",
            "name": "settingProvider",
            "type": "SettingProvider",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 89,
            "description": "Gets the current database instance.",
            "itemtype": "method",
            "name": "getDatabase",
            "return": {
                "description": "The application's database",
                "type": "Database"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 99,
            "description": "Gets the id of the super administrator.",
            "itemtype": "method",
            "name": "getSuperAdminId",
            "return": {
                "description": "The super administrator id",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 109,
            "description": "Gets the id of the anonymous user.",
            "itemtype": "method",
            "name": "getAnonymousUserId",
            "return": {
                "description": "The anonymous user id",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 119,
            "description": "Gets the list of entities defined by plugins.",
            "itemtype": "method",
            "name": "getEntities",
            "return": {
                "description": "The list of entities by entity name",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 129,
            "description": "Gets the list of permissions defined by plugins.",
            "itemtype": "method",
            "name": "getPermissions",
            "return": {
                "description": "The list of permissions",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 139,
            "description": "Gets the list of Web Service scopes defined by plugins.",
            "itemtype": "method",
            "name": "getWebServiceScopes",
            "return": {
                "description": "The list of Web Service scopes",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 149,
            "description": "Gets information about the application server.",
            "itemtype": "method",
            "name": "getServerConfiguration",
            "return": {
                "description": "The server configuration",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 163,
            "description": "Gets a dictionary of translations by its name and language.\n\nSearch is made on i18n directory and all plugin's i18n directories.\nIf the same dictionary name is found twice (same file name in different i18n directories),\ndictionaries are merged.",
            "example": [
                "\n    process.api.getCoreApi().getTranslations('login', 'fr-FR', function(error, translations) {\n      console.log(translations);\n    });",
                "\n    process.api.getCoreApi().getTranslations('back-office', 'en', function(error, translations) {\n      console.log(translations);\n    });"
            ],
            "itemtype": "method",
            "name": "getTranslations",
            "async": 1,
            "params": [
                {
                    "name": "dictionary",
                    "description": "The name of the dictionary, this is the name of the dictionary file without\nextension",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The language country code (e.g. en-US)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done\n - **Error** An error if something went wrong\n - **Object** A JavaScript object containing all translations",
                    "type": "Function"
                }
            ],
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 269,
            "description": "Gets OpenVeo CDN url ending with a slash.",
            "itemtype": "method",
            "name": "getCdnUrl",
            "return": {
                "description": "The CDN url",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 279,
            "description": "Gets the language of the OpenVeo content.",
            "itemtype": "method",
            "name": "getContentLanguage",
            "return": {
                "description": "The content language code, see supportedContentLanguages.json file for the full list of languages",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 289,
            "description": "Gets core hooks.",
            "itemtype": "method",
            "name": "getHooks",
            "return": {
                "description": "The core hooks",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/CorePluginApi.js",
            "line": 299,
            "description": "Clear image cache",
            "params": [
                {
                    "name": "string",
                    "description": "imagePath    Relative image path"
                },
                {
                    "name": "string",
                    "description": "pluginName   Plugin name"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "clearImageCache",
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/hooks.js",
            "line": 24,
            "description": "One or several OpenVeo users have been deleted.\n\nWith:\n- **Array** The list of deleted user ids\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "USERS_DELETED",
            "type": "String",
            "default": "'users.deleted'",
            "final": 1,
            "class": "CORE_HOOKS",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/hooks.js",
            "line": 38,
            "description": "One or several OpenVeo roles have been deleted.\n\nWith:\n- **Array** The list of deleted role ids\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "ROLES_DELETED",
            "type": "String",
            "default": "'roles.deleted'",
            "final": 1,
            "class": "CORE_HOOKS",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/hooks.js",
            "line": 52,
            "description": "One or several content groups have been added.\n\nWith:\n- **Array** The list of added groups\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "GROUPS_ADDED",
            "type": "String",
            "default": "'groups.added'",
            "final": 1,
            "class": "CORE_HOOKS",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/hooks.js",
            "line": 66,
            "description": "A content group has been updated.\n\nWith:\n- **Object** The hook data with:\n  - **String** id The id of updated group\n  - **Object** modifications The list of modifications applied\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "GROUP_UPDATED",
            "type": "String",
            "default": "'group.updated'",
            "final": 1,
            "class": "CORE_HOOKS",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/hooks.js",
            "line": 82,
            "description": "One or several content groups have been deleted.\n\nWith:\n- **Array** The list of deleted groups\n- **Function** The function to call when action is done",
            "itemtype": "property",
            "name": "GROUPS_DELETED",
            "type": "String",
            "default": "'groups.deleted'",
            "final": 1,
            "class": "CORE_HOOKS",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/listener.js",
            "line": 21,
            "description": "Handles hook when roles have been deleted.\n\nDeleted roles have to be removed from users.",
            "itemtype": "method",
            "name": "onRolesDeleted",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The list of deleted role ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/listener.js",
            "line": 97,
            "description": "Handles hook when groups have been added.\n\nEach time a new group is added, 3 new permissions are created (create, update and delete) and organized in a\ngroup of permissions.",
            "itemtype": "method",
            "name": "onGroupsAdded",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "groups",
                    "description": "The list of added groups",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/listener.js",
            "line": 129,
            "description": "Handles hook when a group has been updated.\n\nEach time a group is modified, the list of permissions is updated.",
            "itemtype": "method",
            "name": "onGroupUpdated",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Hook data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The id of updated group",
                            "type": "String"
                        },
                        {
                            "name": "modifications",
                            "description": "The list of modifications applied",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "core-plugin"
        },
        {
            "file": "app/server/plugin/listener.js",
            "line": 155,
            "description": "Handles hook when groups have been deleted.\n\nEach time a group is removed, the list of permissions is updated.",
            "itemtype": "method",
            "name": "onGroupsDeleted",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The list of deleted group ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "core-plugin"
        },
        {
            "file": "app/server/providers/ClientProvider.js",
            "line": 27,
            "description": "Adds Web Service client applications.\n\nWhen adding a client a secret is automatically generated.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "clients",
                    "description": "The list of clients to store with for each client:\n  - **String** name The client name\n  - **String** [id] The client id, generated if not specified\n  - **Array** [scopes] The client scopes",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of clients inserted\n  - **Array** The list of added clients",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ClientProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/ClientProvider.js",
            "line": 63,
            "description": "Updates a client.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter client to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The client name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "scopes",
                            "description": "The client scopes",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ClientProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/ClientProvider.js",
            "line": 84,
            "description": "Creates clients indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "ClientProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/ClientProvider.js",
            "line": 109,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "ClientProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 27,
            "description": "Adds content groups.\n\nThis will execute core hook \"GROUPS_ADDED\" after adding groups with:\n- **Array** The list of added groups",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "groups",
                    "description": "The list of groups to store with for each group:\n  - **String** [id] The group id, generated if not specified\n  - **String** name The group name\n  - **String** description The group description",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of groups inserted\n  - **Array** The list of added groups",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 71,
            "description": "Updates a group.\n\nThis will execute core hook \"GROUP_UPDATED\" after updating group with:\n- **Object** The hook data with:\n  - **String** id The id of updated group\n  - **Object** modifications The list of modifications applied",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the group to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The group name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "The group description",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 126,
            "description": "Removes groups.\n\nThis will execute core hook \"GROUPS_DELETED\" after deleting groups with:\n- **Array** ids The list of deleted group ids",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter groups to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed groups",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 175,
            "description": "Creates groups indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 200,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 218,
            "description": "Creates permissions for a group.",
            "itemtype": "method",
            "name": "createGroupPermissions",
            "params": [
                {
                    "name": "id",
                    "description": "The group id",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The group name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The group permissions",
                "type": "Object"
            },
            "throws": {
                "description": "An error if required parameters are not specified",
                "type": "TypeError"
            },
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/GroupProvider.js",
            "line": 251,
            "description": "Generates permissions using groups.\n\nPermission's translation keys for name and description are generated\nusing the formats \"GROUP_{OPERATION}_NAME\" and\n\"{GROUP}_{OPERATION}_DESCRIPTION\".",
            "example": [
                "\n       // Example of generated groups\n       // [\n       //   {\n       //     label: 'My group name',\n       //     permissions: [\n       //       {\n       //         id : 'get-group-groupID',\n       //         name : 'CORE.PERMISSIONS.GROUP_GET_NAME',\n       //         description : 'CORE.PERMISSIONS.GROUP_GET_DESCRIPTION'\n       //       },\n       //       {\n       //         id : 'update-group-groupID',\n       //         name : 'CORE.PERMISSIONS.GROUP_UPDATE_NAME',\n       //         description : 'CORE.PERMISSIONS.GROUP_UPDATE_DESCRIPTION'\n       //       },\n       //       {\n       //         id : 'delete-group-groupID',\n       //         name : 'CORE.PERMISSIONS.GROUP_DELETE_NAME',\n       //         description : 'CORE.PERMISSIONS.GROUP_DELETE_DESCRIPTION'\n       //       }\n       //     ]\n       //   }\n       // ]\n\n    });"
            ],
            "itemtype": "method",
            "name": "generateGroupPermissions",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise\n - **Array** The list of group permissions",
                    "type": "Function"
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/RoleProvider.js",
            "line": 26,
            "description": "Adds roles.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "roles",
                    "description": "The list of roles to store with for each role:\n  - **String** name The role name\n  - **Array** permissions The role permissions\n  - **String** [id] The role id, generated if not specified",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of roles inserted\n  - **Array** The list of added roles",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/RoleProvider.js",
            "line": 59,
            "description": "Removes roles.\n\nThis will execute core hook \"ROLES_DELETED\" after deleting roles with:\n- **Array** ids The list of deleted role ids",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter roles to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed roles",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/RoleProvider.js",
            "line": 108,
            "description": "Updates a role.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the role to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The role name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "permissions",
                            "description": "The role permissions",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/RoleProvider.js",
            "line": 129,
            "description": "Creates roles indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/RoleProvider.js",
            "line": 154,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/SettingProvider.js",
            "line": 27,
            "description": "Adds settings.\n\nIf a setting already exists, an update is performed.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "The list of settings to store with for each setting:\n  - **String** id The setting key\n  - **Mixed** value The setting value",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of settings inserted / updated\n  - **Array** The list of added / updated settings",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "SettingProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/SettingProvider.js",
            "line": 129,
            "description": "Updates a setting.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the setting to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The setting value",
                            "type": "Mixed"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "SettingProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/SettingProvider.js",
            "line": 148,
            "description": "Creates users indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "SettingProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TaxonomyProvider.js",
            "line": 28,
            "description": "Gets the list of terms of a taxonomy.",
            "itemtype": "method",
            "name": "getTaxonomyTerms",
            "async": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The taxonomy name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n - **Error** An error if something went wrong\n - **Array** The taxonomy terms",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TaxonomyProvider.js",
            "line": 53,
            "description": "Updates a taxonomy.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the taxonomy to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The taxonomy name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "tree",
                            "description": "The list of terms in the taxonomy with for each term:\n  - **String** id Term id\n  - **String** title Term title\n  - **Array** items Term sub terms",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "TaxonomyProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TaxonomyProvider.js",
            "line": 77,
            "description": "Adds taxonomies.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "taxonomies",
                    "description": "The list of taxonomies to store with for each taxonomy:\n  - **String** name The taxonomy name\n  - **Array** tree The list of terms in the taxonomy with for each term:\n    - **String** id Term id\n    - **String** title Term title\n    - **Array** items Term sub terms\n  - **String** id The taxonomy id, generated if not specified",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of taxonomies inserted\n  - **Array** The list of added taxonomies",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "TaxonomyProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TaxonomyProvider.js",
            "line": 113,
            "description": "Creates taxonomies indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TaxonomyProvider.js",
            "line": 138,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TokenProvider.js",
            "line": 25,
            "description": "Adds tokens.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "tokens",
                    "description": "The list of tokens to store with for each token:\n  - **String** clientId The client id the token belongs to\n  - **Number** ttl The time to live in milliseconds of the token\n  - **Array** [scopes] A list of scopes with granted access for this token",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of tokens inserted\n  - **Array** The list of added tokens",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "TokenProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TokenProvider.js",
            "line": 59,
            "description": "Updates a token.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the token to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ttl",
                            "description": "The time to live in milliseconds of the token",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "TokenProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/TokenProvider.js",
            "line": 78,
            "description": "Creates tokens indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TokenProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 33,
            "description": "Gets an internal user by its credentials.",
            "itemtype": "method",
            "name": "getUserByCredentials",
            "async": 1,
            "params": [
                {
                    "name": "email",
                    "description": "The user email",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The user clear text password",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 59,
            "description": "Gets an internal user by its email.",
            "itemtype": "method",
            "name": "getUserByEmail",
            "async": 1,
            "params": [
                {
                    "name": "email",
                    "description": "The email of the user",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 81,
            "description": "Adds users.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "users",
                    "description": "The list of users to store with for each user:\n  - **String** name The user name\n  - **String** email The user email\n  - **String** password The user password\n  - **String** passwordValidate The user password validation\n  - **String** [id] The user id, generated if not specified\n  - **Array** [roles] The user role ids\n  - **Boolean** [locked=false] true to lock the user from edition, false otherwise",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of users inserted\n  - **Array** The list of added users",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 173,
            "description": "Updates an internal user.",
            "itemtype": "method",
            "name": "updateOne",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter the user to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The user name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "email",
                            "description": "The user email",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "password",
                            "description": "The user password. Also requires passwordValidate",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "passwordValidate",
                            "description": "The user password validation. Also requires password",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "roles",
                            "description": "The user role ids",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "locked",
                            "description": "true to lock the user from edition, false otherwise",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 276,
            "description": "Removes users.\n\nThis will execute core hook \"USERS_DELETED\" after removing users with:\n- **Array** The ids of deleted users",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter users to remove",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed users",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 325,
            "description": "Adds external users.\n\nExternal users are automatically locked when added.",
            "itemtype": "method",
            "name": "addThirdPartyUsers",
            "async": 1,
            "params": [
                {
                    "name": "users",
                    "description": "The list of users to add with for each user:\n  - **String** name The user name\n  - **String** email The user email\n  - **String** origin Id of the third party provider system\n  - **String** originId The user id in third party provider system\n  - **String** [id] The user id, generated if not specified\n  - **Array** [originGroups] The user groups in third party provider system\n  - **Array** [roles] The user role ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of users inserted\n  - **Array** The inserted users",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 376,
            "description": "Updates an external user.",
            "itemtype": "method",
            "name": "updateThirdPartyUser",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter users to update",
                    "type": "ResourceFilter",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "The modifications to perform",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The user name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "email",
                            "description": "The user email",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "originGroups",
                            "description": "The user groups in third party provider system",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "roles",
                            "description": "The user role ids",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "locked",
                            "description": "true to lock the user from edition, false otherwise",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "origin",
                    "description": "The user origin (see openVeoApi.passport.STRATEGIES)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** 1 if everything went fine",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 413,
            "description": "Creates users indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/providers/UserProvider.js",
            "line": 438,
            "description": "Drops an index from database collection.",
            "itemtype": "method",
            "name": "dropIndex",
            "async": 1,
            "params": [
                {
                    "name": "indexName",
                    "description": "The name of the index to drop",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done with:\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 67,
            "description": "List of path holding template engine views.",
            "itemtype": "property",
            "name": "viewsFolders",
            "type": "Array",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 75,
            "description": "Image styles for image processing.",
            "itemtype": "property",
            "name": "imagesStyle",
            "type": "Object",
            "final": 1,
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 84,
            "description": "Back end menu description object.",
            "itemtype": "property",
            "name": "menu",
            "type": "Array",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 92,
            "description": "Migrations scripts to execute.",
            "itemtype": "property",
            "name": "migrations",
            "type": "Object",
            "final": 1,
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 101,
            "description": "Socket server.",
            "itemtype": "property",
            "name": "socketServer",
            "type": "SocketServer",
            "final": 1,
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 110,
            "description": "Database session storage.",
            "itemtype": "property",
            "name": "sessionStore",
            "type": "Object",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 118,
            "description": "Express session middleware.",
            "itemtype": "property",
            "name": "sessionMiddleware",
            "type": "Object",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 146,
            "description": "Initializes passport strategies to manage user authentication.",
            "itemtype": "method",
            "name": "initializePassport",
            "access": "private",
            "tagname": "",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 207,
            "description": "Prepares the express application.",
            "itemtype": "method",
            "name": "onDatabaseAvailable",
            "async": 1,
            "params": [
                {
                    "name": "db",
                    "description": "The application database",
                    "type": "Database"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 241,
            "description": "Loads plugin.\n\nMounts plugin's assets directories, public router, private router, menu\nviews folders and permissions.",
            "itemtype": "method",
            "name": "onPluginLoaded",
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The openveo plugin",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 425,
            "description": "Finalizes the ApplicationServer initialization.\n\nMounts the assets directories of core and plugins, sets views\nfolders, sets permissions and set default route and error handling.\nDefault route must load the main view due to AngularJS single\napplication.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/ApplicationServer.js",
            "line": 466,
            "description": "Starts the HTTP and socket servers.",
            "itemtype": "method",
            "name": "startServer",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/Server.js",
            "line": 20,
            "description": "Server configuration object.",
            "itemtype": "property",
            "name": "configuration",
            "type": "Object",
            "final": 1,
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/Server.js",
            "line": 29,
            "description": "Express application.",
            "itemtype": "property",
            "name": "httpServer",
            "type": "Application",
            "final": 1,
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/Server.js",
            "line": 45,
            "description": "Handles database available event.\n\nIt assures that the database is loaded and can be accessed.",
            "itemtype": "method",
            "name": "onDatabaseAvailable",
            "async": 1,
            "params": [
                {
                    "name": "db",
                    "description": "The application database",
                    "type": "Database"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/Server.js",
            "line": 60,
            "description": "Handles plugin loaded event.\n\nIt assures that the given plugin is fully loaded.",
            "example": [
                "\n    MyServer.prototype.onPluginLoaded(plugin){\n      console.log(plugin);\n    };"
            ],
            "itemtype": "method",
            "name": "onPluginLoaded",
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The openveo plugin",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/Server.js",
            "line": 79,
            "description": "Handles plugins loaded event.\n\nIt assures that all plugins are fully loaded.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/Server.js",
            "line": 92,
            "description": "Starts the server.",
            "itemtype": "method",
            "name": "startServer",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/WebServiceServer.js",
            "line": 37,
            "description": "migrations Script description object.",
            "itemtype": "property",
            "name": "migrations",
            "type": "Object",
            "final": 1,
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/WebServiceServer.js",
            "line": 76,
            "description": "Loads plugin.",
            "itemtype": "method",
            "name": "onPluginLoaded",
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The openveo plugin",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/WebServiceServer.js",
            "line": 113,
            "description": "Sets errors routes.\n\nSets errors routes when all plugins are loaded to handle not found\nendpoints and errors.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/servers/WebServiceServer.js",
            "line": 143,
            "description": "Starts the HTTP server.",
            "itemtype": "method",
            "name": "startServer",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app/server/api.js",
            "line": 16,
            "description": "The list of loaded plugins.",
            "itemtype": "property",
            "name": "plugins",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "api",
            "module": "core"
        },
        {
            "file": "app/server/api.js",
            "line": 25,
            "description": "Gets a plugin by its name.",
            "itemtype": "method",
            "name": "getPlugin",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The plugin's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The plugin",
                "type": "Plugin"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app/server/api.js",
            "line": 44,
            "description": "Gets the list of loaded plugins.",
            "itemtype": "method",
            "name": "getPlugins",
            "static": 1,
            "return": {
                "description": "The list of loaded plugins",
                "type": "Array"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app/server/api.js",
            "line": 55,
            "description": "Adds a plugin to the list of plugins.",
            "itemtype": "method",
            "name": "addPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin to add",
                    "type": "Plugin"
                }
            ],
            "throws": {
                "description": "If plugin is not a valid plugin",
                "type": "TypeError"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app/server/api.js",
            "line": 72,
            "description": "Gets API of a plugin.",
            "itemtype": "method",
            "name": "getApi",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The plugin's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The plugin's API",
                "type": "PluginApi"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app/server/api.js",
            "line": 85,
            "description": "Gets core plugin's API.",
            "itemtype": "method",
            "name": "getCoreApi",
            "static": 1,
            "return": {
                "description": "The core plugin's API",
                "type": "PluginApi"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app/server/authenticator.js",
            "line": 25,
            "description": "Populates user with detailed roles and permissions.",
            "itemtype": "method",
            "name": "populateUser",
            "async": 1,
            "params": [
                {
                    "name": "user",
                    "description": "The user to populate",
                    "type": "Object",
                    "props": [
                        {
                            "name": "roles",
                            "description": "The list of role ids",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The populated user",
                    "type": "Function"
                }
            ],
            "class": "authenticator",
            "module": "core"
        },
        {
            "file": "app/server/authenticator.js",
            "line": 61,
            "description": "Serializes only essential user information required to retrieve it later.",
            "itemtype": "method",
            "name": "serializeUser",
            "async": 1,
            "static": 1,
            "params": [
                {
                    "name": "user",
                    "description": "The user to serialize",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **String** The serialized user information",
                    "type": "Function"
                }
            ],
            "class": "authenticator",
            "module": "core"
        },
        {
            "file": "app/server/authenticator.js",
            "line": 79,
            "description": "Fetches a user with its permissions from serialized data.",
            "itemtype": "method",
            "name": "deserializeUser",
            "async": 1,
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Serialized data as serialized by serializeUser(): the id of the user",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user with its permissions",
                    "type": "Function"
                }
            ],
            "class": "authenticator",
            "module": "core"
        },
        {
            "file": "app/server/authenticator.js",
            "line": 107,
            "description": "Verifies a user as returned by the passport local strategy.",
            "itemtype": "method",
            "name": "verifyUserByCredentials",
            "async": 1,
            "static": 1,
            "params": [
                {
                    "name": "email",
                    "description": "User email",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "User password",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done\n - **Error** An error if something went wrong, null otherwise\n - **Object** The user with its permissions",
                    "type": "Function"
                }
            ],
            "class": "authenticator",
            "module": "core"
        },
        {
            "file": "app/server/authenticator.js",
            "line": 131,
            "description": "Verifies user as returned by third party providers.\n\nOpenVeo trusts users from third party providers, if the user does not exist in OpenVeo\nit is created with minimum information.",
            "itemtype": "method",
            "name": "verifyUserAuthentication",
            "async": 1,
            "static": 1,
            "params": [
                {
                    "name": "thirdPartyUser",
                    "description": "The user from the third party provider",
                    "type": "Object"
                },
                {
                    "name": "strategy",
                    "description": "The id of the strategy",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done\n - **Error** An error if something went wrong, null otherwise\n - **Object** The user with its permissions",
                    "type": "Function"
                }
            ],
            "class": "authenticator",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 23,
            "description": "A server error occurring when no error were specified.",
            "itemtype": "property",
            "name": "UNKNOWN_ERROR",
            "type": "Object",
            "final": 1,
            "default": "0",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 36,
            "description": "A server error occurring when getting a dictionary of translations.",
            "itemtype": "property",
            "name": "I18N_DICTIONARY_ERROR",
            "type": "Object",
            "final": 1,
            "default": "1",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 49,
            "description": "A server error occurring when getting the list of taxonomies.",
            "itemtype": "property",
            "name": "GET_TAXONOMIES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "2",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 62,
            "description": "A server error occurring when getting the list of groups.",
            "itemtype": "property",
            "name": "GET_GROUPS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "3",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 75,
            "description": "A server error occurring when authenticating the user to the back end.",
            "itemtype": "property",
            "name": "BACK_END_AUTHENTICATION_ERROR",
            "type": "Object",
            "final": 1,
            "default": "4",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 88,
            "description": "A server error occurring when getting the list of applications.",
            "itemtype": "property",
            "name": "GET_APPLICATIONS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "5",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 101,
            "description": "A server error occurring when getting the list of roles.",
            "itemtype": "property",
            "name": "GET_ROLES_ERROR",
            "type": "Object",
            "final": 1,
            "default": "6",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 114,
            "description": "A server error occurring when getting the list of users.",
            "itemtype": "property",
            "name": "GET_USERS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "7",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 127,
            "description": "A server error occurring when updating information about a user.",
            "itemtype": "property",
            "name": "UPDATE_USER_ERROR",
            "type": "Object",
            "final": 1,
            "default": "8",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 140,
            "description": "A server error occurring when getting the list of terms of a taxonomy.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_ERROR",
            "type": "Object",
            "final": 1,
            "default": "9",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 153,
            "description": "A server error occurring when authenticating using an external provider (which require redirection).",
            "itemtype": "property",
            "name": "BACK_END_EXTERNAL_AUTHENTICATION_ERROR",
            "type": "Object",
            "final": 1,
            "default": "10",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 166,
            "description": "A server error occurring when getting the list of settings.",
            "itemtype": "property",
            "name": "GET_SETTINGS_ERROR",
            "type": "Object",
            "final": 1,
            "default": "11",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 179,
            "description": "A server error occurring when getting a setting.",
            "itemtype": "property",
            "name": "GET_SETTING_ERROR",
            "type": "Object",
            "final": 1,
            "default": "14",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 194,
            "description": "A server error occurring when requested path does not exist.",
            "itemtype": "property",
            "name": "PATH_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "default": "256",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 207,
            "description": "A server error occurring when requested dictionary does not exist.",
            "itemtype": "property",
            "name": "I18N_DICTIONARY_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "default": "257",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 220,
            "description": "A server error occurring when requested taxonomy does not exist.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "default": "258",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 235,
            "description": "A server error occurring when user authentication to the back end failed.",
            "itemtype": "property",
            "name": "BACK_END_AUTHENTICATION_FAILED",
            "type": "Object",
            "final": 1,
            "default": "512",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 248,
            "description": "A server error occurring when a back end authentication is needed to perform the action.",
            "itemtype": "property",
            "name": "BACK_END_UNAUTHORIZED",
            "type": "Object",
            "final": 1,
            "default": "513",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 261,
            "description": "A server error occurring when user connected to the back end is not authorized to perform an action.",
            "itemtype": "property",
            "name": "BACK_END_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "514",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 274,
            "description": "A server error occurring when user connected to the Web Service is not authorized to perform an action.",
            "itemtype": "property",
            "name": "WS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "default": "515",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 287,
            "description": "A server error occurring when a Web Service authentication is needed to perform an action.",
            "itemtype": "property",
            "name": "WS_UNAUTHORIZED",
            "type": "Object",
            "final": 1,
            "default": "516",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 300,
            "description": "A server error occurring when user authentication to the back end failed using an external provider.",
            "itemtype": "property",
            "name": "BACK_END_EXTERNAL_AUTHENTICATION_FAILED",
            "type": "Object",
            "final": 1,
            "default": "519",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 315,
            "description": "A server error occurring when getting users with wrong parameters.",
            "itemtype": "property",
            "name": "GET_USERS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "768",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 328,
            "description": "A server error occurring when updating a user with missing parameters.",
            "itemtype": "property",
            "name": "UPDATE_USER_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "769",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 341,
            "description": "A server error occurring when updating a user with wrong parameters.",
            "itemtype": "property",
            "name": "UPDATE_USER_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "770",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 354,
            "description": "A server error occurring when getting taxonomies with wrong parameters.",
            "itemtype": "property",
            "name": "GET_TAXONOMIES_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "771",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 367,
            "description": "A server error occurring when getting applications with wrong parameters.",
            "itemtype": "property",
            "name": "GET_APPLICATIONS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "772",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 380,
            "description": "A server error occurring when getting groups with wrong parameters.",
            "itemtype": "property",
            "name": "GET_GROUPS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "773",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 393,
            "description": "A server error occurring when getting roles with wrong parameters.",
            "itemtype": "property",
            "name": "GET_ROLES_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "774",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 406,
            "description": "A server error occurring when getting taxonomy terms with missing parameters.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_TERMS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "775",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 419,
            "description": "A server error occurring when authenticating to an internal provider using wrong parameters.",
            "itemtype": "property",
            "name": "AUTHENTICATE_INTERNAL_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "776",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 432,
            "description": "A server error occurring when authenticating to an external provider using wrong parameters.",
            "itemtype": "property",
            "name": "AUTHENTICATE_EXTERNAL_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "777",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 445,
            "description": "A server error occurring when getting settings with wrong parameters.",
            "itemtype": "property",
            "name": "GET_SETTINGS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "778",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/httpErrors.js",
            "line": 458,
            "description": "A server error occurring when getting a setting with missing parameters.",
            "itemtype": "property",
            "name": "GET_SETTING_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "default": "782",
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app/server/path.js",
            "line": 14,
            "description": "Validates a path regarding a rule.",
            "example": [
                "\n    var path = process.require(\"app/server/path.js\");\n    path.validate(\"get /test\", \"get /test\"); // true\n    path.validate(\"get /test\", \"/test\"); // true\n    path.validate(\"get /test\", \"/*\"); // true\n    path.validate(\"get /test\", \"*\"); // true\n    path.validate(\"post /test\", \"post /test\"); // true\n    path.validate(\"put /test\", \"put /test\"); // true\n    path.validate(\"delete /test\", \"delete /test\"); // true\n    path.validate(\"/test\", \"/test\"); // true\n    path.validate(\"get /test\", \"\"); // false\n    path.validate(\"get /test\", \"/\"); // false\n    path.validate(\"get /test\", \"/other\"); // false\n    path.validate(\"get /test\", \"post /test\"); // false\n    path.validate(\"get /test\", \"post\"); // false\n    path.validate(\"get /test\", \"get\"); // false\n    path.validate(\"get /test\", \"unknwon /test\"); // false"
            ],
            "itemtype": "method",
            "name": "validate",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "The path to validate",
                    "type": "String"
                },
                {
                    "name": "String",
                    "description": "rule The rule to validate path"
                }
            ],
            "return": {
                "description": "true if the rule validates the path, false\notherwise",
                "type": "Boolean"
            },
            "class": "path",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 23,
            "description": "Gets the computed back end menu with all links.",
            "itemtype": "method",
            "name": "getMenu",
            "static": 1,
            "return": {
                "description": "The list of back end links",
                "type": "Array"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 34,
            "description": "Sets the back end menu list of links.",
            "itemtype": "method",
            "name": "setMenu",
            "static": 1,
            "params": [
                {
                    "name": "newMenu",
                    "description": "The list of back end menu links",
                    "type": "Array"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 45,
            "description": "Gets the current database instance.",
            "itemtype": "method",
            "name": "getDatabase",
            "static": 1,
            "return": {
                "description": "A Database object",
                "type": "Database"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 56,
            "description": "Sets a new database instance as the current database.",
            "itemtype": "method",
            "name": "setDatabase",
            "static": 1,
            "params": [
                {
                    "name": "newDatabase",
                    "description": "The new database of the application",
                    "type": "Database"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 67,
            "description": "Sets the web service list of scopes.",
            "itemtype": "method",
            "name": "setWebServiceScopes",
            "static": 1,
            "params": [
                {
                    "name": "newScopes",
                    "description": "The new list of scopes for the web service",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 78,
            "description": "Gets the list of web service scopes defined by plugins.",
            "itemtype": "method",
            "name": "getWebServiceScopes",
            "static": 1,
            "return": {
                "description": "scopes",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 89,
            "description": "Sets the list of permissions.",
            "itemtype": "method",
            "name": "setPermissions",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The new list of permissions",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 100,
            "description": "Gets the list of permissions defined by plugins.",
            "itemtype": "method",
            "name": "getPermissions",
            "static": 1,
            "return": {
                "description": "permissions",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 111,
            "description": "Sets the list of entities.",
            "itemtype": "method",
            "name": "setEntities",
            "static": 1,
            "params": [
                {
                    "name": "newEntities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 122,
            "description": "Gets the list of entities defined by plugins.",
            "itemtype": "method",
            "name": "getEntities",
            "static": 1,
            "return": {
                "description": "entities",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 133,
            "description": "Sets the application server configuration.",
            "itemtype": "method",
            "name": "setServerConfiguration",
            "static": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "The server configuration",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 144,
            "description": "Gets the application server configuration.",
            "itemtype": "method",
            "name": "getServerConfiguration",
            "static": 1,
            "return": {
                "description": "The server configuration",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 155,
            "description": "Gets OpenVeo configuration.",
            "itemtype": "method",
            "name": "getConfiguration",
            "static": 1,
            "return": {
                "description": "The OpenVeo configuration",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app/server/storage.js",
            "line": 166,
            "description": "Sets the OpenVeo configuration.",
            "itemtype": "method",
            "name": "setConfiguration",
            "static": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "The OpenVeo configuration",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        }
    ],
    "warnings": []
}