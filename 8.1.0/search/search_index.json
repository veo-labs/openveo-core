{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's OpenVeo ? OpenVeo is a Node.js and AngularJS CMS. It embeds an HTTP server based on Express framework ( Express ), a Socket server based on socket.io framework and a plugin loader mechanism. The core of the system (i.e. without any plugin) offers a simple connection form to the administration interface. This interface gives access to a limited set of default features: Users management Permissions, roles and groups management Web service management A profile page Each plugin brings zero to many additive administration pages and zero to many additive public pages. Authentication OpenVeo supports the following SSO (Single Sign On) providers: LDAP CAS Compatibility OpenVeo is tested on the following operating systems: Ubuntu 16.04 OpenVeo is tested on the following browsers: Google Chrome Mozilla Firefox Opera Edge Screenshots Login page Back end home page Back end roles management page Back end users management page Back end groups management page Back end applications management page Back end settings page","title":"INTRODUCTION"},{"location":"#whats-openveo","text":"OpenVeo is a Node.js and AngularJS CMS. It embeds an HTTP server based on Express framework ( Express ), a Socket server based on socket.io framework and a plugin loader mechanism. The core of the system (i.e. without any plugin) offers a simple connection form to the administration interface. This interface gives access to a limited set of default features: Users management Permissions, roles and groups management Web service management A profile page Each plugin brings zero to many additive administration pages and zero to many additive public pages.","title":"What's OpenVeo ?"},{"location":"#authentication","text":"OpenVeo supports the following SSO (Single Sign On) providers: LDAP CAS","title":"Authentication"},{"location":"#compatibility","text":"OpenVeo is tested on the following operating systems: Ubuntu 16.04 OpenVeo is tested on the following browsers: Google Chrome Mozilla Firefox Opera Edge","title":"Compatibility"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#login-page","text":"","title":"Login page"},{"location":"#back-end-home-page","text":"","title":"Back end home page"},{"location":"#back-end-roles-management-page","text":"","title":"Back end roles management page"},{"location":"#back-end-users-management-page","text":"","title":"Back end users management page"},{"location":"#back-end-groups-management-page","text":"","title":"Back end groups management page"},{"location":"#back-end-applications-management-page","text":"","title":"Back end applications management page"},{"location":"#back-end-settings-page","text":"","title":"Back end settings page"},{"location":"advanced-configuration/","text":"Introduction Configuration files are all in user's directory under ~/.openveo/core ~/.openveo/core/conf.json ~/.openveo/core/databaseConf.json ~/.openveo/core/loggerConf.json ~/.openveo/core/serverConf.json Nb : You must restart OpenVeo servers after modifications. Configure OpenVeo Open ~/.openveo/core/conf.json { passwordHashKey : KEY , // Replace KEY by a secret key used to encrypt users passwords cdn : { url : CDN_URL // Replace CDN_URL by the url of the OpenVeo CDN (actually the OpenVeo server url) } } Configure database access Open ~/.openveo/core/databaseConf.json { type : mongodb , // Do not change. Only MongoDB is available right now host : localhost , // Database server host port : 27017, // Database port database : DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo database username : DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user password : DATABASE_USER_PWD // Replace DATABASE_USER_PWD by the password of the database user } Configure the logger Open ~/.openveo/core/loggerConf.json { app : { fileName : /var/log/openveo/openveo.log , // Path to application log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2 // Maximum number of files archived }, ws : { fileName : /var/log/openveo/openveo-ws.log , // Path to the web service log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2 // Maximum number of files archived } } Configure the server Open ~/.openveo/core/serverConf.json { app : { httpPort : HTTP_PORT, // Replace HTTP_PORT by the HTTP server port to use (e.g. 3000) socketPort : SOCKET_PORT, // Replace SOCKET_PORT by the socket server port to use (e.g. 3001) browserSocketPort : SOCKET_PORT, // Replace SOCKET_PORT by the port of the socket server to connect to from the browser (e.g. 3001) sessionSecret : SECRET , // Replace SECRET by a secret used to secure HTTP sessions auth : { cas : { // CAS configuration version : 3 , // The version of the CAS server service : https://my-openveo-portal.test , // The service to use to authenticate to the CAS server url : https://my-cas-server.test:8443/cas , // The url of the CAS server userGroupAttribute : group , // The name of the CAS attribute holding the group name of a user userIdAttribute : id , // The name of the CAS attribute holding the unique id of a user userNameAttribute : name , // The name of the CAS attribute holding the name of a user userEmailAttribute : name , // The name of the CAS attribute holding the email of a user certificate : /etc/ssl/certs/cas.crt // The absolute path of the CAS server certificate if root CA is not in the Node.JS well known CAs }, ldapauth : { // LDAP configuration url : ldaps://my-ldap.test , // The url of the LDAP server bindAttribute : dn , // The LDAP attribute used by bindDn (default to dn ) bindDn : cn=my-user,dc=my-ldap,dc=test , // The value of the bindAttribute associated to the entry used to connect to the server API bindPassword : qT5gvobG2ZxYSiY2r4mt , // The password of the entry used to connect to the server API searchBase : ou=user,dc=my-ldap,dc=test , // The search base when looking for users searchScope : sub , // The search scope when looking for users (default to sub ) searchFilter : ( (objectclass=person)(cn={{username}})) , // The search filter to find user by name, use placeholder {{username}} which will be replaced by the user name when searching userGroupAttribute : group , // The name of the LDAP attribute holding the group name of a user userIdAttribute : dn , // The name of the LDAP attribute holding the unique id of a user userNameAttribute : cn , // The name of the LDAP attribute holding the name of a user userEmailAttribute : email , // The name of the LDAP attribute holding the email of a user certificate : /etc/ssl/certs/ldap.crt // The absolute path of the LDAP server certificate full chain if root CA is not in the Node.JS well known CAs } } }, ws : { port : WS_HTTP_PORT // Replace WS_HTTP_PORT by the HTTP server port to use (e.g. 3002) } }","title":"Advanced configuration"},{"location":"advanced-configuration/#introduction","text":"Configuration files are all in user's directory under ~/.openveo/core ~/.openveo/core/conf.json ~/.openveo/core/databaseConf.json ~/.openveo/core/loggerConf.json ~/.openveo/core/serverConf.json Nb : You must restart OpenVeo servers after modifications.","title":"Introduction"},{"location":"advanced-configuration/#configure-openveo","text":"Open ~/.openveo/core/conf.json { passwordHashKey : KEY , // Replace KEY by a secret key used to encrypt users passwords cdn : { url : CDN_URL // Replace CDN_URL by the url of the OpenVeo CDN (actually the OpenVeo server url) } }","title":"Configure OpenVeo"},{"location":"advanced-configuration/#configure-database-access","text":"Open ~/.openveo/core/databaseConf.json { type : mongodb , // Do not change. Only MongoDB is available right now host : localhost , // Database server host port : 27017, // Database port database : DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo database username : DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user password : DATABASE_USER_PWD // Replace DATABASE_USER_PWD by the password of the database user }","title":"Configure database access"},{"location":"advanced-configuration/#configure-the-logger","text":"Open ~/.openveo/core/loggerConf.json { app : { fileName : /var/log/openveo/openveo.log , // Path to application log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2 // Maximum number of files archived }, ws : { fileName : /var/log/openveo/openveo-ws.log , // Path to the web service log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2 // Maximum number of files archived } }","title":"Configure the logger"},{"location":"advanced-configuration/#configure-the-server","text":"Open ~/.openveo/core/serverConf.json { app : { httpPort : HTTP_PORT, // Replace HTTP_PORT by the HTTP server port to use (e.g. 3000) socketPort : SOCKET_PORT, // Replace SOCKET_PORT by the socket server port to use (e.g. 3001) browserSocketPort : SOCKET_PORT, // Replace SOCKET_PORT by the port of the socket server to connect to from the browser (e.g. 3001) sessionSecret : SECRET , // Replace SECRET by a secret used to secure HTTP sessions auth : { cas : { // CAS configuration version : 3 , // The version of the CAS server service : https://my-openveo-portal.test , // The service to use to authenticate to the CAS server url : https://my-cas-server.test:8443/cas , // The url of the CAS server userGroupAttribute : group , // The name of the CAS attribute holding the group name of a user userIdAttribute : id , // The name of the CAS attribute holding the unique id of a user userNameAttribute : name , // The name of the CAS attribute holding the name of a user userEmailAttribute : name , // The name of the CAS attribute holding the email of a user certificate : /etc/ssl/certs/cas.crt // The absolute path of the CAS server certificate if root CA is not in the Node.JS well known CAs }, ldapauth : { // LDAP configuration url : ldaps://my-ldap.test , // The url of the LDAP server bindAttribute : dn , // The LDAP attribute used by bindDn (default to dn ) bindDn : cn=my-user,dc=my-ldap,dc=test , // The value of the bindAttribute associated to the entry used to connect to the server API bindPassword : qT5gvobG2ZxYSiY2r4mt , // The password of the entry used to connect to the server API searchBase : ou=user,dc=my-ldap,dc=test , // The search base when looking for users searchScope : sub , // The search scope when looking for users (default to sub ) searchFilter : ( (objectclass=person)(cn={{username}})) , // The search filter to find user by name, use placeholder {{username}} which will be replaced by the user name when searching userGroupAttribute : group , // The name of the LDAP attribute holding the group name of a user userIdAttribute : dn , // The name of the LDAP attribute holding the unique id of a user userNameAttribute : cn , // The name of the LDAP attribute holding the name of a user userEmailAttribute : email , // The name of the LDAP attribute holding the email of a user certificate : /etc/ssl/certs/ldap.crt // The absolute path of the LDAP server certificate full chain if root CA is not in the Node.JS well known CAs } } }, ws : { port : WS_HTTP_PORT // Replace WS_HTTP_PORT by the HTTP server port to use (e.g. 3002) } }","title":"Configure the server"},{"location":"getting-started/","text":"Download OpenVeo Actually OpenVeo can be downloaded directly from github : Select the tag you want to download ( from version =4.0.0 ) Then download the associated archive Deploy the archive on your server Installation From OpenVeo root directory: npm install --production Nb : You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using advanced configuration . Launch the application OpenVeo is now installed. Launch it: node server.js Verify that OpenVeo is working OpenVeo does not have any public pages. Consequently navigating to http://localhost:PORT will lead you to a 404 error page (it's a good sign if it does). To check that OpenVeo is working, try to log to the back end. Log to the back end You can now access the back end at http://localhost:PORT/be/login (replace PORT by the port specified in ~/.openveo/core/serverConf.json ) using the super admin email and password.","title":"Getting started"},{"location":"getting-started/#download-openveo","text":"Actually OpenVeo can be downloaded directly from github : Select the tag you want to download ( from version =4.0.0 ) Then download the associated archive Deploy the archive on your server","title":"Download OpenVeo"},{"location":"getting-started/#installation","text":"From OpenVeo root directory: npm install --production Nb : You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using advanced configuration .","title":"Installation"},{"location":"getting-started/#launch-the-application","text":"OpenVeo is now installed. Launch it: node server.js","title":"Launch the application"},{"location":"getting-started/#verify-that-openveo-is-working","text":"OpenVeo does not have any public pages. Consequently navigating to http://localhost:PORT will lead you to a 404 error page (it's a good sign if it does). To check that OpenVeo is working, try to log to the back end.","title":"Verify that OpenVeo is working"},{"location":"getting-started/#log-to-the-back-end","text":"You can now access the back end at http://localhost:PORT/be/login (replace PORT by the port specified in ~/.openveo/core/serverConf.json ) using the super admin email and password.","title":"Log to the back end"},{"location":"plugins/","text":"Plugins OpenVeo works with plugins to extend its features. Official plugins Official plugins are plugins developped and maintained by the OpenVeo team. They all are available on NPM OpenVeo scope . Unofficial plugins Unofficial plugins developped by the community must be prefixed by openveo- and distributed under the AGPL-3.0 license .","title":"Plugins"},{"location":"plugins/#plugins","text":"OpenVeo works with plugins to extend its features.","title":"Plugins"},{"location":"plugins/#official-plugins","text":"Official plugins are plugins developped and maintained by the OpenVeo team. They all are available on NPM OpenVeo scope .","title":"Official plugins"},{"location":"plugins/#unofficial-plugins","text":"Unofficial plugins developped by the community must be prefixed by openveo- and distributed under the AGPL-3.0 license .","title":"Unofficial plugins"},{"location":"prerequisites/","text":"OpenVeo requires and is tested on: Node.js ( 8.9.4 ) - The server side of OpenVeo is written in Node.js Npm ( =5.6.0 ) - NPM will help you install all OpenVeo dependencies MongoDB ( =3.0.0 ) - OpenVeo stores all its datas inside a MongoDB database (users, roles, taxonomies etc.) NB: Moreover, for a Windows installation, Visual Studio Express is required as some OpenVeo dependencies are written in C and need to be compiled. For Linux you may have to install the package libkrb5-dev.","title":"Prerequisites"},{"location":"production/","text":"Launch in production To use OpenVeo in a production environment, start the server using NODE_ENV environment variable: # Starts OpenVeo application in production environment NODE_ENV=production node server.js # Starts OpenVeo Web Service in production environment NODE_ENV=production node server.js -ws Nb : You should also consider launching the process as a deamon. Replicate database You should consider replicating your database using MongoDB ReplicaSets . You can configure OpenVeo to use your ReplicaSets .","title":"Production"},{"location":"production/#launch-in-production","text":"To use OpenVeo in a production environment, start the server using NODE_ENV environment variable: # Starts OpenVeo application in production environment NODE_ENV=production node server.js # Starts OpenVeo Web Service in production environment NODE_ENV=production node server.js -ws Nb : You should also consider launching the process as a deamon.","title":"Launch in production"},{"location":"production/#replicate-database","text":"You should consider replicating your database using MongoDB ReplicaSets . You can configure OpenVeo to use your ReplicaSets .","title":"Replicate database"},{"location":"scalability/","text":"MongoDB database replication If you want to take benefit of your MongoDB replication set , you can adapt your OpenVeo configuration. Open ~openveo/core/databaseConf.json and add a name for the ReplicaSet and a comma separated list of secondary servers. { ... replicaSet : REPLICA_SET_NAME , // Replace REPLICA_SET_NAME by the name of the ReplicaSet seedlist : IP_1:PORT_1,IP_2:PORT_2 // The comma separated list of secondary servers } { type : mongodb , // Do not change host : localhost , // MongoDB server host port : 27017, // MongoDB port database : DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo database username : DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user password : DATABASE_USER_PWD , // Replace DATABASE_USER_PWD by the password of the database user replicaSet : REPLICA_SET_NAME , // Replace REPLICA_SET_NAME by the name of the ReplicaSet seedlist : IP_1:PORT_1,IP_2:PORT_2 // The comma separated list of secondary servers }","title":"Scalability"},{"location":"scalability/#mongodb-database-replication","text":"If you want to take benefit of your MongoDB replication set , you can adapt your OpenVeo configuration. Open ~openveo/core/databaseConf.json and add a name for the ReplicaSet and a comma separated list of secondary servers. { ... replicaSet : REPLICA_SET_NAME , // Replace REPLICA_SET_NAME by the name of the ReplicaSet seedlist : IP_1:PORT_1,IP_2:PORT_2 // The comma separated list of secondary servers } { type : mongodb , // Do not change host : localhost , // MongoDB server host port : 27017, // MongoDB port database : DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo database username : DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user password : DATABASE_USER_PWD , // Replace DATABASE_USER_PWD by the password of the database user replicaSet : REPLICA_SET_NAME , // Replace REPLICA_SET_NAME by the name of the ReplicaSet seedlist : IP_1:PORT_1,IP_2:PORT_2 // The comma separated list of secondary servers }","title":"MongoDB database replication"},{"location":"web-service/","text":"Introduction OpenVeo offers a Web Service which must be started as a different process and needs some extra configuration. Configure the Web Service Open ~openveo/core/serverConf.json { ws : { port : PORT // Replace PORT by the HTTP server port to use (e.g. 3002) } } Configure the Web Service logger Open ~openveo/core/loggerConf.json { ws : { fileName : /var/log/openveo/openveo-ws.log , // Path to web service log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2 // Maximum number of files archived } } Launch the Web Service If you want to interact with OpenVeo through the Web Service, you need to start it. To start the OpenVeo Web Service, just use the -ws option: node server.js -ws Authenticate to the Web Service The Web Service uses OAuth2 for authentication. Get a client id and client secret You can create a new application with a client id and a client secret through the back end ( http://localhost:PORT/be/applications-list ). Get an access token To make Web Service requests you will need an Access token. To get an Access token, you must make an HTTP POST request on /token . Expected headers : 'Authorization: Basic CREDENTIALS' (Replace CREDENTIALS by \"CLIENT_ID:CLIENT_SECRET\" encoded in base 64) Expected POST parameters : 'grant_type' = 'client_credentials' You will receive an Access token to authenticate each Web Service requests. PHP example $curlCookieJar = tempnam(sys_get_temp_dir(), cookies_ ); // Initialize a curl session $curlHandle = curl_init(); // Default curl options for all future requests curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET'); curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true); curl_setopt($curlHandle, CURLOPT_COOKIESESSION, false); curl_setopt($curlHandle, CURLOPT_COOKIEJAR, $curlCookieJar); curl_setopt($curlHandle, CURLOPT_COOKIEFILE, $curlCookieJar); curl_setopt($curlHandle, CURLOPT_HEADER, false); curl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 1); curl_setopt($curlHandle, CURLOPT_TIMEOUT, 30); // Retrieve an oauth token // Use HTTP POST method curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'POST'); // Replace {OPENVEO_URL} by the openveo server url curl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/token'); // Replace {CLIENT_ID} and {CLIENT_SECRET} by your credentials curl_setopt($curlHandle, CURLOPT_HTTPHEADER, array( 'Authorization: Basic ' . base64_encode('{CLIENT_ID}:{CLIENT_SECRET}'), 'Content-Type: application/json' )); // Set oauth grant type to client_credentials curl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode(array( 'grant_type' = 'client_credentials' ) )); $resultWithToken = json_decode(curl_exec($curlHandle)); Authenticate a request All requests to the Web Service must be authenticated using the HTTP header: 'Authorization: Bearer TOKEN' (Replace TOKEN by your access token) PHP example // Get the list of videos curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET'); curl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/taxonomies'); curl_setopt($curlHandle, CURLOPT_HTTPHEADER, array( 'Authorization: Bearer ' . $resultWithToken- access_token )); // Got the list of videos $videos = json_decode(curl_exec($curlHandle)); Endpoints Taxonomies Get taxonomies. GET WEB_SERVICE_URL/taxonomies Name Type Required Default Details query String No - To search on taxonomy names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort taxonomies. Only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of taxonomies per page include Array No - The list of fields to include from returned taxonomies exclude Array No - The list of fields to exclude from returned taxonomies. Ignored if include is also specified HTTP Status Code Details 200 Got the list of taxonomies 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 1443533344313 , name : Taxonomy 1 , tree : [ { id : 1445433239636 , items : [], title : Term 1 } ] }, { id : 1333443134453 , name : Taxonomy 2 , tree : [ { id : 3239636144543 , items : [], title : Term 1 } ] } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a taxonomy. GET WEB_SERVICE_URL/taxonomies/{taxonomy_id} With {taxonomy_id} the id of the taxonomy to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned taxonomy exclude Array No - The list of fields to exclude from returned taxonomy. Ignored if include is also specified HTTP Status Code Details 200 Got the taxonomy 500 An error occured on the server side 400 Missing the taxonomy id 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Taxonomy not found { entity : { name : My taxonomy , id : {taxonomy_id} , tree : [] } } Get the list of terms of a taxonomy. GET WEB_SERVICE_URL/taxonomies/{taxonomy_id}/terms HTTP Status Code Details 200 Got the taxonomy terms 500 An error occured on the server side 400 Missing the taxonomy id 401 Authentication to the web service failed 403 Authorization forbidden for this end point { terms : [ { id : 1445433239636 , title : Term 1 , items : [ { id : 1445433239637 , items : [], title : Sub term 1 } ] }, { title : Term 2 , id : 1333443134453 , items : [] } ] } Add taxonomies. PUT WEB_SERVICE_URL/taxonomies Expects an Array of objects containing: Name Type Required Default Details name String Yes - The taxonomy name tree Array No - The list of terms for the taxonomy HTTP Status Code Details 200 The taxonomies have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { name : My taxonomy , id : 41U3sYipg , tree : [] }, ... ], total : 42 } Update a taxonomy. POST WEB_SERVICE_URL/taxonomies/{taxonomy_id} With {taxonomy_id} the id of the taxonomy to update. Name Type Required Default Details name String No - The taxonomy name tree Array No - The list of terms for this taxonomy HTTP Status Code Details 200 The taxonomy has been updated 500 An error occured on the server side 400 Missing the taxonomy id or body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete taxonomies. DELETE WEB_SERVICE_URL/taxonomies/{taxonomy_id} With {taxonomy_id} a comma separated list of taxonomy ids to delete. HTTP Status Code Details 200 The taxonomies have been deleted 500 An error occured on the server side 400 Missing the taxonomy ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Groups Get groups. GET WEB_SERVICE_URL/groups Name Type Required Default Details query String No - To search on both group names and descriptions useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort groups (either name or description ) sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of groups per page include Array No - The list of fields to include from returned groups exclude Array No - The list of fields to exclude from returned groups. Ignored if include is also specified HTTP Status Code Details 200 Got the list of groups 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : Nk0fPIulZ , name : Group name , description : Group description }, { id : VJfQDIul- , name : Group name , description : Group description } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a group. GET WEB_SERVICE_URL/groups/{group_id} With {group_id} the id of the group to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned group exclude Array No - The list of fields to exclude from returned group. Ignored if include is also specified HTTP Status Code Details 200 Got the group 500 An error occured on the server side 400 Missing the id of the group 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Group not found { entity : { id : {group_id} , name : Group name , description : Group description } } Add groups. PUT WEB_SERVICE_URL/groups Expects an Array of objects containing: Name Type Required Default Details name String Yes - The group name description String Yes - The group description HTTP Status Code Details 200 The groups have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : Group name , description : Group description }, ... ], total : 42 } Update a group. POST WEB_SERVICE_URL/groups/{group_id} With {group_id} the id of the group to update. Name Type Required Default Details name String No - The group name description String No - The group description HTTP Status Code Details 200 The group has been updated 500 An error occured on the server side 400 Missing the group id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete groups. DELETE WEB_SERVICE_URL/groups/{group_id} With {group_id} a comma separated list of group ids to delete. HTTP Status Code Details 200 The groups have been deleted 500 An error occured on the server side 400 Missing the group ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Roles Get roles. GET WEB_SERVICE_URL/roles Name Type Required Default Details query String No - To search on role names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort results, only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of roles per page include Array No - The list of fields to include from returned roles exclude Array No - The list of fields to exclude from returned roles. Ignored if include is also specified HTTP Status Code Details 200 Got the list of roles 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4J5KIL_lb , name : Role name , permissions : [...] } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a role. GET WEB_SERVICE_URL/roles/{role_id} With {role_id} the id of the role to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned role exclude Array No - The list of fields to exclude from returned role. Ignored if include is also specified HTTP Status Code Details 200 Got the role 500 An error occured on the server side 400 Missing the id of the role 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Role not found { entity : { id : {role_id} , name : Role name , permissions : [...] } } Add roles. PUT WEB_SERVICE_URL/roles Expects an Array of objects containing: Name Type Required Default Details name String Yes - The role name permissions Array Yes - The role permssions HTTP Status Code Details 200 The roles have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : Role name , permissions : [...] }, ... ], total : 42 } Update a role. POST WEB_SERVICE_URL/roles/{role_id} With {role_id} the id of the role to update. Name Type Required Default Details name String No - The role name permissions Array No - The role permssions HTTP Status Code Details 200 The role has been updated 500 An error occured on the server side 400 Missing the role id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete roles. DELETE WEB_SERVICE_URL/roles/{role_id} With {role_id} a comma separated list of role ids to delete. HTTP Status Code Details 200 The roles have been deleted 500 An error occured on the server side 400 Missing the role ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Users Get users. GET WEB_SERVICE_URL/users Name Type Required Default Details query String No - To search on user names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression origin String No all The users origin (either cas , ldap , local or all ) sortBy String No name The field to use to sort users. Only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of users per page include Array No - The list of fields to include from returned users exclude Array No - The list of fields to exclude from returned users. Ignored if include is also specified HTTP Status Code Details 200 Got the list of users 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 42 , name : User name , email : user.mail@company.com , origin : local , locked : false, roles : [ role1 ] } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a user. GET WEB_SERVICE_URL/users/{user_id} With {user_id} the id of the user to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned user exclude Array No - The list of fields to exclude from returned user. Ignored if include is also specified HTTP Status Code Details 200 Got the user 500 An error occured on the server side 400 Missing the id of the user 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 User not found { entity : { id : {user_id} , name : User name , password : 38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d , email : user.mail@company.com , origin : local , locked : false, roles : [ role1 ] } } Add users. PUT WEB_SERVICE_URL/users Expects an Array of objects containing: Name Type Required Default Details name String Yes - The user name email String Yes - The user email password String Yes - The user password passwordValidate String Yes - The user password validation roles Array No - To user roles locked Boolean No - To lock the user from edition HTTP Status Code Details 200 The users have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : User name , password : 38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d , email : user.mail@company.com , origin : local , locked : false, roles : [ role1 ] }, ... ], total : 42 } Update a user. POST WEB_SERVICE_URL/users/{user_id} With {user_id} the id of the user to update. Name Type Required Default Details name String No - The user name email String No - The user email password String No - The user password passwordValidate String No - The user password validation roles Array No - To user roles HTTP Status Code Details 200 The user has been updated 500 An error occured on the server side 400 Missing the user id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete users. DELETE WEB_SERVICE_URL/users/{user_id} With {user_id} a comma separated list of user ids to delete. HTTP Status Code Details 200 The users have been deleted 500 An error occured on the server side 400 Missing the user ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Applications Get applications. GET WEB_SERVICE_URL/applications Name Type Required Default Details query String No - To search on application names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort applications. Only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of applications per page include Array No - The list of fields to include from returned applications exclude Array No - The list of fields to exclude from returned applications. Ignored if include is also specified HTTP Status Code Details 200 Got the list of applications 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4J6CUL_gZ , name : Application name , scopes : [...], secret : 179a905785d4258bba255ffb812a25f2225f7d4c } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get an application. GET WEB_SERVICE_URL/applications/{application_id} With {application_id} the id of the application to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned application exclude Array No - The list of fields to exclude from returned application. Ignored if include is also specified HTTP Status Code Details 200 Got the application 500 An error occured on the server side 400 Missing the id of the application 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Application not found { entity : { id : {application_id} , name : Application name , scopes : [...], secret : 179a905785d4258bba255ffb812a25f2225f7d4c } } Add applications. PUT WEB_SERVICE_URL/applications Expects an Array of objects containing: Name Type Required Default Details name String Yes - The application name scopes Array No - The application scopes HTTP Status Code Details 200 The applications have been added 500 An error occured on the server side 400 Missing the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : Application name , scopes : [...], secret : 179a905785d4258bba255ffb812a25f2225f7d4c }, ... ], total : 42 } Update an application. POST WEB_SERVICE_URL/applications/{application_id} With {application_id} the id of the application to update. Name Type Required Default Details name String No - The application name scopes Array No - The application scopes HTTP Status Code Details 200 The application has been updated 500 An error occured on the server side 400 Missing the application id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete applications. DELETE WEB_SERVICE_URL/applications/{application_id} With {application_id} a comma separated list of application ids to delete. HTTP Status Code Details 200 The applications have been deleted 500 An error occured on the server side 400 Missing the application ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Settings Get settings. GET WEB_SERVICE_URL/settings Name Type Required Default Details sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of settings per page HTTP Status Code Details 200 Got the list of settings 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : my-setting , value : Mixed value } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a setting. GET WEB_SERVICE_URL/settings/{setting_id} With {setting_id} the id of the setting to retrieve. HTTP Status Code Details 200 Got the setting 500 An error occured on the server side 400 Missing the id of the setting 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entity : { id : my-setting , value : Mixed value } } Add settings. If a setting already exists it will be updated. PUT WEB_SERVICE_URL/settings Expects an Array of objects containing: Name Type Required Default Details id String Yes - The setting id value Mixed Yes - The setting value HTTP Status Code Details 200 The settings have been added 500 An error occured on the server side 400 Missing setting ids in body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : my-setting , value : Mixed value }, ... ], total : 42 } Update a setting. POST WEB_SERVICE_URL/settings/{setting_id} With {setting_id} the id of the setting to update. Name Type Required Default Details value Mixed No - The setting value HTTP Status Code Details 200 The setting has been updated 500 An error occured on the server side 400 Missing the setting id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete settings. DELETE WEB_SERVICE_URL/settings/{setting_id} With {setting_id} a comma separated list of setting ids to delete. HTTP Status Code Details 200 The settings have been deleted 500 An error occured on the server side 400 Missing the setting id 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 } Client libraries PHP client A PHP client is also available on Github to help interface with OpenVeo Web Service. NodeJS client A NodeJS client is also available on Github to help interface with OpenVeo Web Service.","title":"Web Service"},{"location":"web-service/#introduction","text":"OpenVeo offers a Web Service which must be started as a different process and needs some extra configuration.","title":"Introduction"},{"location":"web-service/#configure-the-web-service","text":"Open ~openveo/core/serverConf.json { ws : { port : PORT // Replace PORT by the HTTP server port to use (e.g. 3002) } }","title":"Configure the Web Service"},{"location":"web-service/#configure-the-web-service-logger","text":"Open ~openveo/core/loggerConf.json { ws : { fileName : /var/log/openveo/openveo-ws.log , // Path to web service log file level : info , // Log level maxFileSize : 104857600, // Maximum log file size (in Bytes) maxFiles : 2 // Maximum number of files archived } }","title":"Configure the Web Service logger"},{"location":"web-service/#launch-the-web-service","text":"If you want to interact with OpenVeo through the Web Service, you need to start it. To start the OpenVeo Web Service, just use the -ws option: node server.js -ws","title":"Launch the Web Service"},{"location":"web-service/#authenticate-to-the-web-service","text":"The Web Service uses OAuth2 for authentication.","title":"Authenticate to the Web Service"},{"location":"web-service/#get-a-client-id-and-client-secret","text":"You can create a new application with a client id and a client secret through the back end ( http://localhost:PORT/be/applications-list ).","title":"Get a client id and client secret"},{"location":"web-service/#get-an-access-token","text":"To make Web Service requests you will need an Access token. To get an Access token, you must make an HTTP POST request on /token . Expected headers : 'Authorization: Basic CREDENTIALS' (Replace CREDENTIALS by \"CLIENT_ID:CLIENT_SECRET\" encoded in base 64) Expected POST parameters : 'grant_type' = 'client_credentials' You will receive an Access token to authenticate each Web Service requests.","title":"Get an access token"},{"location":"web-service/#php-example","text":"$curlCookieJar = tempnam(sys_get_temp_dir(), cookies_ ); // Initialize a curl session $curlHandle = curl_init(); // Default curl options for all future requests curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET'); curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true); curl_setopt($curlHandle, CURLOPT_COOKIESESSION, false); curl_setopt($curlHandle, CURLOPT_COOKIEJAR, $curlCookieJar); curl_setopt($curlHandle, CURLOPT_COOKIEFILE, $curlCookieJar); curl_setopt($curlHandle, CURLOPT_HEADER, false); curl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 1); curl_setopt($curlHandle, CURLOPT_TIMEOUT, 30); // Retrieve an oauth token // Use HTTP POST method curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'POST'); // Replace {OPENVEO_URL} by the openveo server url curl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/token'); // Replace {CLIENT_ID} and {CLIENT_SECRET} by your credentials curl_setopt($curlHandle, CURLOPT_HTTPHEADER, array( 'Authorization: Basic ' . base64_encode('{CLIENT_ID}:{CLIENT_SECRET}'), 'Content-Type: application/json' )); // Set oauth grant type to client_credentials curl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode(array( 'grant_type' = 'client_credentials' ) )); $resultWithToken = json_decode(curl_exec($curlHandle));","title":"PHP example"},{"location":"web-service/#authenticate-a-request","text":"All requests to the Web Service must be authenticated using the HTTP header: 'Authorization: Bearer TOKEN' (Replace TOKEN by your access token)","title":"Authenticate a request"},{"location":"web-service/#php-example_1","text":"// Get the list of videos curl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET'); curl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/taxonomies'); curl_setopt($curlHandle, CURLOPT_HTTPHEADER, array( 'Authorization: Bearer ' . $resultWithToken- access_token )); // Got the list of videos $videos = json_decode(curl_exec($curlHandle));","title":"PHP example"},{"location":"web-service/#endpoints","text":"","title":"Endpoints"},{"location":"web-service/#taxonomies","text":"Get taxonomies. GET WEB_SERVICE_URL/taxonomies Name Type Required Default Details query String No - To search on taxonomy names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort taxonomies. Only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of taxonomies per page include Array No - The list of fields to include from returned taxonomies exclude Array No - The list of fields to exclude from returned taxonomies. Ignored if include is also specified HTTP Status Code Details 200 Got the list of taxonomies 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 1443533344313 , name : Taxonomy 1 , tree : [ { id : 1445433239636 , items : [], title : Term 1 } ] }, { id : 1333443134453 , name : Taxonomy 2 , tree : [ { id : 3239636144543 , items : [], title : Term 1 } ] } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a taxonomy. GET WEB_SERVICE_URL/taxonomies/{taxonomy_id} With {taxonomy_id} the id of the taxonomy to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned taxonomy exclude Array No - The list of fields to exclude from returned taxonomy. Ignored if include is also specified HTTP Status Code Details 200 Got the taxonomy 500 An error occured on the server side 400 Missing the taxonomy id 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Taxonomy not found { entity : { name : My taxonomy , id : {taxonomy_id} , tree : [] } } Get the list of terms of a taxonomy. GET WEB_SERVICE_URL/taxonomies/{taxonomy_id}/terms HTTP Status Code Details 200 Got the taxonomy terms 500 An error occured on the server side 400 Missing the taxonomy id 401 Authentication to the web service failed 403 Authorization forbidden for this end point { terms : [ { id : 1445433239636 , title : Term 1 , items : [ { id : 1445433239637 , items : [], title : Sub term 1 } ] }, { title : Term 2 , id : 1333443134453 , items : [] } ] } Add taxonomies. PUT WEB_SERVICE_URL/taxonomies Expects an Array of objects containing: Name Type Required Default Details name String Yes - The taxonomy name tree Array No - The list of terms for the taxonomy HTTP Status Code Details 200 The taxonomies have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { name : My taxonomy , id : 41U3sYipg , tree : [] }, ... ], total : 42 } Update a taxonomy. POST WEB_SERVICE_URL/taxonomies/{taxonomy_id} With {taxonomy_id} the id of the taxonomy to update. Name Type Required Default Details name String No - The taxonomy name tree Array No - The list of terms for this taxonomy HTTP Status Code Details 200 The taxonomy has been updated 500 An error occured on the server side 400 Missing the taxonomy id or body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete taxonomies. DELETE WEB_SERVICE_URL/taxonomies/{taxonomy_id} With {taxonomy_id} a comma separated list of taxonomy ids to delete. HTTP Status Code Details 200 The taxonomies have been deleted 500 An error occured on the server side 400 Missing the taxonomy ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Taxonomies"},{"location":"web-service/#groups","text":"Get groups. GET WEB_SERVICE_URL/groups Name Type Required Default Details query String No - To search on both group names and descriptions useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort groups (either name or description ) sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of groups per page include Array No - The list of fields to include from returned groups exclude Array No - The list of fields to exclude from returned groups. Ignored if include is also specified HTTP Status Code Details 200 Got the list of groups 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : Nk0fPIulZ , name : Group name , description : Group description }, { id : VJfQDIul- , name : Group name , description : Group description } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a group. GET WEB_SERVICE_URL/groups/{group_id} With {group_id} the id of the group to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned group exclude Array No - The list of fields to exclude from returned group. Ignored if include is also specified HTTP Status Code Details 200 Got the group 500 An error occured on the server side 400 Missing the id of the group 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Group not found { entity : { id : {group_id} , name : Group name , description : Group description } } Add groups. PUT WEB_SERVICE_URL/groups Expects an Array of objects containing: Name Type Required Default Details name String Yes - The group name description String Yes - The group description HTTP Status Code Details 200 The groups have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : Group name , description : Group description }, ... ], total : 42 } Update a group. POST WEB_SERVICE_URL/groups/{group_id} With {group_id} the id of the group to update. Name Type Required Default Details name String No - The group name description String No - The group description HTTP Status Code Details 200 The group has been updated 500 An error occured on the server side 400 Missing the group id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete groups. DELETE WEB_SERVICE_URL/groups/{group_id} With {group_id} a comma separated list of group ids to delete. HTTP Status Code Details 200 The groups have been deleted 500 An error occured on the server side 400 Missing the group ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Groups"},{"location":"web-service/#roles","text":"Get roles. GET WEB_SERVICE_URL/roles Name Type Required Default Details query String No - To search on role names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort results, only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of roles per page include Array No - The list of fields to include from returned roles exclude Array No - The list of fields to exclude from returned roles. Ignored if include is also specified HTTP Status Code Details 200 Got the list of roles 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4J5KIL_lb , name : Role name , permissions : [...] } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a role. GET WEB_SERVICE_URL/roles/{role_id} With {role_id} the id of the role to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned role exclude Array No - The list of fields to exclude from returned role. Ignored if include is also specified HTTP Status Code Details 200 Got the role 500 An error occured on the server side 400 Missing the id of the role 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Role not found { entity : { id : {role_id} , name : Role name , permissions : [...] } } Add roles. PUT WEB_SERVICE_URL/roles Expects an Array of objects containing: Name Type Required Default Details name String Yes - The role name permissions Array Yes - The role permssions HTTP Status Code Details 200 The roles have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : Role name , permissions : [...] }, ... ], total : 42 } Update a role. POST WEB_SERVICE_URL/roles/{role_id} With {role_id} the id of the role to update. Name Type Required Default Details name String No - The role name permissions Array No - The role permssions HTTP Status Code Details 200 The role has been updated 500 An error occured on the server side 400 Missing the role id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete roles. DELETE WEB_SERVICE_URL/roles/{role_id} With {role_id} a comma separated list of role ids to delete. HTTP Status Code Details 200 The roles have been deleted 500 An error occured on the server side 400 Missing the role ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Roles"},{"location":"web-service/#users","text":"Get users. GET WEB_SERVICE_URL/users Name Type Required Default Details query String No - To search on user names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression origin String No all The users origin (either cas , ldap , local or all ) sortBy String No name The field to use to sort users. Only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of users per page include Array No - The list of fields to include from returned users exclude Array No - The list of fields to exclude from returned users. Ignored if include is also specified HTTP Status Code Details 200 Got the list of users 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 42 , name : User name , email : user.mail@company.com , origin : local , locked : false, roles : [ role1 ] } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a user. GET WEB_SERVICE_URL/users/{user_id} With {user_id} the id of the user to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned user exclude Array No - The list of fields to exclude from returned user. Ignored if include is also specified HTTP Status Code Details 200 Got the user 500 An error occured on the server side 400 Missing the id of the user 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 User not found { entity : { id : {user_id} , name : User name , password : 38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d , email : user.mail@company.com , origin : local , locked : false, roles : [ role1 ] } } Add users. PUT WEB_SERVICE_URL/users Expects an Array of objects containing: Name Type Required Default Details name String Yes - The user name email String Yes - The user email password String Yes - The user password passwordValidate String Yes - The user password validation roles Array No - To user roles locked Boolean No - To lock the user from edition HTTP Status Code Details 200 The users have been added 500 An error occured on the server side 400 Missing body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : User name , password : 38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d , email : user.mail@company.com , origin : local , locked : false, roles : [ role1 ] }, ... ], total : 42 } Update a user. POST WEB_SERVICE_URL/users/{user_id} With {user_id} the id of the user to update. Name Type Required Default Details name String No - The user name email String No - The user email password String No - The user password passwordValidate String No - The user password validation roles Array No - To user roles HTTP Status Code Details 200 The user has been updated 500 An error occured on the server side 400 Missing the user id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete users. DELETE WEB_SERVICE_URL/users/{user_id} With {user_id} a comma separated list of user ids to delete. HTTP Status Code Details 200 The users have been deleted 500 An error occured on the server side 400 Missing the user ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Users"},{"location":"web-service/#applications","text":"Get applications. GET WEB_SERVICE_URL/applications Name Type Required Default Details query String No - To search on application names useSmartSearch Number No 1 1 to use a more advanced search mechanism, 0 to use a simple search based on a regular expression sortBy String No name The field to use to sort applications. Only name is available right now sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of applications per page include Array No - The list of fields to include from returned applications exclude Array No - The list of fields to exclude from returned applications. Ignored if include is also specified HTTP Status Code Details 200 Got the list of applications 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 4J6CUL_gZ , name : Application name , scopes : [...], secret : 179a905785d4258bba255ffb812a25f2225f7d4c } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get an application. GET WEB_SERVICE_URL/applications/{application_id} With {application_id} the id of the application to retrieve. Name Type Required Default Details include Array No - The list of fields to include from returned application exclude Array No - The list of fields to exclude from returned application. Ignored if include is also specified HTTP Status Code Details 200 Got the application 500 An error occured on the server side 400 Missing the id of the application 401 Authentication to the web service failed 403 Authorization forbidden for this end point 404 Application not found { entity : { id : {application_id} , name : Application name , scopes : [...], secret : 179a905785d4258bba255ffb812a25f2225f7d4c } } Add applications. PUT WEB_SERVICE_URL/applications Expects an Array of objects containing: Name Type Required Default Details name String Yes - The application name scopes Array No - The application scopes HTTP Status Code Details 200 The applications have been added 500 An error occured on the server side 400 Missing the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : 41U3sYipg , name : Application name , scopes : [...], secret : 179a905785d4258bba255ffb812a25f2225f7d4c }, ... ], total : 42 } Update an application. POST WEB_SERVICE_URL/applications/{application_id} With {application_id} the id of the application to update. Name Type Required Default Details name String No - The application name scopes Array No - The application scopes HTTP Status Code Details 200 The application has been updated 500 An error occured on the server side 400 Missing the application id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete applications. DELETE WEB_SERVICE_URL/applications/{application_id} With {application_id} a comma separated list of application ids to delete. HTTP Status Code Details 200 The applications have been deleted 500 An error occured on the server side 400 Missing the application ids 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Applications"},{"location":"web-service/#settings","text":"Get settings. GET WEB_SERVICE_URL/settings Name Type Required Default Details sortOrder String No desc The sort order (either asc or desc ) page Number No 0 The expected page limit Number No 10 The limit the number of settings per page HTTP Status Code Details 200 Got the list of settings 500 An error occured on the server side 400 Wrong list of parameters 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : my-setting , value : Mixed value } ], pagination : { limit : 1, page : 1, pages : 2, size : 2 } } Get a setting. GET WEB_SERVICE_URL/settings/{setting_id} With {setting_id} the id of the setting to retrieve. HTTP Status Code Details 200 Got the setting 500 An error occured on the server side 400 Missing the id of the setting 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entity : { id : my-setting , value : Mixed value } } Add settings. If a setting already exists it will be updated. PUT WEB_SERVICE_URL/settings Expects an Array of objects containing: Name Type Required Default Details id String Yes - The setting id value Mixed Yes - The setting value HTTP Status Code Details 200 The settings have been added 500 An error occured on the server side 400 Missing setting ids in body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { entities : [ { id : my-setting , value : Mixed value }, ... ], total : 42 } Update a setting. POST WEB_SERVICE_URL/settings/{setting_id} With {setting_id} the id of the setting to update. Name Type Required Default Details value Mixed No - The setting value HTTP Status Code Details 200 The setting has been updated 500 An error occured on the server side 400 Missing the setting id or the body 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 1 } Delete settings. DELETE WEB_SERVICE_URL/settings/{setting_id} With {setting_id} a comma separated list of setting ids to delete. HTTP Status Code Details 200 The settings have been deleted 500 An error occured on the server side 400 Missing the setting id 401 Authentication to the web service failed 403 Authorization forbidden for this end point { total : 42 }","title":"Settings"},{"location":"web-service/#client-libraries","text":"","title":"Client libraries"},{"location":"web-service/#php-client","text":"A PHP client is also available on Github to help interface with OpenVeo Web Service.","title":"PHP client"},{"location":"web-service/#nodejs-client","text":"A NodeJS client is also available on Github to help interface with OpenVeo Web Service.","title":"NodeJS client"},{"location":"developers/api/","text":"Core server side API (Node.js) OpenVeo core is the base of OpenVeo but it is also a plugin. Like every OpenVeo plugin it can expose APIs to other plugins. The OpenVeo Core API helps you write your OpenVeo plugins. You can use process.api to get the OpenVeo Core API: var coreApi = process.api.getCoreApi(); or the API of a particular plugin: var myPluginApi = process.api.getApi('my-plugin'); Backend client side API (AngularJS) OpenVeo core backend API exposes an API to plugins to help you write your plugin's back end pages (AngularJS). See back end AngularJS for more information.","title":"API"},{"location":"developers/api/#core-server-side-api-nodejs","text":"OpenVeo core is the base of OpenVeo but it is also a plugin. Like every OpenVeo plugin it can expose APIs to other plugins. The OpenVeo Core API helps you write your OpenVeo plugins. You can use process.api to get the OpenVeo Core API: var coreApi = process.api.getCoreApi(); or the API of a particular plugin: var myPluginApi = process.api.getApi('my-plugin');","title":"Core server side API (Node.js)"},{"location":"developers/api/#backend-client-side-api-angularjs","text":"OpenVeo core backend API exposes an API to plugins to help you write your plugin's back end pages (AngularJS). See back end AngularJS for more information.","title":"Backend client side API (AngularJS)"},{"location":"developers/back-end/","text":"Introduction OpenVeo back end is an AngularJS single page application served on /be . The back end relies on a couple of libraries: angular-route to perform single page application routing angular-animate for CSS animations angular-cookies for cookie management angular-i18n for AngularJS default translations fastclick to remove click delays on browsers with touch UIs angular-bootstrap for basic user interface components angular-formly to build formulars from a JavaScript literal object angular-ui-tree to build an UI tree (not directly used by openveo-core) ng-tasty to present entities in a dynamic paginated table Structure Main module ( ov ) The main AngularJS module of the back end is named ov and is applied to the HTML root element. html ng-app= ov ng-controller= MainController ng-strict-di head base href= /be/ /head ... div ng-view /div ... /html It has dependencies on all AngularJS libraries and all AngularJS modules described by OpenVeo plugins. It also defines all core routes: /be/login to access the login page /be to access the back end home page /be/applications-list to access Web service applications page /be/users-list to access users page /be/profile to access user's profile page /be/roles-list to access roles page /be/openveo-settings to access settings page Nb: Available services / filters defined in ov module are described in the API . Alert module ( ov.alert ) Offers a service to control alerts for the whole application. Alerts are used to display a message to the user. Nb: Available services defined in ov.alert module are described in the API . Authentication module ( ov.authentication ) Offers a service to authenticate / logout or manipulate authenticated user informations. Nb: Available services / filters defined in ov.authentication module are described in the API . Entity module ( ov.entity ) Offers a service to manage OpenVeo entities (CRUD). Nb: Available services defined in ov.entity module are described in the API . I18n module ( ov.i18n ) Defines a service to control back end internationalization and a translate filter to help translate ids from a dictionary. Nb: Available services / filters defined in ov.i18n module are described in the API . Storage module ( ov.storage ) Offers a service to manipulate the local storage. Nb: Available services defined in ov.storage module are described in the API . TableForm module ( ov.tableForm ) Offers a turnkey solution to build formulars and tasty tables. Formulars are the same as described in angular-formly . Datatables are a little different from the original ng-tasty datable as actions can be assigned to a row and information about the row can be edited in place. Datatables needs an associated entity to work. Add a new form Formulars are massively based on angular-formly . To add a new formular, you have to place the generic formular partial in your HTML code and describe the expected form in your controller. Include formular partial in your HTML. ng-include src= 'views/elements/form.html' /ng-include Describes the formular in your controller. // List of books $scope.books = [{ isbn : 50 , name : Journey to the Center of the Earth }]; // Create a scope property addFormContainer $scope.addFormContainer = {}; // Create a property model on addFormContainer , this is were formly will // stores form results // This is the model of the form $scope.addFormContainer.model = {}; // Describe fields just like in formly documentation $scope.addFormContainer.fields = [ { key: 'name', type: 'horizontalInput', templateOptions: { label: 'Label of the name field', required: true, description: 'Description of the name field' } }, { key: 'books', type: 'horizontalMultiCheckbox', templateOptions: { label: 'Books', required: false, options: $scope.books, valueProperty: 'isbn', labelProperty: 'name', description: 'List of books' }, expressionProperties: { 'templateOptions.disabled': '!model.name' // disabled when book name is blank } } ]; // Add formular submit function $scope.addFormContainer.onSubmit = function(model) { // Return Angularjs promises with its own success or error callback // Code to save the formular // Generic error or success callback are already chained and executed by the form container // in order to display the right message to user and update the form return promise; }; Add a new datatable Tables are massively based on ng-tasty . To add a new datatable, you have to place the generic datatable partial in your HTML code and describe the datatable expected behavior in your controller. Include datatable partial in your HTML. ng-include src= 'views/elements/dataTable.html' /ng-include Describes the datatable in your controller. For the example, assume that you need to display a collection of book entity. { isbn : 50 , name : Journey to the Center of the Earth , description : The story begins in May 1863, in the Lidenbrock house in Hamburg, Germany, with Professor Lidenbrock } Initialize tableContainer Object: // Create tableContainer Object used by DataTable controller $scope.tableContainer = {}; // Initialize the entity type to enable DataTable controller to retrieve the right entity $scope.tableContainer.entityType = 'book'; Initialize search filters $scope.tableContainer.filterBy = [ { key: 'name', // the name of the web service parameter value: '', // the initial value label: 'Label of the name search filter' // the field label } ]; Filters default type is text. Filter type can be set by specifying the type property of the field. { key: 'query', // the name of the corresponding web service parameter type: 'text', // the type of field to use, here field will be represented using a simple text field value: '', // the initial value label: 'Label of the author search filter' // the field label }, { key: 'author', // the name of the corresponding web service parameter type: 'select', // the type of field to use, here field will be represented using a combobox options : selectOptions, // as field is of type select , options specify select options with, for each option, a property name and a property value value: '', // the initial value label: 'Label of the author search filter' // the field label }, { key: 'date', // the name of the corresponding web service parameter type: 'date', // the type of field to use, here field will be represented using a date picker value: '', // the initial value label : 'Label of the date search filter' // the field label } Initialize DataTable headers // Automatically, a sort filter is enable on each column except 'Action' column $scope.tableContainer.header = [{ key: 'name', // the value to use as the web service sortBy parameter value name: 'Label of the name column', // the name of the column class: ['col-xs-12 col-sm-11'] // the CSS classes to add on header cell }, { key: 'action', // specify a special column named action which can't be sorted name: 'Label for action button', // the name of the action column class: [' hidden-xs col-sm-1'] // the CSS classes to add on header cell }]; Headers default type is text. Header type can be set by specifying type property on the header. Default types are date (timestamp) and text . But you can add any type if you make your own custom cell renderer (see after). { key: 'date', // the value to use as the web service sortBy parameter value name: 'Label of the date column', // the name of the column type: 'date' // the header type }, { key: 'author', // the value to use as the web service sortBy parameter value name: 'Label of the author column', // the name of the column type: 'text' // the header type }, { key: 'custom', // the value to use as the web service sortBy parameter value name: 'Label of the custom column', // the name of the column type: 'myCustomType' // the header type } Add a custom cell template renderer according to column key and row value // Usefull to add HTML value, or filtered value // if not defined, can print date and text // if defined, add custom cells renderer to date and text $scope.tableContainer.cellTheme = '/path/to/cells/template.html'; For example (assuming that entities is the header type to render, and row[entities.key] , the value to display) span ng-if= entities.type entities.type == 'type1' row[entities.key] {{row[entities.key] | filterType1}} /span span ng-if= entities.type entities.type == 'type2' ng-bind-html= row[entities.key] | filterType2 /span Initialize action enable on each row $scope.tableContainer.actions = [{ label: 'Label of action', // Enable a Popup confirmation before action execution, default: false if not defined warningPopup: true, // Condition to enable the action in the dropdown button action condition: function(row) { return $scope.rights.delete !row.locked !row.saving; }, // Function to execute when the action is executed by button callback: function(row, reload) { // row is the book object on which the action is executed action(row.id); // call reload if dataTable need to be reloaded reload(); }, // Function to execute when the action is executed by select checkbox action // If not defined, this action can't be seen in checkbox actions global: function(selected, reload) { // selected is the list of selected entity id when global action is executed // exemple: [12345,12346,12347,12348,12349] actions(selected, reload); } }]; Initialize initial sort $scope.tableContainer.init = { sortBy: 'name', // initial sort key, default: first header column key if not defined sortOrder: 'dsc' // initial sort order, default: 'asc' if not defined }; Display checkbox global selection //default true if not defined; $scope.tableContainer.showSelectAll = true; You can reload a display table manually from other controller by injecting the TableReloadEventService and calling tableReloadEventService.broadcast(); Datatable dependency: edit a row DataTable is dependent of an edit form. This form specify what information user can access and/or modify. All properties described in the Add a new form section can be used to describe the form. Main differencies are that the form need to be initialized by the open row (the model is not exposed), and that form fields MUST be editable types. Initialize editFormContainer object // Create a scope property editFormContainer $scope.addFormContainer = {}; // Create a property model on editFormContainer , this is were formly will // stores form results // This is the model of the form $scope.editFormContainer.model = {}; // Initialize the entity type to retrieve before the row is updated // to always update the latest value in database. $scope.editFormContainer.entityType = 'book'; // Add formular submit function $scope.editFormContainer.onSubmit = function(model) { return promises; }; // Define if a row can be toggled or not $scope.editFormContainer.conditionToggleDetail = function(row) { return row.state !== 0; }; // Define if a row can be edit or not $scope.editFormContainer.conditionEditDetail = function(row) { return !row.locked; }; Set Fields // Describe fields just like in formly documentation with OpenVeo editable fields types $scope.editFormContainer.fields = { // the key to be used in the model values key: 'name', type: 'horizontalEditableInput', templateOptions: { label: 'label for name input', required: true } }; Set Fields dynamically // Function call when the form is displayed // Usefull to add fields dynamically according to the open row, // or retrieve information relative to the row $scope.editFormContainer.init = function(row) { if(row.state == SHOW.PROPERTY){ var newField = { key: 'property', type: 'horizontalEditableInput', model: row.property, templateOptions: { label: 'Label of the new property field' } }; $scope.editFormContainer.fields.push(newField); } } Field types OpenVeo defines the following list of formly fields. Field type Description Specific options tags Display an input text to add a list of tags availableOptions to specify the list of possible tags with, for each tag, a property \"name\" and a property \"value\". If this option is specified it will not be possible to enter tags which are not in the list (default is []) ; placeholder to specify the input placeholder (default to \"\") ; onChange to specify a function which will be called each time a tag is added or removed (default to null) match Display an input text and a tags field to build 1 to many associations multiple to specify if more than one association is possible (default to true) ; availableOptions to specify the list of possible tags for the tags field (default to []) ; inputPlaceholder to specify the value of the input field placeholder (default to \"\") ; tagsPlaceholder to specify the placeholder to use for the tags field (default to \"\") ; inputProperty to specify the property to use from the model to get the input field value of an association (default to \"value\") ; tagsProperty to specify the placeholder to use, from the model, to get the tags field values of an association (default to \"values\") ; addLabel to specify the text of the add button emptyrow Display a fake field with a static message message to specify the message section Display an H3 title title to specify the title ovMultiCheckBox Same as the \"multiCheckbox\" type defined by angular-formly-templates-bootstrap options the list of checkboxes description objects with a property for the name of the checkbox and a property for the value of the checkbox ; valueProperty to define the property to use to get the checkbox value (default is \"value\") ; labelProperty to define the property to use to get the checkbox label (default is \"name\") ovFile Display a file input with a progress bar using ng-file-upload acceptedTypes a comma separated list of accepted file types as described in ng-file-upload documentation ; onFileChange a function to call when file has changed (it uses ngf-change ) ; progressBar a boolean to display or not the progress bar while uploading a file (default to false) simple Display the value of the model as is - horizontalInput Same as \"input\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"input\" horizontalSelect Same as \"select\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"select\" horizontalMultiCheckbox Same as \"ovMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"ovMultiCheckBox\" horizontalTags Same as \"tags\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"tags\" horizontalMatch Same as \"match\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"match\" horizontalFile Same as \"ovFile\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"ovFile\" horizontalCheckbox Same as \"checkbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"checkbox\" Nb: All field types defined in angular-formly-templates-bootstrap are also available. Editable field types An editable field type is capable of displaying the field or its literal representation depending on \"showForm\" property of formState object. If \"showForm\" is set to true, the field is displayed, if set to false, the literal representation of the field is displayed. OpenVeo defines the following list of editable formly fields. Field type Description Specific options editableTags Make field type \"tags\" editable - editableInput Make field type \"input\" editable Same as \"input\" editableSelect Make field type \"select\" editable Same as \"select\" editableTags Make field type \"tags\" editable Same as \"tags\" editableCheckbox Make field type \"checkbox\" editable Same as \"checkbox\" ovEditableMultiCheckBox Make field type \"ovMultiCheckBox\" editable Same as \"ovMultiCheckBox\" horizontalEditableInput Same as \"editableInput\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableInput\" horizontalEditableSelect Same as \"editableSelect\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableSelect\" horizontalEditableMultiCheckbox Same as \"ovEditableMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"ovEditableMultiCheckBox\" horizontalEditableTags Same as \"editableTags\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableTags\" horizontalEditableCheckbox Same as \"editableCheckbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableCheckbox\" Field wrappers OpenVeo defines the following list of editable formly wrappers. Wrapper name Description Specific options collapse Collapse / Uncollapse a formly field labelCollapse the label of the collapsible element horizontalBootstrapLabel Put a label in front of a field label the label ; required a boolean to indicates if a \"*\" character must follow the label horizontalBootstrapLabelOnly Same as \"horizontalBootstrapLabel\" but without wrapping the field Same as \"horizontalBootstrapLabel\" editableWrapper Display the field or its literal representation depending on \"showForm\" property of formState object. This is the wrapper used by all editable fields - Nb: All wrappers defined in angular-formly-templates-bootstrap are also available. Socket module ( ov.socket ) Offers a factory SocketFactory to initialize a connection to the OpenVeo Socket Server. var socketClient = SocketFactory.initSocket('/myOpenVeoSocketNamespace'); socketClient.on('my.socket.message', function() { ... });","title":"Back end AngularJS"},{"location":"developers/back-end/#introduction","text":"OpenVeo back end is an AngularJS single page application served on /be . The back end relies on a couple of libraries: angular-route to perform single page application routing angular-animate for CSS animations angular-cookies for cookie management angular-i18n for AngularJS default translations fastclick to remove click delays on browsers with touch UIs angular-bootstrap for basic user interface components angular-formly to build formulars from a JavaScript literal object angular-ui-tree to build an UI tree (not directly used by openveo-core) ng-tasty to present entities in a dynamic paginated table","title":"Introduction"},{"location":"developers/back-end/#structure","text":"","title":"Structure"},{"location":"developers/back-end/#main-module-ov","text":"The main AngularJS module of the back end is named ov and is applied to the HTML root element. html ng-app= ov ng-controller= MainController ng-strict-di head base href= /be/ /head ... div ng-view /div ... /html It has dependencies on all AngularJS libraries and all AngularJS modules described by OpenVeo plugins. It also defines all core routes: /be/login to access the login page /be to access the back end home page /be/applications-list to access Web service applications page /be/users-list to access users page /be/profile to access user's profile page /be/roles-list to access roles page /be/openveo-settings to access settings page Nb: Available services / filters defined in ov module are described in the API .","title":"Main module (ov)"},{"location":"developers/back-end/#alert-module-ovalert","text":"Offers a service to control alerts for the whole application. Alerts are used to display a message to the user. Nb: Available services defined in ov.alert module are described in the API .","title":"Alert module (ov.alert)"},{"location":"developers/back-end/#authentication-module-ovauthentication","text":"Offers a service to authenticate / logout or manipulate authenticated user informations. Nb: Available services / filters defined in ov.authentication module are described in the API .","title":"Authentication module (ov.authentication)"},{"location":"developers/back-end/#entity-module-oventity","text":"Offers a service to manage OpenVeo entities (CRUD). Nb: Available services defined in ov.entity module are described in the API .","title":"Entity module (ov.entity)"},{"location":"developers/back-end/#i18n-module-ovi18n","text":"Defines a service to control back end internationalization and a translate filter to help translate ids from a dictionary. Nb: Available services / filters defined in ov.i18n module are described in the API .","title":"I18n module (ov.i18n)"},{"location":"developers/back-end/#storage-module-ovstorage","text":"Offers a service to manipulate the local storage. Nb: Available services defined in ov.storage module are described in the API .","title":"Storage module (ov.storage)"},{"location":"developers/back-end/#tableform-module-ovtableform","text":"Offers a turnkey solution to build formulars and tasty tables. Formulars are the same as described in angular-formly . Datatables are a little different from the original ng-tasty datable as actions can be assigned to a row and information about the row can be edited in place. Datatables needs an associated entity to work.","title":"TableForm module (ov.tableForm)"},{"location":"developers/back-end/#add-a-new-form","text":"Formulars are massively based on angular-formly . To add a new formular, you have to place the generic formular partial in your HTML code and describe the expected form in your controller. Include formular partial in your HTML. ng-include src= 'views/elements/form.html' /ng-include Describes the formular in your controller. // List of books $scope.books = [{ isbn : 50 , name : Journey to the Center of the Earth }]; // Create a scope property addFormContainer $scope.addFormContainer = {}; // Create a property model on addFormContainer , this is were formly will // stores form results // This is the model of the form $scope.addFormContainer.model = {}; // Describe fields just like in formly documentation $scope.addFormContainer.fields = [ { key: 'name', type: 'horizontalInput', templateOptions: { label: 'Label of the name field', required: true, description: 'Description of the name field' } }, { key: 'books', type: 'horizontalMultiCheckbox', templateOptions: { label: 'Books', required: false, options: $scope.books, valueProperty: 'isbn', labelProperty: 'name', description: 'List of books' }, expressionProperties: { 'templateOptions.disabled': '!model.name' // disabled when book name is blank } } ]; // Add formular submit function $scope.addFormContainer.onSubmit = function(model) { // Return Angularjs promises with its own success or error callback // Code to save the formular // Generic error or success callback are already chained and executed by the form container // in order to display the right message to user and update the form return promise; };","title":"Add a new form"},{"location":"developers/back-end/#add-a-new-datatable","text":"Tables are massively based on ng-tasty . To add a new datatable, you have to place the generic datatable partial in your HTML code and describe the datatable expected behavior in your controller. Include datatable partial in your HTML. ng-include src= 'views/elements/dataTable.html' /ng-include Describes the datatable in your controller. For the example, assume that you need to display a collection of book entity. { isbn : 50 , name : Journey to the Center of the Earth , description : The story begins in May 1863, in the Lidenbrock house in Hamburg, Germany, with Professor Lidenbrock } Initialize tableContainer Object: // Create tableContainer Object used by DataTable controller $scope.tableContainer = {}; // Initialize the entity type to enable DataTable controller to retrieve the right entity $scope.tableContainer.entityType = 'book'; Initialize search filters $scope.tableContainer.filterBy = [ { key: 'name', // the name of the web service parameter value: '', // the initial value label: 'Label of the name search filter' // the field label } ]; Filters default type is text. Filter type can be set by specifying the type property of the field. { key: 'query', // the name of the corresponding web service parameter type: 'text', // the type of field to use, here field will be represented using a simple text field value: '', // the initial value label: 'Label of the author search filter' // the field label }, { key: 'author', // the name of the corresponding web service parameter type: 'select', // the type of field to use, here field will be represented using a combobox options : selectOptions, // as field is of type select , options specify select options with, for each option, a property name and a property value value: '', // the initial value label: 'Label of the author search filter' // the field label }, { key: 'date', // the name of the corresponding web service parameter type: 'date', // the type of field to use, here field will be represented using a date picker value: '', // the initial value label : 'Label of the date search filter' // the field label } Initialize DataTable headers // Automatically, a sort filter is enable on each column except 'Action' column $scope.tableContainer.header = [{ key: 'name', // the value to use as the web service sortBy parameter value name: 'Label of the name column', // the name of the column class: ['col-xs-12 col-sm-11'] // the CSS classes to add on header cell }, { key: 'action', // specify a special column named action which can't be sorted name: 'Label for action button', // the name of the action column class: [' hidden-xs col-sm-1'] // the CSS classes to add on header cell }]; Headers default type is text. Header type can be set by specifying type property on the header. Default types are date (timestamp) and text . But you can add any type if you make your own custom cell renderer (see after). { key: 'date', // the value to use as the web service sortBy parameter value name: 'Label of the date column', // the name of the column type: 'date' // the header type }, { key: 'author', // the value to use as the web service sortBy parameter value name: 'Label of the author column', // the name of the column type: 'text' // the header type }, { key: 'custom', // the value to use as the web service sortBy parameter value name: 'Label of the custom column', // the name of the column type: 'myCustomType' // the header type } Add a custom cell template renderer according to column key and row value // Usefull to add HTML value, or filtered value // if not defined, can print date and text // if defined, add custom cells renderer to date and text $scope.tableContainer.cellTheme = '/path/to/cells/template.html'; For example (assuming that entities is the header type to render, and row[entities.key] , the value to display) span ng-if= entities.type entities.type == 'type1' row[entities.key] {{row[entities.key] | filterType1}} /span span ng-if= entities.type entities.type == 'type2' ng-bind-html= row[entities.key] | filterType2 /span Initialize action enable on each row $scope.tableContainer.actions = [{ label: 'Label of action', // Enable a Popup confirmation before action execution, default: false if not defined warningPopup: true, // Condition to enable the action in the dropdown button action condition: function(row) { return $scope.rights.delete !row.locked !row.saving; }, // Function to execute when the action is executed by button callback: function(row, reload) { // row is the book object on which the action is executed action(row.id); // call reload if dataTable need to be reloaded reload(); }, // Function to execute when the action is executed by select checkbox action // If not defined, this action can't be seen in checkbox actions global: function(selected, reload) { // selected is the list of selected entity id when global action is executed // exemple: [12345,12346,12347,12348,12349] actions(selected, reload); } }]; Initialize initial sort $scope.tableContainer.init = { sortBy: 'name', // initial sort key, default: first header column key if not defined sortOrder: 'dsc' // initial sort order, default: 'asc' if not defined }; Display checkbox global selection //default true if not defined; $scope.tableContainer.showSelectAll = true; You can reload a display table manually from other controller by injecting the TableReloadEventService and calling tableReloadEventService.broadcast();","title":"Add a new datatable"},{"location":"developers/back-end/#datatable-dependency-edit-a-row","text":"DataTable is dependent of an edit form. This form specify what information user can access and/or modify. All properties described in the Add a new form section can be used to describe the form. Main differencies are that the form need to be initialized by the open row (the model is not exposed), and that form fields MUST be editable types. Initialize editFormContainer object // Create a scope property editFormContainer $scope.addFormContainer = {}; // Create a property model on editFormContainer , this is were formly will // stores form results // This is the model of the form $scope.editFormContainer.model = {}; // Initialize the entity type to retrieve before the row is updated // to always update the latest value in database. $scope.editFormContainer.entityType = 'book'; // Add formular submit function $scope.editFormContainer.onSubmit = function(model) { return promises; }; // Define if a row can be toggled or not $scope.editFormContainer.conditionToggleDetail = function(row) { return row.state !== 0; }; // Define if a row can be edit or not $scope.editFormContainer.conditionEditDetail = function(row) { return !row.locked; }; Set Fields // Describe fields just like in formly documentation with OpenVeo editable fields types $scope.editFormContainer.fields = { // the key to be used in the model values key: 'name', type: 'horizontalEditableInput', templateOptions: { label: 'label for name input', required: true } }; Set Fields dynamically // Function call when the form is displayed // Usefull to add fields dynamically according to the open row, // or retrieve information relative to the row $scope.editFormContainer.init = function(row) { if(row.state == SHOW.PROPERTY){ var newField = { key: 'property', type: 'horizontalEditableInput', model: row.property, templateOptions: { label: 'Label of the new property field' } }; $scope.editFormContainer.fields.push(newField); } }","title":"Datatable dependency: edit a row"},{"location":"developers/back-end/#field-types","text":"OpenVeo defines the following list of formly fields. Field type Description Specific options tags Display an input text to add a list of tags availableOptions to specify the list of possible tags with, for each tag, a property \"name\" and a property \"value\". If this option is specified it will not be possible to enter tags which are not in the list (default is []) ; placeholder to specify the input placeholder (default to \"\") ; onChange to specify a function which will be called each time a tag is added or removed (default to null) match Display an input text and a tags field to build 1 to many associations multiple to specify if more than one association is possible (default to true) ; availableOptions to specify the list of possible tags for the tags field (default to []) ; inputPlaceholder to specify the value of the input field placeholder (default to \"\") ; tagsPlaceholder to specify the placeholder to use for the tags field (default to \"\") ; inputProperty to specify the property to use from the model to get the input field value of an association (default to \"value\") ; tagsProperty to specify the placeholder to use, from the model, to get the tags field values of an association (default to \"values\") ; addLabel to specify the text of the add button emptyrow Display a fake field with a static message message to specify the message section Display an H3 title title to specify the title ovMultiCheckBox Same as the \"multiCheckbox\" type defined by angular-formly-templates-bootstrap options the list of checkboxes description objects with a property for the name of the checkbox and a property for the value of the checkbox ; valueProperty to define the property to use to get the checkbox value (default is \"value\") ; labelProperty to define the property to use to get the checkbox label (default is \"name\") ovFile Display a file input with a progress bar using ng-file-upload acceptedTypes a comma separated list of accepted file types as described in ng-file-upload documentation ; onFileChange a function to call when file has changed (it uses ngf-change ) ; progressBar a boolean to display or not the progress bar while uploading a file (default to false) simple Display the value of the model as is - horizontalInput Same as \"input\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"input\" horizontalSelect Same as \"select\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"select\" horizontalMultiCheckbox Same as \"ovMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"ovMultiCheckBox\" horizontalTags Same as \"tags\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"tags\" horizontalMatch Same as \"match\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"match\" horizontalFile Same as \"ovFile\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"ovFile\" horizontalCheckbox Same as \"checkbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"checkbox\" Nb: All field types defined in angular-formly-templates-bootstrap are also available.","title":"Field types"},{"location":"developers/back-end/#editable-field-types","text":"An editable field type is capable of displaying the field or its literal representation depending on \"showForm\" property of formState object. If \"showForm\" is set to true, the field is displayed, if set to false, the literal representation of the field is displayed. OpenVeo defines the following list of editable formly fields. Field type Description Specific options editableTags Make field type \"tags\" editable - editableInput Make field type \"input\" editable Same as \"input\" editableSelect Make field type \"select\" editable Same as \"select\" editableTags Make field type \"tags\" editable Same as \"tags\" editableCheckbox Make field type \"checkbox\" editable Same as \"checkbox\" ovEditableMultiCheckBox Make field type \"ovMultiCheckBox\" editable Same as \"ovMultiCheckBox\" horizontalEditableInput Same as \"editableInput\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableInput\" horizontalEditableSelect Same as \"editableSelect\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableSelect\" horizontalEditableMultiCheckbox Same as \"ovEditableMultiCheckBox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"ovEditableMultiCheckBox\" horizontalEditableTags Same as \"editableTags\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableTags\" horizontalEditableCheckbox Same as \"editableCheckbox\" with horizontalBootstrapLabel and bootstrapHasError wrappers Same as \"editableCheckbox\"","title":"Editable field types"},{"location":"developers/back-end/#field-wrappers","text":"OpenVeo defines the following list of editable formly wrappers. Wrapper name Description Specific options collapse Collapse / Uncollapse a formly field labelCollapse the label of the collapsible element horizontalBootstrapLabel Put a label in front of a field label the label ; required a boolean to indicates if a \"*\" character must follow the label horizontalBootstrapLabelOnly Same as \"horizontalBootstrapLabel\" but without wrapping the field Same as \"horizontalBootstrapLabel\" editableWrapper Display the field or its literal representation depending on \"showForm\" property of formState object. This is the wrapper used by all editable fields - Nb: All wrappers defined in angular-formly-templates-bootstrap are also available.","title":"Field wrappers"},{"location":"developers/back-end/#socket-module-ovsocket","text":"Offers a factory SocketFactory to initialize a connection to the OpenVeo Socket Server. var socketClient = SocketFactory.initSocket('/myOpenVeoSocketNamespace'); socketClient.on('my.socket.message', function() { ... });","title":"Socket module (ov.socket)"},{"location":"developers/basics/","text":"HTTP server Based on Express framework , OpenVeo creates an HTTP server with a list of routes. Core routes are mounted on / while plugins' routes are mounted on /PLUGIN_NAME with PLUGIN_NAME the name of the plugin. There are three categories of routes: Public routes: Routes accessible to anyone who has access to the url Private routes: Routes accessible only to users authenticated to the back end Web Service routes: Routes accessible only to users authenticated to the Web Service Socket server Based on socket.io , OpenVeo creates a socket server with a list of namespaces. Core namespaces are mounted on /NAMESPACE_NAME while plugins' namespaces are mounted on /PLUGIN_NAME/NAMESPACE_NAME with PLUGIN_NAME the name ot the plugin and NAMESPACE_NAME the name of the namespace described in plugin's configuration file (see how to write a plugin for more details). There are two categories of namespaces: Public namespaces: Namespaces accessible to anyone Private namespaces: Namespaces accessible only to users authenticated to the back end Back end OpenVeo core offers a back end as an AngularJS single page application accessible on /be . Without plugins, the back end has only limited features (users, roles, web service, profile page). And without plugins no front end is created. This is an important point. There is no generic front end, each plugin can define its own front pages on /PLUGIN_NAME base path. Web Service OpenVeo core can create a Web Service (using the option -ws when starting the process) mechanism based on oauth2 authentication. Through the back end you can create an application with its associated list of scopes. Each new application will have an associated client id and client secret to authenticate to the Web Service. Thus you can create as many applications as you want with different scopes for each one. Plugins OpenVeo core loads all plugins found in node_modules/@openveo/ (plugins maintained by the OpenVeo team) or node_modules/openveo- * (community plugins) when starting the process. Each plugin can: Create its own back end pages Create public and private routes Create Web Service routes Create socket namespaces API Each plugin (including the core) can expose an API to other plugins. See the API documentation to find out how to expose APIs.","title":"The basics"},{"location":"developers/basics/#http-server","text":"Based on Express framework , OpenVeo creates an HTTP server with a list of routes. Core routes are mounted on / while plugins' routes are mounted on /PLUGIN_NAME with PLUGIN_NAME the name of the plugin. There are three categories of routes: Public routes: Routes accessible to anyone who has access to the url Private routes: Routes accessible only to users authenticated to the back end Web Service routes: Routes accessible only to users authenticated to the Web Service","title":"HTTP server"},{"location":"developers/basics/#socket-server","text":"Based on socket.io , OpenVeo creates a socket server with a list of namespaces. Core namespaces are mounted on /NAMESPACE_NAME while plugins' namespaces are mounted on /PLUGIN_NAME/NAMESPACE_NAME with PLUGIN_NAME the name ot the plugin and NAMESPACE_NAME the name of the namespace described in plugin's configuration file (see how to write a plugin for more details). There are two categories of namespaces: Public namespaces: Namespaces accessible to anyone Private namespaces: Namespaces accessible only to users authenticated to the back end","title":"Socket server"},{"location":"developers/basics/#back-end","text":"OpenVeo core offers a back end as an AngularJS single page application accessible on /be . Without plugins, the back end has only limited features (users, roles, web service, profile page). And without plugins no front end is created. This is an important point. There is no generic front end, each plugin can define its own front pages on /PLUGIN_NAME base path.","title":"Back end"},{"location":"developers/basics/#web-service","text":"OpenVeo core can create a Web Service (using the option -ws when starting the process) mechanism based on oauth2 authentication. Through the back end you can create an application with its associated list of scopes. Each new application will have an associated client id and client secret to authenticate to the Web Service. Thus you can create as many applications as you want with different scopes for each one.","title":"Web Service"},{"location":"developers/basics/#plugins","text":"OpenVeo core loads all plugins found in node_modules/@openveo/ (plugins maintained by the OpenVeo team) or node_modules/openveo- * (community plugins) when starting the process. Each plugin can: Create its own back end pages Create public and private routes Create Web Service routes Create socket namespaces","title":"Plugins"},{"location":"developers/basics/#api","text":"Each plugin (including the core) can expose an API to other plugins. See the API documentation to find out how to expose APIs.","title":"API"},{"location":"developers/coding-standards/","text":"OpenVeo uses Node.js coding standards. ESLint is used to validate coding rules. You can launch a code verification using the following command: grunt eslint Nb : Both Node.js and AngularJS parts of OpenVeo must respect the same coding standards","title":"Coding standards"},{"location":"developers/compilation/","text":"Introduction OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. Compiling SASS files You can compile the back end SASS files using the following command: grunt compass:dist Or you can watch SASS files changes using the following command: grunt You'll find compiled CSS files in assets/be/css . Compiling JavaScript files You'll probably want to compile AngularJS files, in production, for better performance. You can do it using: grunt prod You'll find compiled JavaScript files in assets/be/js .","title":"CSS / SASS / JS compilation"},{"location":"developers/compilation/#introduction","text":"OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.","title":"Introduction"},{"location":"developers/compilation/#compiling-sass-files","text":"You can compile the back end SASS files using the following command: grunt compass:dist Or you can watch SASS files changes using the following command: grunt You'll find compiled CSS files in assets/be/css .","title":"Compiling SASS files"},{"location":"developers/compilation/#compiling-javascript-files","text":"You'll probably want to compile AngularJS files, in production, for better performance. You can do it using: grunt prod You'll find compiled JavaScript files in assets/be/js .","title":"Compiling JavaScript files"},{"location":"developers/end-to-end-tests/","text":"Introduction End to end tests are performed using Protractor . Each plugin (including OpenVeo core) defines a list of test suites in tests/client/protractorSuites.json . Install selenium web driver and chrome driver node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update NB: Note that protractor module could be in node_modules/protractor Configure tests You need to specify a new database which will be used during tests. To do so, you can add a new configuration file in user's directory under ~/.openveo/core called databaseTestConf.json . ~/.openveo/core/databaseTestConf.json { type : mongodb , host : localhost , port : 27017, database : openveo-test , username : openveo , password : openveo } WARNING : Each time you launch end to end tests, all information will be removed from this database ! DO NOT use the same database as the one described in databaseConf.json When launching tests, OpenVeo HTTP server, socket server, CAS mock server and LDAP mock server are automatically spawned and must be configured through serverTestConf.json . Typically you may want to change servers ports. ~/.openveo/core/serverTestConf.json { app : { httpPort : 3003, socketPort : 3004, browserSocketPort : 3004, sessionSecret : 2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx , auth : { cas : { version : 3 , service : http://127.0.0.1:3003/be/authenticate/cas , url : http://127.0.0.1:3005 , userIdAttribute : name , userNameAttribute : attributes.name , userEmailAttribute : attributes.mail , userGroupAttribute : attributes.groups }, ldapauth : { searchFilter : ( (objectclass=person)(cn={{username}})) , url : ldap://127.0.0.1:3006 , bindAttribute : dn , bindDn : cn=openveo,dc=test , bindPassword : test , searchBase : dc=test , searchScope : sub , userGroupAttribute : groups , userIdAttribute : dn , userNameAttribute : cn , userEmailAttribute : mail } } }, ws : { port : 3007 } } You also need to specify the CDN URL to precise the new server port. To do so, you can add a new configuration file in user's directory under ~/.openveo/core called testConf.json . ~/.openveo/core/testConf.json { passwordHashKey : Eu2MNdGjJD , cdn : { url : http://127.0.0.0:3003 } } Finally the logger has to be configured through **loggerTestConf.json**. Typically you may want to deactivate logger standard output. **~/.openveo/core/loggerTestConf.json** ```json { app : { level : info , maxFileSize : 1048576, maxFiles : 2, fileName : /tmp/openveo/logs/openveoTest.log , console : false }, ws : { level : info , maxFileSize : 1048576, maxFiles : 2, fileName : /tmp/openveo/logs/openveoTest-ws.log , console : false } } console: false will deactivate standard output. Writing tests Boot steps When launching end to end tests, several things happen before the first test is launched: Database defined in ~/.openveo/core/databaseTestConf.json is dropped Users, roles, groups and applications described in tests/client/e2eTests/database/data.json , from core and plugins, are inserted into database CAS users and LDAP users described in tests/client/e2eTests/database/data.json , from core and plugins, are inserted respectively into tests/client/e2eTests/build/casUsers.json and tests/client/e2eTests/build/ldapUsers.json Tests suites files, in tests/client/e2eTests/protractorSuites.json from core and plugins, are merged into one single file ( tests/client/e2eTests/suites/suites.json ) A CAS server mock is launched An LDAP server mock is launched An OpenVeo HTTP server is launched An OpenVeo socket server is launched An OpenVeo Web Service server is launched A database connection is made to be able to use models in tests All plugins are loaded Add users, roles, groups and application before tests Users, roles, groups and applications can be added before tests are launched using tests/client/e2eTests/resources/data.json configuration file. Structure is as follow: { groups : { ... }, roles : { ... }, users : { ... }, casUsers : [ ... ], ldapUsers : [ ... ], applications : { ... } } Create a group { groups : { coreGroupId : { // Id of the group to use when creating roles name : Core group name , // The name of the group description : Core group description // The description of the group } } } Create a role { roles : { coreAdmin : { // Id of the role to use when creating users name : core-admin , // The name of the role permissions : [ // The list of permissions ids as described in conf.js file add-application , update-application , delete-application , add-taxonomy , update-taxonomy , delete-taxonomy , add-user , update-user , delete-user , add-role , update-role , delete-role , access-applications-page , access-users-page , access-roles-page , get-group-coreGroupId , // Permission get on the group coreGroupId update-group-coreGroupId , // Permission update on the group coreGroupId delete-group-coreGroupId // Permission delete on the group coreGroupId ] } } } Create a user { users : { coreAdmin : { // Id of the user (not used) name : core-admin , // The name of the user email : core-admin@veo-labs.com , User's email password : core-admin , // User's password roles : [ coreAdmin ] // User's list of roles (role ids are the one described in the same file) } } } Create a CAS user { casUsers : [ { name : my-user , // The id of the CAS user attributes : { // CAS user attributes name : my-user , // The attribute holding the name of the CAS user mail : my-usert@openveo.com , // The attribute holding the email of the CAS user groups : [ my-user1 , my-user2 ] // The attribute holding the groups of the CAS user } } ] } Create an LDAP user { ldapUsers : [ { dn : cn=my-user,dc=test , // User's id on LDAP cn : my-user , // User's name groups : my-user-group1,my-user-group2 , // A comma separated list of groups mail : my-user@openveo.com // User's email } ] } Create an application { applications : { coreApplicationsGuest : { // Id of the application (not used) name : core-applications-guest , // Name of the application scopes : [ publish-videos ] // List of scope ids for the application } } } Create test Create your test file in tests/client/e2eTests/ then update the list of suites, if necessary, in tests/client/e2eTests/suites/suites.json . Debug If a test fails, a screenshot of the browser at the instant is taken and available in build/screenshots of the core. Launch end to end tests # Launch all end to end tests on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true # Launch all end to end tests on firefox grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true # Launch only coreHome suite on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"coreHome\"","title":"End to end tests"},{"location":"developers/end-to-end-tests/#introduction","text":"End to end tests are performed using Protractor . Each plugin (including OpenVeo core) defines a list of test suites in tests/client/protractorSuites.json .","title":"Introduction"},{"location":"developers/end-to-end-tests/#install-selenium-web-driver-and-chrome-driver","text":"node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update NB: Note that protractor module could be in node_modules/protractor","title":"Install selenium web driver and chrome driver"},{"location":"developers/end-to-end-tests/#configure-tests","text":"You need to specify a new database which will be used during tests. To do so, you can add a new configuration file in user's directory under ~/.openveo/core called databaseTestConf.json . ~/.openveo/core/databaseTestConf.json { type : mongodb , host : localhost , port : 27017, database : openveo-test , username : openveo , password : openveo } WARNING : Each time you launch end to end tests, all information will be removed from this database ! DO NOT use the same database as the one described in databaseConf.json When launching tests, OpenVeo HTTP server, socket server, CAS mock server and LDAP mock server are automatically spawned and must be configured through serverTestConf.json . Typically you may want to change servers ports. ~/.openveo/core/serverTestConf.json { app : { httpPort : 3003, socketPort : 3004, browserSocketPort : 3004, sessionSecret : 2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx , auth : { cas : { version : 3 , service : http://127.0.0.1:3003/be/authenticate/cas , url : http://127.0.0.1:3005 , userIdAttribute : name , userNameAttribute : attributes.name , userEmailAttribute : attributes.mail , userGroupAttribute : attributes.groups }, ldapauth : { searchFilter : ( (objectclass=person)(cn={{username}})) , url : ldap://127.0.0.1:3006 , bindAttribute : dn , bindDn : cn=openveo,dc=test , bindPassword : test , searchBase : dc=test , searchScope : sub , userGroupAttribute : groups , userIdAttribute : dn , userNameAttribute : cn , userEmailAttribute : mail } } }, ws : { port : 3007 } } You also need to specify the CDN URL to precise the new server port. To do so, you can add a new configuration file in user's directory under ~/.openveo/core called testConf.json . ~/.openveo/core/testConf.json { passwordHashKey : Eu2MNdGjJD , cdn : { url : http://127.0.0.0:3003 } } Finally the logger has to be configured through **loggerTestConf.json**. Typically you may want to deactivate logger standard output. **~/.openveo/core/loggerTestConf.json** ```json { app : { level : info , maxFileSize : 1048576, maxFiles : 2, fileName : /tmp/openveo/logs/openveoTest.log , console : false }, ws : { level : info , maxFileSize : 1048576, maxFiles : 2, fileName : /tmp/openveo/logs/openveoTest-ws.log , console : false } } console: false will deactivate standard output.","title":"Configure tests"},{"location":"developers/end-to-end-tests/#writing-tests","text":"","title":"Writing tests"},{"location":"developers/end-to-end-tests/#boot-steps","text":"When launching end to end tests, several things happen before the first test is launched: Database defined in ~/.openveo/core/databaseTestConf.json is dropped Users, roles, groups and applications described in tests/client/e2eTests/database/data.json , from core and plugins, are inserted into database CAS users and LDAP users described in tests/client/e2eTests/database/data.json , from core and plugins, are inserted respectively into tests/client/e2eTests/build/casUsers.json and tests/client/e2eTests/build/ldapUsers.json Tests suites files, in tests/client/e2eTests/protractorSuites.json from core and plugins, are merged into one single file ( tests/client/e2eTests/suites/suites.json ) A CAS server mock is launched An LDAP server mock is launched An OpenVeo HTTP server is launched An OpenVeo socket server is launched An OpenVeo Web Service server is launched A database connection is made to be able to use models in tests All plugins are loaded","title":"Boot steps"},{"location":"developers/end-to-end-tests/#add-users-roles-groups-and-application-before-tests","text":"Users, roles, groups and applications can be added before tests are launched using tests/client/e2eTests/resources/data.json configuration file. Structure is as follow: { groups : { ... }, roles : { ... }, users : { ... }, casUsers : [ ... ], ldapUsers : [ ... ], applications : { ... } }","title":"Add users, roles, groups and application before tests"},{"location":"developers/end-to-end-tests/#create-a-group","text":"{ groups : { coreGroupId : { // Id of the group to use when creating roles name : Core group name , // The name of the group description : Core group description // The description of the group } } }","title":"Create a group"},{"location":"developers/end-to-end-tests/#create-a-role","text":"{ roles : { coreAdmin : { // Id of the role to use when creating users name : core-admin , // The name of the role permissions : [ // The list of permissions ids as described in conf.js file add-application , update-application , delete-application , add-taxonomy , update-taxonomy , delete-taxonomy , add-user , update-user , delete-user , add-role , update-role , delete-role , access-applications-page , access-users-page , access-roles-page , get-group-coreGroupId , // Permission get on the group coreGroupId update-group-coreGroupId , // Permission update on the group coreGroupId delete-group-coreGroupId // Permission delete on the group coreGroupId ] } } }","title":"Create a role"},{"location":"developers/end-to-end-tests/#create-a-user","text":"{ users : { coreAdmin : { // Id of the user (not used) name : core-admin , // The name of the user email : core-admin@veo-labs.com , User's email password : core-admin , // User's password roles : [ coreAdmin ] // User's list of roles (role ids are the one described in the same file) } } }","title":"Create a user"},{"location":"developers/end-to-end-tests/#create-a-cas-user","text":"{ casUsers : [ { name : my-user , // The id of the CAS user attributes : { // CAS user attributes name : my-user , // The attribute holding the name of the CAS user mail : my-usert@openveo.com , // The attribute holding the email of the CAS user groups : [ my-user1 , my-user2 ] // The attribute holding the groups of the CAS user } } ] }","title":"Create a CAS user"},{"location":"developers/end-to-end-tests/#create-an-ldap-user","text":"{ ldapUsers : [ { dn : cn=my-user,dc=test , // User's id on LDAP cn : my-user , // User's name groups : my-user-group1,my-user-group2 , // A comma separated list of groups mail : my-user@openveo.com // User's email } ] }","title":"Create an LDAP user"},{"location":"developers/end-to-end-tests/#create-an-application","text":"{ applications : { coreApplicationsGuest : { // Id of the application (not used) name : core-applications-guest , // Name of the application scopes : [ publish-videos ] // List of scope ids for the application } } }","title":"Create an application"},{"location":"developers/end-to-end-tests/#create-test","text":"Create your test file in tests/client/e2eTests/ then update the list of suites, if necessary, in tests/client/e2eTests/suites/suites.json .","title":"Create test"},{"location":"developers/end-to-end-tests/#debug","text":"If a test fails, a screenshot of the browser at the instant is taken and available in build/screenshots of the core.","title":"Debug"},{"location":"developers/end-to-end-tests/#launch-end-to-end-tests","text":"# Launch all end to end tests on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true # Launch all end to end tests on firefox grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true # Launch only coreHome suite on chrome grunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"coreHome\"","title":"Launch end to end tests"},{"location":"developers/i18n/","text":"Introduction OpenVeo translations are grouped by dictionaries (JSON files in i18n directory). Actually the server is capable of returning a dictionary by its name and language. Nothing more. The OpenVeo back end is translated on the client side application (AngularJS). Dictionaries Dictionaries are all stored in i18n directory . Dictionary file name is composed of the name of the dictionary followed by the language code: [DICTIONARY_NAME] - [LANGUAGE_CODE] .json With : [DICTIONARY_NAME] the name of the dictionary [LANGUAGE_CODE] the language code e.g. my-dictionary - en_ca .json (will contain translations of dictionary \"my-dictionary\" for Canadian english) e.g. my-dictionary - fr .json (will contain translations of dictionary \"my-dictionary\" for French) If the dictionary must be accessible only by users authenticated to the back end, you must add the prefix : admin- . e.g. admin- my-dictionary-en_ca.json Get a public dictionary From client side, you can request a dictionary using /getDictionary/:dictionary/:code e.g. /getDictionary/my-dictionary/en_ca From server side, you can use the core API: process.api.getCoreApi().getTranslations('my-dictionary', 'en_ca', function(error, translations) { console.log(translations); }); Get a back end dictionary From client side, you can request a back end dictionary (requiring an authenticated user) using /be/getDictionary/:dictionary/:code e.g. /be/getDictionary/my-dictionary/en_ca Nb : Your dictionary file will be admin-my-dictionary-en_ca.json You can use the back end AngularJS API (module ov.i18n ) to help you manipulate dictionaries. See back end AngularJS for more information. From server side, you can use the core API: process.api.getCoreApi().getTranslations('admin-my-dictionary', 'en_ca', function(error, translations) { console.log(translations); });","title":"I18N and I10N"},{"location":"developers/i18n/#introduction","text":"OpenVeo translations are grouped by dictionaries (JSON files in i18n directory). Actually the server is capable of returning a dictionary by its name and language. Nothing more. The OpenVeo back end is translated on the client side application (AngularJS).","title":"Introduction"},{"location":"developers/i18n/#dictionaries","text":"Dictionaries are all stored in i18n directory . Dictionary file name is composed of the name of the dictionary followed by the language code: [DICTIONARY_NAME] - [LANGUAGE_CODE] .json With : [DICTIONARY_NAME] the name of the dictionary [LANGUAGE_CODE] the language code e.g. my-dictionary - en_ca .json (will contain translations of dictionary \"my-dictionary\" for Canadian english) e.g. my-dictionary - fr .json (will contain translations of dictionary \"my-dictionary\" for French) If the dictionary must be accessible only by users authenticated to the back end, you must add the prefix : admin- . e.g. admin- my-dictionary-en_ca.json","title":"Dictionaries"},{"location":"developers/i18n/#get-a-public-dictionary","text":"From client side, you can request a dictionary using /getDictionary/:dictionary/:code e.g. /getDictionary/my-dictionary/en_ca From server side, you can use the core API: process.api.getCoreApi().getTranslations('my-dictionary', 'en_ca', function(error, translations) { console.log(translations); });","title":"Get a public dictionary"},{"location":"developers/i18n/#get-a-back-end-dictionary","text":"From client side, you can request a back end dictionary (requiring an authenticated user) using /be/getDictionary/:dictionary/:code e.g. /be/getDictionary/my-dictionary/en_ca Nb : Your dictionary file will be admin-my-dictionary-en_ca.json You can use the back end AngularJS API (module ov.i18n ) to help you manipulate dictionaries. See back end AngularJS for more information. From server side, you can use the core API: process.api.getCoreApi().getTranslations('admin-my-dictionary', 'en_ca', function(error, translations) { console.log(translations); });","title":"Get a back end dictionary"},{"location":"developers/installation/","text":"Clone project from git cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-core.git Install project's dependencies cd /WORKSPACE_PATH/openveo-core npm install Create NPM links for openveo-api and openveo-test In development environment OpenVeo plugins will be installed using NPM links and will require @openveo/api and @openveo/test. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test npm link","title":"Installation"},{"location":"developers/installation/#clone-project-from-git","text":"cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-core.git","title":"Clone project from git"},{"location":"developers/installation/#install-projects-dependencies","text":"cd /WORKSPACE_PATH/openveo-core npm install","title":"Install project's dependencies"},{"location":"developers/installation/#create-npm-links-for-openveo-api-and-openveo-test","text":"In development environment OpenVeo plugins will be installed using NPM links and will require @openveo/api and @openveo/test. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test npm link","title":"Create NPM links for openveo-api and openveo-test"},{"location":"developers/logger/","text":"Introduction All server logs are performed by module Winston . Use OpenVeo logger By default OpenVeo core creates one logger named openveo . You can use it directly: process.logger.silly('Silly log'); process.logger.debug('Debug log'); process.logger.verbose('Verbose log'); process.logger.info('Info log'); process.logger.warn('Warn log'); process.logger.error('Error log');","title":"Logger"},{"location":"developers/logger/#introduction","text":"All server logs are performed by module Winston .","title":"Introduction"},{"location":"developers/logger/#use-openveo-logger","text":"By default OpenVeo core creates one logger named openveo . You can use it directly: process.logger.silly('Silly log'); process.logger.debug('Debug log'); process.logger.verbose('Verbose log'); process.logger.info('Info log'); process.logger.warn('Warn log'); process.logger.error('Error log');","title":"Use OpenVeo logger"},{"location":"developers/plugins/","text":"Introduction OpenVeo core doesn't have many features on its own. Plugins are made to add functionalities to your OpenVeo. OpenVeo core loads all plugins found in node_modules/@openveo/ (plugins maintained by the OpenVeo team) or node_modules/openveo- * (community plugins) when starting the process. Community plugins can be found on NPM registry . Write a plugin To write your own OpenVeo plugin you should use the OpenVeo Plugin Generator to automatically create the skeleton of your plugin. All documentation needed to implement your plugin is available on the OpenVeo Plugin Generator project.","title":"Plugins"},{"location":"developers/plugins/#introduction","text":"OpenVeo core doesn't have many features on its own. Plugins are made to add functionalities to your OpenVeo. OpenVeo core loads all plugins found in node_modules/@openveo/ (plugins maintained by the OpenVeo team) or node_modules/openveo- * (community plugins) when starting the process. Community plugins can be found on NPM registry .","title":"Introduction"},{"location":"developers/plugins/#write-a-plugin","text":"To write your own OpenVeo plugin you should use the OpenVeo Plugin Generator to automatically create the skeleton of your plugin. All documentation needed to implement your plugin is available on the OpenVeo Plugin Generator project.","title":"Write a plugin"},{"location":"developers/prerequisites/","text":"OpenVeo requires additional elements for development: Git - openveo-core is versioned with git Ruby / Sass / Compass - CSS is written using SASS / Compass Karma - Back end AngularJS single page application is unit tested using karma Grunt - Grunt is used to launch development tasks (compilation, obfuscation, tests etc.) Mkdocs - To generate this documentation","title":"Prerequisites"},{"location":"developers/template-engine/","text":"OpenVeo uses Mustache as the template engine. You have to declare a directory containing your template files before using a mustache template file. You can do it in conf.js file (see plugin's documentation for more information about conf.js file). Then you can call the template using render express function in your controller's actions.","title":"Template engine"},{"location":"developers/unit-tests/","text":"Node.js unit tests Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command: grunt mochaTest AngularJS unit tests Client side unit tests are performed using Karma . You can launch client unit tests with the following command: grunt karma","title":"Unit tests"},{"location":"developers/unit-tests/#nodejs-unit-tests","text":"Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command: grunt mochaTest","title":"Node.js unit tests"},{"location":"developers/unit-tests/#angularjs-unit-tests","text":"Client side unit tests are performed using Karma . You can launch client unit tests with the following command: grunt karma","title":"AngularJS unit tests"}]}